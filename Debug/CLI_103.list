
CLI_103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005084  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  08005190  08005190  00006190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800555c  0800555c  00007104  2**0
                  CONTENTS
  4 .ARM          00000008  0800555c  0800555c  0000655c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005564  08005564  00007104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005564  08005564  00006564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005568  08005568  00006568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000104  20000000  0800556c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000051c  20000104  08005670  00007104  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000620  08005670  00007620  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba3a  00000000  00000000  0000712d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000257d  00000000  00000000  00012b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  000150e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000734  00000000  00000000  00015a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d7f  00000000  00000000  000161b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000caae  00000000  00000000  0002ef33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088fb3  00000000  00000000  0003b9e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4994  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003040  00000000  00000000  000c49d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000c7a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000104 	.word	0x20000104
 8000128:	00000000 	.word	0x00000000
 800012c:	08005178 	.word	0x08005178

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000108 	.word	0x20000108
 8000148:	08005178 	.word	0x08005178

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <main_loop>:
    {"led-blink", handleLedBlinkCommand},
    {"adc-get", handleAdcGetCommand},
    {"info", handleInfoCommand},
    {NULL, handleInvalidCommand}
};
void main_loop(void) {
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af02      	add	r7, sp, #8
	if (UART_Init(&uart1,uartConfig) !=0){
 8000176:	4b25      	ldr	r3, [pc, #148]	@ (800020c <main_loop+0x9c>)
 8000178:	68da      	ldr	r2, [r3, #12]
 800017a:	9200      	str	r2, [sp, #0]
 800017c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800017e:	4824      	ldr	r0, [pc, #144]	@ (8000210 <main_loop+0xa0>)
 8000180:	f003 fbde 	bl	8003940 <UART_Init>
 8000184:	4603      	mov	r3, r0
 8000186:	2b00      	cmp	r3, #0
 8000188:	d001      	beq.n	800018e <main_loop+0x1e>
		Error_Handler();
 800018a:	f000 fb5b 	bl	8000844 <Error_Handler>
	}
	HAL_UART_Receive_IT(&uart1.huart, &byte, 1);
 800018e:	2201      	movs	r2, #1
 8000190:	4920      	ldr	r1, [pc, #128]	@ (8000214 <main_loop+0xa4>)
 8000192:	481f      	ldr	r0, [pc, #124]	@ (8000210 <main_loop+0xa0>)
 8000194:	f002 fd65 	bl	8002c62 <HAL_UART_Receive_IT>

    while(1) {

		while(CircularBuffer_Read(&rxBuffer, &byte)) {
 8000198:	e02f      	b.n	80001fa <main_loop+0x8a>
			send_byte(&uart1.huart,byte);
 800019a:	4b1e      	ldr	r3, [pc, #120]	@ (8000214 <main_loop+0xa4>)
 800019c:	781b      	ldrb	r3, [r3, #0]
 800019e:	4619      	mov	r1, r3
 80001a0:	481b      	ldr	r0, [pc, #108]	@ (8000210 <main_loop+0xa0>)
 80001a2:	f003 fc5f 	bl	8003a64 <send_byte>
			checkCtrlC(byte);
 80001a6:	4b1b      	ldr	r3, [pc, #108]	@ (8000214 <main_loop+0xa4>)
 80001a8:	781b      	ldrb	r3, [r3, #0]
 80001aa:	4618      	mov	r0, r3
 80001ac:	f003 fd4c 	bl	8003c48 <checkCtrlC>
			if (byte == '\r' || byte == '\n') {
 80001b0:	4b18      	ldr	r3, [pc, #96]	@ (8000214 <main_loop+0xa4>)
 80001b2:	781b      	ldrb	r3, [r3, #0]
 80001b4:	2b0d      	cmp	r3, #13
 80001b6:	d003      	beq.n	80001c0 <main_loop+0x50>
 80001b8:	4b16      	ldr	r3, [pc, #88]	@ (8000214 <main_loop+0xa4>)
 80001ba:	781b      	ldrb	r3, [r3, #0]
 80001bc:	2b0a      	cmp	r3, #10
 80001be:	d10d      	bne.n	80001dc <main_loop+0x6c>
				buffer[myindex] = '\0';
 80001c0:	4b15      	ldr	r3, [pc, #84]	@ (8000218 <main_loop+0xa8>)
 80001c2:	881b      	ldrh	r3, [r3, #0]
 80001c4:	461a      	mov	r2, r3
 80001c6:	4b15      	ldr	r3, [pc, #84]	@ (800021c <main_loop+0xac>)
 80001c8:	2100      	movs	r1, #0
 80001ca:	5499      	strb	r1, [r3, r2]
				processCommand(commandMap, buffer);
 80001cc:	4913      	ldr	r1, [pc, #76]	@ (800021c <main_loop+0xac>)
 80001ce:	4814      	ldr	r0, [pc, #80]	@ (8000220 <main_loop+0xb0>)
 80001d0:	f003 fcb4 	bl	8003b3c <processCommand>
				myindex = 0;
 80001d4:	4b10      	ldr	r3, [pc, #64]	@ (8000218 <main_loop+0xa8>)
 80001d6:	2200      	movs	r2, #0
 80001d8:	801a      	strh	r2, [r3, #0]
 80001da:	e00e      	b.n	80001fa <main_loop+0x8a>
			}else if (myindex < BUFFER_SIZE - 1) {
 80001dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000218 <main_loop+0xa8>)
 80001de:	881b      	ldrh	r3, [r3, #0]
 80001e0:	2bfe      	cmp	r3, #254	@ 0xfe
 80001e2:	d80a      	bhi.n	80001fa <main_loop+0x8a>
				buffer[myindex++] = byte;
 80001e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000218 <main_loop+0xa8>)
 80001e6:	881b      	ldrh	r3, [r3, #0]
 80001e8:	1c5a      	adds	r2, r3, #1
 80001ea:	b291      	uxth	r1, r2
 80001ec:	4a0a      	ldr	r2, [pc, #40]	@ (8000218 <main_loop+0xa8>)
 80001ee:	8011      	strh	r1, [r2, #0]
 80001f0:	461a      	mov	r2, r3
 80001f2:	4b08      	ldr	r3, [pc, #32]	@ (8000214 <main_loop+0xa4>)
 80001f4:	7819      	ldrb	r1, [r3, #0]
 80001f6:	4b09      	ldr	r3, [pc, #36]	@ (800021c <main_loop+0xac>)
 80001f8:	5499      	strb	r1, [r3, r2]
		while(CircularBuffer_Read(&rxBuffer, &byte)) {
 80001fa:	4906      	ldr	r1, [pc, #24]	@ (8000214 <main_loop+0xa4>)
 80001fc:	4809      	ldr	r0, [pc, #36]	@ (8000224 <main_loop+0xb4>)
 80001fe:	f003 fc6e 	bl	8003ade <CircularBuffer_Read>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d1c8      	bne.n	800019a <main_loop+0x2a>
 8000208:	e7f7      	b.n	80001fa <main_loop+0x8a>
 800020a:	bf00      	nop
 800020c:	20000000 	.word	0x20000000
 8000210:	2000004c 	.word	0x2000004c
 8000214:	20000120 	.word	0x20000120
 8000218:	20000122 	.word	0x20000122
 800021c:	20000124 	.word	0x20000124
 8000220:	20000010 	.word	0x20000010
 8000224:	20000224 	.word	0x20000224

08000228 <startBlinking>:

char msg[50];
char response[100];
uint32_t previous_time = 0;

void startBlinking(uint8_t *pins, int count) {
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
 8000230:	6039      	str	r1, [r7, #0]
	while(!Setstop){
 8000232:	e022      	b.n	800027a <startBlinking+0x52>
		if((HAL_GetTick()- previous_time) >200){
 8000234:	f000 fdb8 	bl	8000da8 <HAL_GetTick>
 8000238:	4602      	mov	r2, r0
 800023a:	4b20      	ldr	r3, [pc, #128]	@ (80002bc <startBlinking+0x94>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	1ad3      	subs	r3, r2, r3
 8000240:	2bc8      	cmp	r3, #200	@ 0xc8
 8000242:	d91a      	bls.n	800027a <startBlinking+0x52>
			for (int i = 0; i < count; i++) {
 8000244:	2300      	movs	r3, #0
 8000246:	60fb      	str	r3, [r7, #12]
 8000248:	e00e      	b.n	8000268 <startBlinking+0x40>
				HAL_GPIO_TogglePin(GPIOA, 1 << pins[i]);
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	687a      	ldr	r2, [r7, #4]
 800024e:	4413      	add	r3, r2
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	461a      	mov	r2, r3
 8000254:	2301      	movs	r3, #1
 8000256:	4093      	lsls	r3, r2
 8000258:	b29b      	uxth	r3, r3
 800025a:	4619      	mov	r1, r3
 800025c:	4818      	ldr	r0, [pc, #96]	@ (80002c0 <startBlinking+0x98>)
 800025e:	f001 fe97 	bl	8001f90 <HAL_GPIO_TogglePin>
			for (int i = 0; i < count; i++) {
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	3301      	adds	r3, #1
 8000266:	60fb      	str	r3, [r7, #12]
 8000268:	68fa      	ldr	r2, [r7, #12]
 800026a:	683b      	ldr	r3, [r7, #0]
 800026c:	429a      	cmp	r2, r3
 800026e:	dbec      	blt.n	800024a <startBlinking+0x22>
			}
			previous_time = HAL_GetTick();
 8000270:	f000 fd9a 	bl	8000da8 <HAL_GetTick>
 8000274:	4603      	mov	r3, r0
 8000276:	4a11      	ldr	r2, [pc, #68]	@ (80002bc <startBlinking+0x94>)
 8000278:	6013      	str	r3, [r2, #0]
	while(!Setstop){
 800027a:	4b12      	ldr	r3, [pc, #72]	@ (80002c4 <startBlinking+0x9c>)
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	b2db      	uxtb	r3, r3
 8000280:	2b00      	cmp	r3, #0
 8000282:	d0d7      	beq.n	8000234 <startBlinking+0xc>
		}
	}
	for (int i = 0; i < count; i++) {
 8000284:	2300      	movs	r3, #0
 8000286:	60bb      	str	r3, [r7, #8]
 8000288:	e00f      	b.n	80002aa <startBlinking+0x82>
		HAL_GPIO_WritePin(GPIOA, 1 << pins[i], GPIO_PIN_RESET);
 800028a:	68bb      	ldr	r3, [r7, #8]
 800028c:	687a      	ldr	r2, [r7, #4]
 800028e:	4413      	add	r3, r2
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	461a      	mov	r2, r3
 8000294:	2301      	movs	r3, #1
 8000296:	4093      	lsls	r3, r2
 8000298:	b29b      	uxth	r3, r3
 800029a:	2200      	movs	r2, #0
 800029c:	4619      	mov	r1, r3
 800029e:	4808      	ldr	r0, [pc, #32]	@ (80002c0 <startBlinking+0x98>)
 80002a0:	f001 fe5e 	bl	8001f60 <HAL_GPIO_WritePin>
	for (int i = 0; i < count; i++) {
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	3301      	adds	r3, #1
 80002a8:	60bb      	str	r3, [r7, #8]
 80002aa:	68ba      	ldr	r2, [r7, #8]
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	429a      	cmp	r2, r3
 80002b0:	dbeb      	blt.n	800028a <startBlinking+0x62>
	}
}
 80002b2:	bf00      	nop
 80002b4:	bf00      	nop
 80002b6:	3710      	adds	r7, #16
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	200003c0 	.word	0x200003c0
 80002c0:	40010800 	.word	0x40010800
 80002c4:	20000049 	.word	0x20000049

080002c8 <handleLedOnCommand>:
void handleLedOnCommand(uint8_t *argvalue, uint8_t argcount) {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
 80002d0:	460b      	mov	r3, r1
 80002d2:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < argcount; i++) {
 80002d4:	2300      	movs	r3, #0
 80002d6:	60fb      	str	r3, [r7, #12]
 80002d8:	e00f      	b.n	80002fa <handleLedOnCommand+0x32>
		HAL_GPIO_WritePin(GPIOA, 1 << argvalue[i], GPIO_PIN_SET);
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	687a      	ldr	r2, [r7, #4]
 80002de:	4413      	add	r3, r2
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	461a      	mov	r2, r3
 80002e4:	2301      	movs	r3, #1
 80002e6:	4093      	lsls	r3, r2
 80002e8:	b29b      	uxth	r3, r3
 80002ea:	2201      	movs	r2, #1
 80002ec:	4619      	mov	r1, r3
 80002ee:	4807      	ldr	r0, [pc, #28]	@ (800030c <handleLedOnCommand+0x44>)
 80002f0:	f001 fe36 	bl	8001f60 <HAL_GPIO_WritePin>
	for (int i = 0; i < argcount; i++) {
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	3301      	adds	r3, #1
 80002f8:	60fb      	str	r3, [r7, #12]
 80002fa:	78fb      	ldrb	r3, [r7, #3]
 80002fc:	68fa      	ldr	r2, [r7, #12]
 80002fe:	429a      	cmp	r2, r3
 8000300:	dbeb      	blt.n	80002da <handleLedOnCommand+0x12>
	}
}
 8000302:	bf00      	nop
 8000304:	bf00      	nop
 8000306:	3710      	adds	r7, #16
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	40010800 	.word	0x40010800

08000310 <handleLedOffCommand>:

void handleLedOffCommand(uint8_t *argvalue, uint8_t argcount) {
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	460b      	mov	r3, r1
 800031a:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < argcount; i++) {
 800031c:	2300      	movs	r3, #0
 800031e:	60fb      	str	r3, [r7, #12]
 8000320:	e00f      	b.n	8000342 <handleLedOffCommand+0x32>
		HAL_GPIO_WritePin(GPIOA, 1 << argvalue[i], GPIO_PIN_RESET);
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	687a      	ldr	r2, [r7, #4]
 8000326:	4413      	add	r3, r2
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	461a      	mov	r2, r3
 800032c:	2301      	movs	r3, #1
 800032e:	4093      	lsls	r3, r2
 8000330:	b29b      	uxth	r3, r3
 8000332:	2200      	movs	r2, #0
 8000334:	4619      	mov	r1, r3
 8000336:	4807      	ldr	r0, [pc, #28]	@ (8000354 <handleLedOffCommand+0x44>)
 8000338:	f001 fe12 	bl	8001f60 <HAL_GPIO_WritePin>
	for (int i = 0; i < argcount; i++) {
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	3301      	adds	r3, #1
 8000340:	60fb      	str	r3, [r7, #12]
 8000342:	78fb      	ldrb	r3, [r7, #3]
 8000344:	68fa      	ldr	r2, [r7, #12]
 8000346:	429a      	cmp	r2, r3
 8000348:	dbeb      	blt.n	8000322 <handleLedOffCommand+0x12>
	}
}
 800034a:	bf00      	nop
 800034c:	bf00      	nop
 800034e:	3710      	adds	r7, #16
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	40010800 	.word	0x40010800

08000358 <handleLedBlinkCommand>:
void handleLedBlinkCommand(uint8_t *argvalue, uint8_t argcount) {
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	460b      	mov	r3, r1
 8000362:	70fb      	strb	r3, [r7, #3]
	Setstop = 0;
 8000364:	4b07      	ldr	r3, [pc, #28]	@ (8000384 <handleLedBlinkCommand+0x2c>)
 8000366:	2200      	movs	r2, #0
 8000368:	701a      	strb	r2, [r3, #0]
	UART_SendString(&uart1.huart, "\r\n");
 800036a:	4907      	ldr	r1, [pc, #28]	@ (8000388 <handleLedBlinkCommand+0x30>)
 800036c:	4807      	ldr	r0, [pc, #28]	@ (800038c <handleLedBlinkCommand+0x34>)
 800036e:	f003 fb2e 	bl	80039ce <UART_SendString>
	startBlinking(argvalue, argcount);
 8000372:	78fb      	ldrb	r3, [r7, #3]
 8000374:	4619      	mov	r1, r3
 8000376:	6878      	ldr	r0, [r7, #4]
 8000378:	f7ff ff56 	bl	8000228 <startBlinking>
}
 800037c:	bf00      	nop
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	20000049 	.word	0x20000049
 8000388:	080051bc 	.word	0x080051bc
 800038c:	2000004c 	.word	0x2000004c

08000390 <handleAdcGetCommand>:

void handleAdcGetCommand(uint8_t *argvalue, uint8_t argcount) {
 8000390:	b580      	push	{r7, lr}
 8000392:	b08a      	sub	sp, #40	@ 0x28
 8000394:	af02      	add	r7, sp, #8
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	460b      	mov	r3, r1
 800039a:	70fb      	strb	r3, [r7, #3]
    ADC_ChannelConfTypeDef sConfig = {0};
 800039c:	f107 030c 	add.w	r3, r7, #12
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	605a      	str	r2, [r3, #4]
 80003a6:	609a      	str	r2, [r3, #8]
    for(int i = 0; i< argcount; i++){
 80003a8:	2300      	movs	r3, #0
 80003aa:	61fb      	str	r3, [r7, #28]
 80003ac:	e06a      	b.n	8000484 <handleAdcGetCommand+0xf4>
		if (argvalue[i]==0||argvalue[i] ==1){
 80003ae:	69fb      	ldr	r3, [r7, #28]
 80003b0:	687a      	ldr	r2, [r7, #4]
 80003b2:	4413      	add	r3, r2
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d005      	beq.n	80003c6 <handleAdcGetCommand+0x36>
 80003ba:	69fb      	ldr	r3, [r7, #28]
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	4413      	add	r3, r2
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d156      	bne.n	8000474 <handleAdcGetCommand+0xe4>
			sConfig.Channel = (argvalue[i] == 0) ? ADC_CHANNEL_0 : ADC_CHANNEL_1;
 80003c6:	69fb      	ldr	r3, [r7, #28]
 80003c8:	687a      	ldr	r2, [r7, #4]
 80003ca:	4413      	add	r3, r2
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	bf14      	ite	ne
 80003d2:	2301      	movne	r3, #1
 80003d4:	2300      	moveq	r3, #0
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	60fb      	str	r3, [r7, #12]
			sConfig.Rank = ADC_REGULAR_RANK_1;
 80003da:	2301      	movs	r3, #1
 80003dc:	613b      	str	r3, [r7, #16]
			sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80003de:	2303      	movs	r3, #3
 80003e0:	617b      	str	r3, [r7, #20]
			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80003e2:	f107 030c 	add.w	r3, r7, #12
 80003e6:	4619      	mov	r1, r3
 80003e8:	482a      	ldr	r0, [pc, #168]	@ (8000494 <handleAdcGetCommand+0x104>)
 80003ea:	f000 ff7f 	bl	80012ec <HAL_ADC_ConfigChannel>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d004      	beq.n	80003fe <handleAdcGetCommand+0x6e>
				UART_SendString(&uart1.huart, "\r\nError: Failed to configure ADC channel.");
 80003f4:	4928      	ldr	r1, [pc, #160]	@ (8000498 <handleAdcGetCommand+0x108>)
 80003f6:	4829      	ldr	r0, [pc, #164]	@ (800049c <handleAdcGetCommand+0x10c>)
 80003f8:	f003 fae9 	bl	80039ce <UART_SendString>
				return;
 80003fc:	e046      	b.n	800048c <handleAdcGetCommand+0xfc>
			}
			Setstop = 0;
 80003fe:	4b28      	ldr	r3, [pc, #160]	@ (80004a0 <handleAdcGetCommand+0x110>)
 8000400:	2200      	movs	r2, #0
 8000402:	701a      	strb	r2, [r3, #0]
			while(!Setstop){
 8000404:	e030      	b.n	8000468 <handleAdcGetCommand+0xd8>
				if((HAL_GetTick()- previous_time) >1000){
 8000406:	f000 fccf 	bl	8000da8 <HAL_GetTick>
 800040a:	4602      	mov	r2, r0
 800040c:	4b25      	ldr	r3, [pc, #148]	@ (80004a4 <handleAdcGetCommand+0x114>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	1ad3      	subs	r3, r2, r3
 8000412:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000416:	d927      	bls.n	8000468 <handleAdcGetCommand+0xd8>
					HAL_ADC_Start(&hadc1);
 8000418:	481e      	ldr	r0, [pc, #120]	@ (8000494 <handleAdcGetCommand+0x104>)
 800041a:	f000 fda7 	bl	8000f6c <HAL_ADC_Start>
					HAL_ADC_PollForConversion(&hadc1, 100);
 800041e:	2164      	movs	r1, #100	@ 0x64
 8000420:	481c      	ldr	r0, [pc, #112]	@ (8000494 <handleAdcGetCommand+0x104>)
 8000422:	f000 fe51 	bl	80010c8 <HAL_ADC_PollForConversion>
					uint32_t value = HAL_ADC_GetValue(&hadc1);
 8000426:	481b      	ldr	r0, [pc, #108]	@ (8000494 <handleAdcGetCommand+0x104>)
 8000428:	f000 ff54 	bl	80012d4 <HAL_ADC_GetValue>
 800042c:	61b8      	str	r0, [r7, #24]

					snprintf(msg, sizeof(msg), "\r\nADC Value (PA%d): %lu", argvalue[i], value);
 800042e:	69fb      	ldr	r3, [r7, #28]
 8000430:	687a      	ldr	r2, [r7, #4]
 8000432:	4413      	add	r3, r2
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	461a      	mov	r2, r3
 8000438:	69bb      	ldr	r3, [r7, #24]
 800043a:	9300      	str	r3, [sp, #0]
 800043c:	4613      	mov	r3, r2
 800043e:	4a1a      	ldr	r2, [pc, #104]	@ (80004a8 <handleAdcGetCommand+0x118>)
 8000440:	2132      	movs	r1, #50	@ 0x32
 8000442:	481a      	ldr	r0, [pc, #104]	@ (80004ac <handleAdcGetCommand+0x11c>)
 8000444:	f003 fd6a 	bl	8003f1c <sniprintf>
					HAL_UART_Transmit(&uart1.huart, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000448:	4818      	ldr	r0, [pc, #96]	@ (80004ac <handleAdcGetCommand+0x11c>)
 800044a:	f7ff fe89 	bl	8000160 <strlen>
 800044e:	4603      	mov	r3, r0
 8000450:	b29a      	uxth	r2, r3
 8000452:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000456:	4915      	ldr	r1, [pc, #84]	@ (80004ac <handleAdcGetCommand+0x11c>)
 8000458:	4810      	ldr	r0, [pc, #64]	@ (800049c <handleAdcGetCommand+0x10c>)
 800045a:	f002 fb7f 	bl	8002b5c <HAL_UART_Transmit>
					previous_time = HAL_GetTick();
 800045e:	f000 fca3 	bl	8000da8 <HAL_GetTick>
 8000462:	4603      	mov	r3, r0
 8000464:	4a0f      	ldr	r2, [pc, #60]	@ (80004a4 <handleAdcGetCommand+0x114>)
 8000466:	6013      	str	r3, [r2, #0]
			while(!Setstop){
 8000468:	4b0d      	ldr	r3, [pc, #52]	@ (80004a0 <handleAdcGetCommand+0x110>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	b2db      	uxtb	r3, r3
 800046e:	2b00      	cmp	r3, #0
 8000470:	d0c9      	beq.n	8000406 <handleAdcGetCommand+0x76>
		if (argvalue[i]==0||argvalue[i] ==1){
 8000472:	e004      	b.n	800047e <handleAdcGetCommand+0xee>
				}
			}
		} else {
			UART_SendString(&uart1.huart, "\r\nError: Invalid pin. Only PA0 and PA1 are allowed.");
 8000474:	490e      	ldr	r1, [pc, #56]	@ (80004b0 <handleAdcGetCommand+0x120>)
 8000476:	4809      	ldr	r0, [pc, #36]	@ (800049c <handleAdcGetCommand+0x10c>)
 8000478:	f003 faa9 	bl	80039ce <UART_SendString>
			return;
 800047c:	e006      	b.n	800048c <handleAdcGetCommand+0xfc>
    for(int i = 0; i< argcount; i++){
 800047e:	69fb      	ldr	r3, [r7, #28]
 8000480:	3301      	adds	r3, #1
 8000482:	61fb      	str	r3, [r7, #28]
 8000484:	78fb      	ldrb	r3, [r7, #3]
 8000486:	69fa      	ldr	r2, [r7, #28]
 8000488:	429a      	cmp	r2, r3
 800048a:	db90      	blt.n	80003ae <handleAdcGetCommand+0x1e>
		}
    }
}
 800048c:	3720      	adds	r7, #32
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	200003c4 	.word	0x200003c4
 8000498:	080051c0 	.word	0x080051c0
 800049c:	2000004c 	.word	0x2000004c
 80004a0:	20000049 	.word	0x20000049
 80004a4:	200003c0 	.word	0x200003c0
 80004a8:	080051ec 	.word	0x080051ec
 80004ac:	20000328 	.word	0x20000328
 80004b0:	08005204 	.word	0x08005204

080004b4 <handleInfoCommand>:
void handleInfoCommand(uint8_t *argvalue, uint8_t argcount) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	460b      	mov	r3, r1
 80004be:	70fb      	strb	r3, [r7, #3]
	if (argvalue == NULL || strlen((char *)argvalue) == 0) {
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d003      	beq.n	80004ce <handleInfoCommand+0x1a>
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d104      	bne.n	80004d8 <handleInfoCommand+0x24>
		UART_SendString(&uart1.huart, "Sample text: Default message");
 80004ce:	490d      	ldr	r1, [pc, #52]	@ (8000504 <handleInfoCommand+0x50>)
 80004d0:	480d      	ldr	r0, [pc, #52]	@ (8000508 <handleInfoCommand+0x54>)
 80004d2:	f003 fa7c 	bl	80039ce <UART_SendString>
 80004d6:	e011      	b.n	80004fc <handleInfoCommand+0x48>
	} else {
		snprintf(response, sizeof(response), "\r\nSample text: %s", argvalue);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4a0c      	ldr	r2, [pc, #48]	@ (800050c <handleInfoCommand+0x58>)
 80004dc:	2164      	movs	r1, #100	@ 0x64
 80004de:	480c      	ldr	r0, [pc, #48]	@ (8000510 <handleInfoCommand+0x5c>)
 80004e0:	f003 fd1c 	bl	8003f1c <sniprintf>
		HAL_UART_Transmit(&uart1.huart, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
 80004e4:	480a      	ldr	r0, [pc, #40]	@ (8000510 <handleInfoCommand+0x5c>)
 80004e6:	f7ff fe3b 	bl	8000160 <strlen>
 80004ea:	4603      	mov	r3, r0
 80004ec:	b29a      	uxth	r2, r3
 80004ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004f2:	4907      	ldr	r1, [pc, #28]	@ (8000510 <handleInfoCommand+0x5c>)
 80004f4:	4804      	ldr	r0, [pc, #16]	@ (8000508 <handleInfoCommand+0x54>)
 80004f6:	f002 fb31 	bl	8002b5c <HAL_UART_Transmit>
	}
}
 80004fa:	bf00      	nop
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	08005238 	.word	0x08005238
 8000508:	2000004c 	.word	0x2000004c
 800050c:	08005258 	.word	0x08005258
 8000510:	2000035c 	.word	0x2000035c

08000514 <handleInvalidCommand>:
void handleInvalidCommand(uint8_t *argvalue, uint8_t argcount) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b0c2      	sub	sp, #264	@ 0x108
 8000518:	af00      	add	r7, sp, #0
 800051a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800051e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000522:	6018      	str	r0, [r3, #0]
 8000524:	460a      	mov	r2, r1
 8000526:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800052a:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 800052e:	701a      	strb	r2, [r3, #0]
    char response[256]; // Buffer to hold the error message

    // Generate the error message
    snprintf(response, sizeof(response), "\r\nError: Invalid command \"%s\". Please try again.", argvalue);
 8000530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000534:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000538:	f107 0008 	add.w	r0, r7, #8
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a0c      	ldr	r2, [pc, #48]	@ (8000570 <handleInvalidCommand+0x5c>)
 8000540:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000544:	f003 fcea 	bl	8003f1c <sniprintf>

    // Transmit the error message over UART
    HAL_UART_Transmit(&uart1.huart, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
 8000548:	f107 0308 	add.w	r3, r7, #8
 800054c:	4618      	mov	r0, r3
 800054e:	f7ff fe07 	bl	8000160 <strlen>
 8000552:	4603      	mov	r3, r0
 8000554:	b29a      	uxth	r2, r3
 8000556:	f107 0108 	add.w	r1, r7, #8
 800055a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800055e:	4805      	ldr	r0, [pc, #20]	@ (8000574 <handleInvalidCommand+0x60>)
 8000560:	f002 fafc 	bl	8002b5c <HAL_UART_Transmit>
}
 8000564:	bf00      	nop
 8000566:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	0800526c 	.word	0x0800526c
 8000574:	2000004c 	.word	0x2000004c

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057c:	f000 fbbc 	bl	8000cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000580:	f000 f80e 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000584:	f000 f91e 	bl	80007c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000588:	f000 f8fe 	bl	8000788 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800058c:	f000 f8a8 	bl	80006e0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000590:	f000 f8d0 	bl	8000734 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000594:	f000 f856 	bl	8000644 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  main_loop();
 8000598:	f7ff fdea 	bl	8000170 <main_loop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059c:	bf00      	nop
 800059e:	e7fd      	b.n	800059c <main+0x24>

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	@ 0x50
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005aa:	2228      	movs	r2, #40	@ 0x28
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 fd2b 	bl	800400a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d0:	2302      	movs	r3, #2
 80005d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d4:	2301      	movs	r3, #1
 80005d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d8:	2310      	movs	r3, #16
 80005da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005dc:	2300      	movs	r3, #0
 80005de:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005e4:	4618      	mov	r0, r3
 80005e6:	f001 fced 	bl	8001fc4 <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80005f0:	f000 f928 	bl	8000844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000600:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000604:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f001 ff59 	bl	80024c8 <HAL_RCC_ClockConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800061c:	f000 f912 	bl	8000844 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000620:	2302      	movs	r3, #2
 8000622:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	4618      	mov	r0, r3
 800062c:	f002 f8da 	bl	80027e4 <HAL_RCCEx_PeriphCLKConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000636:	f000 f905 	bl	8000844 <Error_Handler>
  }
}
 800063a:	bf00      	nop
 800063c:	3750      	adds	r7, #80	@ 0x50
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000654:	4b20      	ldr	r3, [pc, #128]	@ (80006d8 <MX_ADC1_Init+0x94>)
 8000656:	4a21      	ldr	r2, [pc, #132]	@ (80006dc <MX_ADC1_Init+0x98>)
 8000658:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800065a:	4b1f      	ldr	r3, [pc, #124]	@ (80006d8 <MX_ADC1_Init+0x94>)
 800065c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000660:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000662:	4b1d      	ldr	r3, [pc, #116]	@ (80006d8 <MX_ADC1_Init+0x94>)
 8000664:	2200      	movs	r2, #0
 8000666:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000668:	4b1b      	ldr	r3, [pc, #108]	@ (80006d8 <MX_ADC1_Init+0x94>)
 800066a:	2200      	movs	r2, #0
 800066c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800066e:	4b1a      	ldr	r3, [pc, #104]	@ (80006d8 <MX_ADC1_Init+0x94>)
 8000670:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000674:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000676:	4b18      	ldr	r3, [pc, #96]	@ (80006d8 <MX_ADC1_Init+0x94>)
 8000678:	2200      	movs	r2, #0
 800067a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 800067c:	4b16      	ldr	r3, [pc, #88]	@ (80006d8 <MX_ADC1_Init+0x94>)
 800067e:	2202      	movs	r2, #2
 8000680:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000682:	4815      	ldr	r0, [pc, #84]	@ (80006d8 <MX_ADC1_Init+0x94>)
 8000684:	f000 fb9a 	bl	8000dbc <HAL_ADC_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800068e:	f000 f8d9 	bl	8000844 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000692:	2300      	movs	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2301      	movs	r3, #1
 8000698:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	4619      	mov	r1, r3
 80006a2:	480d      	ldr	r0, [pc, #52]	@ (80006d8 <MX_ADC1_Init+0x94>)
 80006a4:	f000 fe22 	bl	80012ec <HAL_ADC_ConfigChannel>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006ae:	f000 f8c9 	bl	8000844 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006b2:	2301      	movs	r3, #1
 80006b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	4619      	mov	r1, r3
 80006be:	4806      	ldr	r0, [pc, #24]	@ (80006d8 <MX_ADC1_Init+0x94>)
 80006c0:	f000 fe14 	bl	80012ec <HAL_ADC_ConfigChannel>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80006ca:	f000 f8bb 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	200003c4 	.word	0x200003c4
 80006dc:	40012400 	.word	0x40012400

080006e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006e4:	4b11      	ldr	r3, [pc, #68]	@ (800072c <MX_USART1_UART_Init+0x4c>)
 80006e6:	4a12      	ldr	r2, [pc, #72]	@ (8000730 <MX_USART1_UART_Init+0x50>)
 80006e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ea:	4b10      	ldr	r3, [pc, #64]	@ (800072c <MX_USART1_UART_Init+0x4c>)
 80006ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <MX_USART1_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <MX_USART1_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	@ (800072c <MX_USART1_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000704:	4b09      	ldr	r3, [pc, #36]	@ (800072c <MX_USART1_UART_Init+0x4c>)
 8000706:	220c      	movs	r2, #12
 8000708:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070a:	4b08      	ldr	r3, [pc, #32]	@ (800072c <MX_USART1_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000710:	4b06      	ldr	r3, [pc, #24]	@ (800072c <MX_USART1_UART_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	@ (800072c <MX_USART1_UART_Init+0x4c>)
 8000718:	f002 f9d0 	bl	8002abc <HAL_UART_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000722:	f000 f88f 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000438 	.word	0x20000438
 8000730:	40013800 	.word	0x40013800

08000734 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000738:	4b11      	ldr	r3, [pc, #68]	@ (8000780 <MX_USART2_UART_Init+0x4c>)
 800073a:	4a12      	ldr	r2, [pc, #72]	@ (8000784 <MX_USART2_UART_Init+0x50>)
 800073c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800073e:	4b10      	ldr	r3, [pc, #64]	@ (8000780 <MX_USART2_UART_Init+0x4c>)
 8000740:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000744:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <MX_USART2_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <MX_USART2_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	@ (8000780 <MX_USART2_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000758:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <MX_USART2_UART_Init+0x4c>)
 800075a:	220c      	movs	r2, #12
 800075c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b08      	ldr	r3, [pc, #32]	@ (8000780 <MX_USART2_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000764:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <MX_USART2_UART_Init+0x4c>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	@ (8000780 <MX_USART2_UART_Init+0x4c>)
 800076c:	f002 f9a6 	bl	8002abc <HAL_UART_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000776:	f000 f865 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000480 	.word	0x20000480
 8000784:	40004400 	.word	0x40004400

08000788 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800078e:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <MX_DMA_Init+0x38>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	4a0b      	ldr	r2, [pc, #44]	@ (80007c0 <MX_DMA_Init+0x38>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6153      	str	r3, [r2, #20]
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <MX_DMA_Init+0x38>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2100      	movs	r1, #0
 80007aa:	200b      	movs	r0, #11
 80007ac:	f001 f809 	bl	80017c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007b0:	200b      	movs	r0, #11
 80007b2:	f001 f822 	bl	80017fa <HAL_NVIC_EnableIRQ>

}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 0308 	add.w	r3, r7, #8
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d8:	4b18      	ldr	r3, [pc, #96]	@ (800083c <MX_GPIO_Init+0x78>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	4a17      	ldr	r2, [pc, #92]	@ (800083c <MX_GPIO_Init+0x78>)
 80007de:	f043 0320 	orr.w	r3, r3, #32
 80007e2:	6193      	str	r3, [r2, #24]
 80007e4:	4b15      	ldr	r3, [pc, #84]	@ (800083c <MX_GPIO_Init+0x78>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	f003 0320 	and.w	r3, r3, #32
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f0:	4b12      	ldr	r3, [pc, #72]	@ (800083c <MX_GPIO_Init+0x78>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	4a11      	ldr	r2, [pc, #68]	@ (800083c <MX_GPIO_Init+0x78>)
 80007f6:	f043 0304 	orr.w	r3, r3, #4
 80007fa:	6193      	str	r3, [r2, #24]
 80007fc:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <MX_GPIO_Init+0x78>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	f003 0304 	and.w	r3, r3, #4
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 800080e:	480c      	ldr	r0, [pc, #48]	@ (8000840 <MX_GPIO_Init+0x7c>)
 8000810:	f001 fba6 	bl	8001f60 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000814:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 8000818:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	2301      	movs	r3, #1
 800081c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2302      	movs	r3, #2
 8000824:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000826:	f107 0308 	add.w	r3, r7, #8
 800082a:	4619      	mov	r1, r3
 800082c:	4804      	ldr	r0, [pc, #16]	@ (8000840 <MX_GPIO_Init+0x7c>)
 800082e:	f001 fa13 	bl	8001c58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000832:	bf00      	nop
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40021000 	.word	0x40021000
 8000840:	40010800 	.word	0x40010800

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
}
 800084a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <Error_Handler+0x8>

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000856:	4b15      	ldr	r3, [pc, #84]	@ (80008ac <HAL_MspInit+0x5c>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	4a14      	ldr	r2, [pc, #80]	@ (80008ac <HAL_MspInit+0x5c>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6193      	str	r3, [r2, #24]
 8000862:	4b12      	ldr	r3, [pc, #72]	@ (80008ac <HAL_MspInit+0x5c>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <HAL_MspInit+0x5c>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	4a0e      	ldr	r2, [pc, #56]	@ (80008ac <HAL_MspInit+0x5c>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000878:	61d3      	str	r3, [r2, #28]
 800087a:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <HAL_MspInit+0x5c>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000886:	4b0a      	ldr	r3, [pc, #40]	@ (80008b0 <HAL_MspInit+0x60>)
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	4a04      	ldr	r2, [pc, #16]	@ (80008b0 <HAL_MspInit+0x60>)
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a2:	bf00      	nop
 80008a4:	3714      	adds	r7, #20
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40010000 	.word	0x40010000

080008b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a28      	ldr	r2, [pc, #160]	@ (8000970 <HAL_ADC_MspInit+0xbc>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d149      	bne.n	8000968 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008d4:	4b27      	ldr	r3, [pc, #156]	@ (8000974 <HAL_ADC_MspInit+0xc0>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a26      	ldr	r2, [pc, #152]	@ (8000974 <HAL_ADC_MspInit+0xc0>)
 80008da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b24      	ldr	r3, [pc, #144]	@ (8000974 <HAL_ADC_MspInit+0xc0>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ec:	4b21      	ldr	r3, [pc, #132]	@ (8000974 <HAL_ADC_MspInit+0xc0>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	4a20      	ldr	r2, [pc, #128]	@ (8000974 <HAL_ADC_MspInit+0xc0>)
 80008f2:	f043 0304 	orr.w	r3, r3, #4
 80008f6:	6193      	str	r3, [r2, #24]
 80008f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000974 <HAL_ADC_MspInit+0xc0>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f003 0304 	and.w	r3, r3, #4
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000904:	2303      	movs	r3, #3
 8000906:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000908:	2303      	movs	r3, #3
 800090a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	4619      	mov	r1, r3
 8000912:	4819      	ldr	r0, [pc, #100]	@ (8000978 <HAL_ADC_MspInit+0xc4>)
 8000914:	f001 f9a0 	bl	8001c58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000918:	4b18      	ldr	r3, [pc, #96]	@ (800097c <HAL_ADC_MspInit+0xc8>)
 800091a:	4a19      	ldr	r2, [pc, #100]	@ (8000980 <HAL_ADC_MspInit+0xcc>)
 800091c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800091e:	4b17      	ldr	r3, [pc, #92]	@ (800097c <HAL_ADC_MspInit+0xc8>)
 8000920:	2200      	movs	r2, #0
 8000922:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000924:	4b15      	ldr	r3, [pc, #84]	@ (800097c <HAL_ADC_MspInit+0xc8>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800092a:	4b14      	ldr	r3, [pc, #80]	@ (800097c <HAL_ADC_MspInit+0xc8>)
 800092c:	2280      	movs	r2, #128	@ 0x80
 800092e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000930:	4b12      	ldr	r3, [pc, #72]	@ (800097c <HAL_ADC_MspInit+0xc8>)
 8000932:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000936:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000938:	4b10      	ldr	r3, [pc, #64]	@ (800097c <HAL_ADC_MspInit+0xc8>)
 800093a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800093e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000940:	4b0e      	ldr	r3, [pc, #56]	@ (800097c <HAL_ADC_MspInit+0xc8>)
 8000942:	2220      	movs	r2, #32
 8000944:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000946:	4b0d      	ldr	r3, [pc, #52]	@ (800097c <HAL_ADC_MspInit+0xc8>)
 8000948:	2200      	movs	r2, #0
 800094a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800094c:	480b      	ldr	r0, [pc, #44]	@ (800097c <HAL_ADC_MspInit+0xc8>)
 800094e:	f000 ff6f 	bl	8001830 <HAL_DMA_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000958:	f7ff ff74 	bl	8000844 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a07      	ldr	r2, [pc, #28]	@ (800097c <HAL_ADC_MspInit+0xc8>)
 8000960:	621a      	str	r2, [r3, #32]
 8000962:	4a06      	ldr	r2, [pc, #24]	@ (800097c <HAL_ADC_MspInit+0xc8>)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000968:	bf00      	nop
 800096a:	3720      	adds	r7, #32
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40012400 	.word	0x40012400
 8000974:	40021000 	.word	0x40021000
 8000978:	40010800 	.word	0x40010800
 800097c:	200003f4 	.word	0x200003f4
 8000980:	40020008 	.word	0x40020008

08000984 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	@ 0x28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 0318 	add.w	r3, r7, #24
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a3b      	ldr	r2, [pc, #236]	@ (8000a8c <HAL_UART_MspInit+0x108>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d13a      	bne.n	8000a1a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009a4:	4b3a      	ldr	r3, [pc, #232]	@ (8000a90 <HAL_UART_MspInit+0x10c>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a39      	ldr	r2, [pc, #228]	@ (8000a90 <HAL_UART_MspInit+0x10c>)
 80009aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b37      	ldr	r3, [pc, #220]	@ (8000a90 <HAL_UART_MspInit+0x10c>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009bc:	4b34      	ldr	r3, [pc, #208]	@ (8000a90 <HAL_UART_MspInit+0x10c>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	4a33      	ldr	r2, [pc, #204]	@ (8000a90 <HAL_UART_MspInit+0x10c>)
 80009c2:	f043 0304 	orr.w	r3, r3, #4
 80009c6:	6193      	str	r3, [r2, #24]
 80009c8:	4b31      	ldr	r3, [pc, #196]	@ (8000a90 <HAL_UART_MspInit+0x10c>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f003 0304 	and.w	r3, r3, #4
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009de:	2303      	movs	r3, #3
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f107 0318 	add.w	r3, r7, #24
 80009e6:	4619      	mov	r1, r3
 80009e8:	482a      	ldr	r0, [pc, #168]	@ (8000a94 <HAL_UART_MspInit+0x110>)
 80009ea:	f001 f935 	bl	8001c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fc:	f107 0318 	add.w	r3, r7, #24
 8000a00:	4619      	mov	r1, r3
 8000a02:	4824      	ldr	r0, [pc, #144]	@ (8000a94 <HAL_UART_MspInit+0x110>)
 8000a04:	f001 f928 	bl	8001c58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	2025      	movs	r0, #37	@ 0x25
 8000a0e:	f000 fed8 	bl	80017c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a12:	2025      	movs	r0, #37	@ 0x25
 8000a14:	f000 fef1 	bl	80017fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a18:	e034      	b.n	8000a84 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a1e      	ldr	r2, [pc, #120]	@ (8000a98 <HAL_UART_MspInit+0x114>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d12f      	bne.n	8000a84 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a24:	4b1a      	ldr	r3, [pc, #104]	@ (8000a90 <HAL_UART_MspInit+0x10c>)
 8000a26:	69db      	ldr	r3, [r3, #28]
 8000a28:	4a19      	ldr	r2, [pc, #100]	@ (8000a90 <HAL_UART_MspInit+0x10c>)
 8000a2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a2e:	61d3      	str	r3, [r2, #28]
 8000a30:	4b17      	ldr	r3, [pc, #92]	@ (8000a90 <HAL_UART_MspInit+0x10c>)
 8000a32:	69db      	ldr	r3, [r3, #28]
 8000a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3c:	4b14      	ldr	r3, [pc, #80]	@ (8000a90 <HAL_UART_MspInit+0x10c>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	4a13      	ldr	r2, [pc, #76]	@ (8000a90 <HAL_UART_MspInit+0x10c>)
 8000a42:	f043 0304 	orr.w	r3, r3, #4
 8000a46:	6193      	str	r3, [r2, #24]
 8000a48:	4b11      	ldr	r3, [pc, #68]	@ (8000a90 <HAL_UART_MspInit+0x10c>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	f003 0304 	and.w	r3, r3, #4
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a54:	2304      	movs	r3, #4
 8000a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a60:	f107 0318 	add.w	r3, r7, #24
 8000a64:	4619      	mov	r1, r3
 8000a66:	480b      	ldr	r0, [pc, #44]	@ (8000a94 <HAL_UART_MspInit+0x110>)
 8000a68:	f001 f8f6 	bl	8001c58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a6c:	2308      	movs	r3, #8
 8000a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a78:	f107 0318 	add.w	r3, r7, #24
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4805      	ldr	r0, [pc, #20]	@ (8000a94 <HAL_UART_MspInit+0x110>)
 8000a80:	f001 f8ea 	bl	8001c58 <HAL_GPIO_Init>
}
 8000a84:	bf00      	nop
 8000a86:	3728      	adds	r7, #40	@ 0x28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40013800 	.word	0x40013800
 8000a90:	40021000 	.word	0x40021000
 8000a94:	40010800 	.word	0x40010800
 8000a98:	40004400 	.word	0x40004400

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <NMI_Handler+0x4>

08000aa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr

08000ad0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aec:	f000 f94a 	bl	8000d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000af8:	4802      	ldr	r0, [pc, #8]	@ (8000b04 <DMA1_Channel1_IRQHandler+0x10>)
 8000afa:	f000 ffa7 	bl	8001a4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200003f4 	.word	0x200003f4

08000b08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&uart1.huart);
 8000b0c:	4802      	ldr	r0, [pc, #8]	@ (8000b18 <USART1_IRQHandler+0x10>)
 8000b0e:	f002 f8cd 	bl	8002cac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	2000004c 	.word	0x2000004c

08000b1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return 1;
 8000b20:	2301      	movs	r3, #1
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr

08000b2a <_kill>:

int _kill(int pid, int sig)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
 8000b32:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b34:	f003 fb14 	bl	8004160 <__errno>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2216      	movs	r2, #22
 8000b3c:	601a      	str	r2, [r3, #0]
  return -1;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <_exit>:

void _exit (int status)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b52:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff ffe7 	bl	8000b2a <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <_exit+0x12>

08000b60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	e00a      	b.n	8000b88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b72:	f3af 8000 	nop.w
 8000b76:	4601      	mov	r1, r0
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	1c5a      	adds	r2, r3, #1
 8000b7c:	60ba      	str	r2, [r7, #8]
 8000b7e:	b2ca      	uxtb	r2, r1
 8000b80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	3301      	adds	r3, #1
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	697a      	ldr	r2, [r7, #20]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	dbf0      	blt.n	8000b72 <_read+0x12>
  }

  return len;
 8000b90:	687b      	ldr	r3, [r7, #4]
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b086      	sub	sp, #24
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	60f8      	str	r0, [r7, #12]
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
 8000baa:	e009      	b.n	8000bc0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	1c5a      	adds	r2, r3, #1
 8000bb0:	60ba      	str	r2, [r7, #8]
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	697a      	ldr	r2, [r7, #20]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	dbf1      	blt.n	8000bac <_write+0x12>
  }
  return len;
 8000bc8:	687b      	ldr	r3, [r7, #4]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <_close>:

int _close(int file)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	b083      	sub	sp, #12
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr

08000be8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bf8:	605a      	str	r2, [r3, #4]
  return 0;
 8000bfa:	2300      	movs	r3, #0
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr

08000c06 <_isatty>:

int _isatty(int file)
{
 8000c06:	b480      	push	{r7}
 8000c08:	b083      	sub	sp, #12
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c0e:	2301      	movs	r3, #1
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr

08000c1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b085      	sub	sp, #20
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	60f8      	str	r0, [r7, #12]
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c26:	2300      	movs	r3, #0
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr
	...

08000c34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c3c:	4a14      	ldr	r2, [pc, #80]	@ (8000c90 <_sbrk+0x5c>)
 8000c3e:	4b15      	ldr	r3, [pc, #84]	@ (8000c94 <_sbrk+0x60>)
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c48:	4b13      	ldr	r3, [pc, #76]	@ (8000c98 <_sbrk+0x64>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d102      	bne.n	8000c56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c50:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <_sbrk+0x64>)
 8000c52:	4a12      	ldr	r2, [pc, #72]	@ (8000c9c <_sbrk+0x68>)
 8000c54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c56:	4b10      	ldr	r3, [pc, #64]	@ (8000c98 <_sbrk+0x64>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d207      	bcs.n	8000c74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c64:	f003 fa7c 	bl	8004160 <__errno>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c72:	e009      	b.n	8000c88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c74:	4b08      	ldr	r3, [pc, #32]	@ (8000c98 <_sbrk+0x64>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c7a:	4b07      	ldr	r3, [pc, #28]	@ (8000c98 <_sbrk+0x64>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	4a05      	ldr	r2, [pc, #20]	@ (8000c98 <_sbrk+0x64>)
 8000c84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c86:	68fb      	ldr	r3, [r7, #12]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3718      	adds	r7, #24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20005000 	.word	0x20005000
 8000c94:	00000400 	.word	0x00000400
 8000c98:	200004c8 	.word	0x200004c8
 8000c9c:	20000620 	.word	0x20000620

08000ca0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr

08000cac <Reset_Handler>:
Reset_Handler:

/* Call the clock system initialization function.*/


    bl  SystemInit
 8000cac:	f7ff fff8 	bl	8000ca0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb0:	480b      	ldr	r0, [pc, #44]	@ (8000ce0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cb2:	490c      	ldr	r1, [pc, #48]	@ (8000ce4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cb4:	4a0c      	ldr	r2, [pc, #48]	@ (8000ce8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb8:	e002      	b.n	8000cc0 <LoopCopyDataInit>

08000cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cbe:	3304      	adds	r3, #4

08000cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc4:	d3f9      	bcc.n	8000cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc6:	4a09      	ldr	r2, [pc, #36]	@ (8000cec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cc8:	4c09      	ldr	r4, [pc, #36]	@ (8000cf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ccc:	e001      	b.n	8000cd2 <LoopFillZerobss>

08000cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd0:	3204      	adds	r2, #4

08000cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd4:	d3fb      	bcc.n	8000cce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cd6:	f003 fa49 	bl	800416c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cda:	f7ff fc4d 	bl	8000578 <main>
  bx lr
 8000cde:	4770      	bx	lr
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8000ce8:	0800556c 	.word	0x0800556c
  ldr r2, =_sbss
 8000cec:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8000cf0:	20000620 	.word	0x20000620

08000cf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC1_2_IRQHandler>
	...

08000cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cfc:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <HAL_Init+0x28>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a07      	ldr	r2, [pc, #28]	@ (8000d20 <HAL_Init+0x28>)
 8000d02:	f043 0310 	orr.w	r3, r3, #16
 8000d06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d08:	2003      	movs	r0, #3
 8000d0a:	f000 fd4f 	bl	80017ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d0e:	200f      	movs	r0, #15
 8000d10:	f000 f808 	bl	8000d24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d14:	f7ff fd9c 	bl	8000850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40022000 	.word	0x40022000

08000d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d2c:	4b12      	ldr	r3, [pc, #72]	@ (8000d78 <HAL_InitTick+0x54>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4b12      	ldr	r3, [pc, #72]	@ (8000d7c <HAL_InitTick+0x58>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	4619      	mov	r1, r3
 8000d36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 fd67 	bl	8001816 <HAL_SYSTICK_Config>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e00e      	b.n	8000d70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2b0f      	cmp	r3, #15
 8000d56:	d80a      	bhi.n	8000d6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d60:	f000 fd2f 	bl	80017c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d64:	4a06      	ldr	r2, [pc, #24]	@ (8000d80 <HAL_InitTick+0x5c>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	e000      	b.n	8000d70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000040 	.word	0x20000040
 8000d7c:	20000048 	.word	0x20000048
 8000d80:	20000044 	.word	0x20000044

08000d84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d88:	4b05      	ldr	r3, [pc, #20]	@ (8000da0 <HAL_IncTick+0x1c>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b05      	ldr	r3, [pc, #20]	@ (8000da4 <HAL_IncTick+0x20>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4413      	add	r3, r2
 8000d94:	4a03      	ldr	r2, [pc, #12]	@ (8000da4 <HAL_IncTick+0x20>)
 8000d96:	6013      	str	r3, [r2, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr
 8000da0:	20000048 	.word	0x20000048
 8000da4:	200004cc 	.word	0x200004cc

08000da8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dac:	4b02      	ldr	r3, [pc, #8]	@ (8000db8 <HAL_GetTick+0x10>)
 8000dae:	681b      	ldr	r3, [r3, #0]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr
 8000db8:	200004cc 	.word	0x200004cc

08000dbc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d101      	bne.n	8000dde <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e0be      	b.n	8000f5c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d109      	bne.n	8000e00 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2200      	movs	r2, #0
 8000df0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff fd5a 	bl	80008b4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f000 fbc5 	bl	8001590 <ADC_ConversionStop_Disable>
 8000e06:	4603      	mov	r3, r0
 8000e08:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e0e:	f003 0310 	and.w	r3, r3, #16
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f040 8099 	bne.w	8000f4a <HAL_ADC_Init+0x18e>
 8000e18:	7dfb      	ldrb	r3, [r7, #23]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f040 8095 	bne.w	8000f4a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e24:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000e28:	f023 0302 	bic.w	r3, r3, #2
 8000e2c:	f043 0202 	orr.w	r2, r3, #2
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e3c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	7b1b      	ldrb	r3, [r3, #12]
 8000e42:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e44:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e54:	d003      	beq.n	8000e5e <HAL_ADC_Init+0xa2>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d102      	bne.n	8000e64 <HAL_ADC_Init+0xa8>
 8000e5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e62:	e000      	b.n	8000e66 <HAL_ADC_Init+0xaa>
 8000e64:	2300      	movs	r3, #0
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	7d1b      	ldrb	r3, [r3, #20]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d119      	bne.n	8000ea8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	7b1b      	ldrb	r3, [r3, #12]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d109      	bne.n	8000e90 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	3b01      	subs	r3, #1
 8000e82:	035a      	lsls	r2, r3, #13
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	e00b      	b.n	8000ea8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e94:	f043 0220 	orr.w	r2, r3, #32
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ea0:	f043 0201 	orr.w	r2, r3, #1
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	689a      	ldr	r2, [r3, #8]
 8000ec2:	4b28      	ldr	r3, [pc, #160]	@ (8000f64 <HAL_ADC_Init+0x1a8>)
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	6812      	ldr	r2, [r2, #0]
 8000eca:	68b9      	ldr	r1, [r7, #8]
 8000ecc:	430b      	orrs	r3, r1
 8000ece:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ed8:	d003      	beq.n	8000ee2 <HAL_ADC_Init+0x126>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d104      	bne.n	8000eec <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	691b      	ldr	r3, [r3, #16]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	051b      	lsls	r3, r3, #20
 8000eea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ef2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	430a      	orrs	r2, r1
 8000efe:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	689a      	ldr	r2, [r3, #8]
 8000f06:	4b18      	ldr	r3, [pc, #96]	@ (8000f68 <HAL_ADC_Init+0x1ac>)
 8000f08:	4013      	ands	r3, r2
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d10b      	bne.n	8000f28 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f1a:	f023 0303 	bic.w	r3, r3, #3
 8000f1e:	f043 0201 	orr.w	r2, r3, #1
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f26:	e018      	b.n	8000f5a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f2c:	f023 0312 	bic.w	r3, r3, #18
 8000f30:	f043 0210 	orr.w	r2, r3, #16
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f3c:	f043 0201 	orr.w	r2, r3, #1
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f48:	e007      	b.n	8000f5a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f4e:	f043 0210 	orr.w	r2, r3, #16
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	ffe1f7fd 	.word	0xffe1f7fd
 8000f68:	ff1f0efe 	.word	0xff1f0efe

08000f6c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d101      	bne.n	8000f86 <HAL_ADC_Start+0x1a>
 8000f82:	2302      	movs	r3, #2
 8000f84:	e098      	b.n	80010b8 <HAL_ADC_Start+0x14c>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f000 faa4 	bl	80014dc <ADC_Enable>
 8000f94:	4603      	mov	r3, r0
 8000f96:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f040 8087 	bne.w	80010ae <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000fa8:	f023 0301 	bic.w	r3, r3, #1
 8000fac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a41      	ldr	r2, [pc, #260]	@ (80010c0 <HAL_ADC_Start+0x154>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d105      	bne.n	8000fca <HAL_ADC_Start+0x5e>
 8000fbe:	4b41      	ldr	r3, [pc, #260]	@ (80010c4 <HAL_ADC_Start+0x158>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d115      	bne.n	8000ff6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fce:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d026      	beq.n	8001032 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fe8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000fec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ff4:	e01d      	b.n	8001032 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ffa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a2f      	ldr	r2, [pc, #188]	@ (80010c4 <HAL_ADC_Start+0x158>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d004      	beq.n	8001016 <HAL_ADC_Start+0xaa>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a2b      	ldr	r2, [pc, #172]	@ (80010c0 <HAL_ADC_Start+0x154>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d10d      	bne.n	8001032 <HAL_ADC_Start+0xc6>
 8001016:	4b2b      	ldr	r3, [pc, #172]	@ (80010c4 <HAL_ADC_Start+0x158>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800101e:	2b00      	cmp	r3, #0
 8001020:	d007      	beq.n	8001032 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001026:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800102a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001036:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d006      	beq.n	800104c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001042:	f023 0206 	bic.w	r2, r3, #6
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	62da      	str	r2, [r3, #44]	@ 0x2c
 800104a:	e002      	b.n	8001052 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f06f 0202 	mvn.w	r2, #2
 8001062:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800106e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001072:	d113      	bne.n	800109c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001078:	4a11      	ldr	r2, [pc, #68]	@ (80010c0 <HAL_ADC_Start+0x154>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d105      	bne.n	800108a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800107e:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <HAL_ADC_Start+0x158>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001086:	2b00      	cmp	r3, #0
 8001088:	d108      	bne.n	800109c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	e00c      	b.n	80010b6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	e003      	b.n	80010b6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40012800 	.word	0x40012800
 80010c4:	40012400 	.word	0x40012400

080010c8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b087      	sub	sp, #28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80010de:	f7ff fe63 	bl	8000da8 <HAL_GetTick>
 80010e2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d00b      	beq.n	800110a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010f6:	f043 0220 	orr.w	r2, r3, #32
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e0d3      	b.n	80012b2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001114:	2b00      	cmp	r3, #0
 8001116:	d131      	bne.n	800117c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800111e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001122:	2b00      	cmp	r3, #0
 8001124:	d12a      	bne.n	800117c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001126:	e021      	b.n	800116c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800112e:	d01d      	beq.n	800116c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d007      	beq.n	8001146 <HAL_ADC_PollForConversion+0x7e>
 8001136:	f7ff fe37 	bl	8000da8 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	429a      	cmp	r2, r3
 8001144:	d212      	bcs.n	800116c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	2b00      	cmp	r3, #0
 8001152:	d10b      	bne.n	800116c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001158:	f043 0204 	orr.w	r2, r3, #4
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e0a2      	b.n	80012b2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0d6      	beq.n	8001128 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800117a:	e070      	b.n	800125e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800117c:	4b4f      	ldr	r3, [pc, #316]	@ (80012bc <HAL_ADC_PollForConversion+0x1f4>)
 800117e:	681c      	ldr	r4, [r3, #0]
 8001180:	2002      	movs	r0, #2
 8001182:	f001 fbe5 	bl	8002950 <HAL_RCCEx_GetPeriphCLKFreq>
 8001186:	4603      	mov	r3, r0
 8001188:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6919      	ldr	r1, [r3, #16]
 8001192:	4b4b      	ldr	r3, [pc, #300]	@ (80012c0 <HAL_ADC_PollForConversion+0x1f8>)
 8001194:	400b      	ands	r3, r1
 8001196:	2b00      	cmp	r3, #0
 8001198:	d118      	bne.n	80011cc <HAL_ADC_PollForConversion+0x104>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	68d9      	ldr	r1, [r3, #12]
 80011a0:	4b48      	ldr	r3, [pc, #288]	@ (80012c4 <HAL_ADC_PollForConversion+0x1fc>)
 80011a2:	400b      	ands	r3, r1
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d111      	bne.n	80011cc <HAL_ADC_PollForConversion+0x104>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	6919      	ldr	r1, [r3, #16]
 80011ae:	4b46      	ldr	r3, [pc, #280]	@ (80012c8 <HAL_ADC_PollForConversion+0x200>)
 80011b0:	400b      	ands	r3, r1
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d108      	bne.n	80011c8 <HAL_ADC_PollForConversion+0x100>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	68d9      	ldr	r1, [r3, #12]
 80011bc:	4b43      	ldr	r3, [pc, #268]	@ (80012cc <HAL_ADC_PollForConversion+0x204>)
 80011be:	400b      	ands	r3, r1
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <HAL_ADC_PollForConversion+0x100>
 80011c4:	2314      	movs	r3, #20
 80011c6:	e020      	b.n	800120a <HAL_ADC_PollForConversion+0x142>
 80011c8:	2329      	movs	r3, #41	@ 0x29
 80011ca:	e01e      	b.n	800120a <HAL_ADC_PollForConversion+0x142>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6919      	ldr	r1, [r3, #16]
 80011d2:	4b3d      	ldr	r3, [pc, #244]	@ (80012c8 <HAL_ADC_PollForConversion+0x200>)
 80011d4:	400b      	ands	r3, r1
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d106      	bne.n	80011e8 <HAL_ADC_PollForConversion+0x120>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	68d9      	ldr	r1, [r3, #12]
 80011e0:	4b3a      	ldr	r3, [pc, #232]	@ (80012cc <HAL_ADC_PollForConversion+0x204>)
 80011e2:	400b      	ands	r3, r1
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d00d      	beq.n	8001204 <HAL_ADC_PollForConversion+0x13c>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6919      	ldr	r1, [r3, #16]
 80011ee:	4b38      	ldr	r3, [pc, #224]	@ (80012d0 <HAL_ADC_PollForConversion+0x208>)
 80011f0:	400b      	ands	r3, r1
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d108      	bne.n	8001208 <HAL_ADC_PollForConversion+0x140>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	68d9      	ldr	r1, [r3, #12]
 80011fc:	4b34      	ldr	r3, [pc, #208]	@ (80012d0 <HAL_ADC_PollForConversion+0x208>)
 80011fe:	400b      	ands	r3, r1
 8001200:	2b00      	cmp	r3, #0
 8001202:	d101      	bne.n	8001208 <HAL_ADC_PollForConversion+0x140>
 8001204:	2354      	movs	r3, #84	@ 0x54
 8001206:	e000      	b.n	800120a <HAL_ADC_PollForConversion+0x142>
 8001208:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800120a:	fb02 f303 	mul.w	r3, r2, r3
 800120e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001210:	e021      	b.n	8001256 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001218:	d01a      	beq.n	8001250 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d007      	beq.n	8001230 <HAL_ADC_PollForConversion+0x168>
 8001220:	f7ff fdc2 	bl	8000da8 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	429a      	cmp	r2, r3
 800122e:	d20f      	bcs.n	8001250 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	429a      	cmp	r2, r3
 8001236:	d90b      	bls.n	8001250 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800123c:	f043 0204 	orr.w	r2, r3, #4
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e030      	b.n	80012b2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	3301      	adds	r3, #1
 8001254:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	429a      	cmp	r2, r3
 800125c:	d8d9      	bhi.n	8001212 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f06f 0212 	mvn.w	r2, #18
 8001266:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800126c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800127e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001282:	d115      	bne.n	80012b0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001288:	2b00      	cmp	r3, #0
 800128a:	d111      	bne.n	80012b0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001290:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800129c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d105      	bne.n	80012b0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012a8:	f043 0201 	orr.w	r2, r3, #1
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	371c      	adds	r7, #28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd90      	pop	{r4, r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000040 	.word	0x20000040
 80012c0:	24924924 	.word	0x24924924
 80012c4:	00924924 	.word	0x00924924
 80012c8:	12492492 	.word	0x12492492
 80012cc:	00492492 	.word	0x00492492
 80012d0:	00249249 	.word	0x00249249

080012d4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001304:	2b01      	cmp	r3, #1
 8001306:	d101      	bne.n	800130c <HAL_ADC_ConfigChannel+0x20>
 8001308:	2302      	movs	r3, #2
 800130a:	e0dc      	b.n	80014c6 <HAL_ADC_ConfigChannel+0x1da>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2201      	movs	r2, #1
 8001310:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2b06      	cmp	r3, #6
 800131a:	d81c      	bhi.n	8001356 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	4613      	mov	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	3b05      	subs	r3, #5
 800132e:	221f      	movs	r2, #31
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	4019      	ands	r1, r3
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	6818      	ldr	r0, [r3, #0]
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	4613      	mov	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	3b05      	subs	r3, #5
 8001348:	fa00 f203 	lsl.w	r2, r0, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	430a      	orrs	r2, r1
 8001352:	635a      	str	r2, [r3, #52]	@ 0x34
 8001354:	e03c      	b.n	80013d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b0c      	cmp	r3, #12
 800135c:	d81c      	bhi.n	8001398 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	4613      	mov	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	3b23      	subs	r3, #35	@ 0x23
 8001370:	221f      	movs	r2, #31
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	4019      	ands	r1, r3
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	6818      	ldr	r0, [r3, #0]
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	4613      	mov	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	3b23      	subs	r3, #35	@ 0x23
 800138a:	fa00 f203 	lsl.w	r2, r0, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	430a      	orrs	r2, r1
 8001394:	631a      	str	r2, [r3, #48]	@ 0x30
 8001396:	e01b      	b.n	80013d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	4613      	mov	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4413      	add	r3, r2
 80013a8:	3b41      	subs	r3, #65	@ 0x41
 80013aa:	221f      	movs	r2, #31
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	4019      	ands	r1, r3
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	6818      	ldr	r0, [r3, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	3b41      	subs	r3, #65	@ 0x41
 80013c4:	fa00 f203 	lsl.w	r2, r0, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b09      	cmp	r3, #9
 80013d6:	d91c      	bls.n	8001412 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	68d9      	ldr	r1, [r3, #12]
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	4613      	mov	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	3b1e      	subs	r3, #30
 80013ea:	2207      	movs	r2, #7
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	4019      	ands	r1, r3
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	6898      	ldr	r0, [r3, #8]
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4613      	mov	r3, r2
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4413      	add	r3, r2
 8001402:	3b1e      	subs	r3, #30
 8001404:	fa00 f203 	lsl.w	r2, r0, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	430a      	orrs	r2, r1
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	e019      	b.n	8001446 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6919      	ldr	r1, [r3, #16]
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4613      	mov	r3, r2
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	4413      	add	r3, r2
 8001422:	2207      	movs	r2, #7
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	4019      	ands	r1, r3
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	6898      	ldr	r0, [r3, #8]
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4613      	mov	r3, r2
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	4413      	add	r3, r2
 800143a:	fa00 f203 	lsl.w	r2, r0, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	430a      	orrs	r2, r1
 8001444:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2b10      	cmp	r3, #16
 800144c:	d003      	beq.n	8001456 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001452:	2b11      	cmp	r3, #17
 8001454:	d132      	bne.n	80014bc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a1d      	ldr	r2, [pc, #116]	@ (80014d0 <HAL_ADC_ConfigChannel+0x1e4>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d125      	bne.n	80014ac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d126      	bne.n	80014bc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800147c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2b10      	cmp	r3, #16
 8001484:	d11a      	bne.n	80014bc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001486:	4b13      	ldr	r3, [pc, #76]	@ (80014d4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a13      	ldr	r2, [pc, #76]	@ (80014d8 <HAL_ADC_ConfigChannel+0x1ec>)
 800148c:	fba2 2303 	umull	r2, r3, r2, r3
 8001490:	0c9a      	lsrs	r2, r3, #18
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800149c:	e002      	b.n	80014a4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	3b01      	subs	r3, #1
 80014a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f9      	bne.n	800149e <HAL_ADC_ConfigChannel+0x1b2>
 80014aa:	e007      	b.n	80014bc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014b0:	f043 0220 	orr.w	r2, r3, #32
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr
 80014d0:	40012400 	.word	0x40012400
 80014d4:	20000040 	.word	0x20000040
 80014d8:	431bde83 	.word	0x431bde83

080014dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d040      	beq.n	800157c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f042 0201 	orr.w	r2, r2, #1
 8001508:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800150a:	4b1f      	ldr	r3, [pc, #124]	@ (8001588 <ADC_Enable+0xac>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a1f      	ldr	r2, [pc, #124]	@ (800158c <ADC_Enable+0xb0>)
 8001510:	fba2 2303 	umull	r2, r3, r2, r3
 8001514:	0c9b      	lsrs	r3, r3, #18
 8001516:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001518:	e002      	b.n	8001520 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	3b01      	subs	r3, #1
 800151e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f9      	bne.n	800151a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001526:	f7ff fc3f 	bl	8000da8 <HAL_GetTick>
 800152a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800152c:	e01f      	b.n	800156e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800152e:	f7ff fc3b 	bl	8000da8 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d918      	bls.n	800156e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b01      	cmp	r3, #1
 8001548:	d011      	beq.n	800156e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800154e:	f043 0210 	orr.w	r2, r3, #16
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800155a:	f043 0201 	orr.w	r2, r3, #1
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e007      	b.n	800157e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	2b01      	cmp	r3, #1
 800157a:	d1d8      	bne.n	800152e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000040 	.word	0x20000040
 800158c:	431bde83 	.word	0x431bde83

08001590 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d12e      	bne.n	8001608 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 0201 	bic.w	r2, r2, #1
 80015b8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015ba:	f7ff fbf5 	bl	8000da8 <HAL_GetTick>
 80015be:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80015c0:	e01b      	b.n	80015fa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80015c2:	f7ff fbf1 	bl	8000da8 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d914      	bls.n	80015fa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d10d      	bne.n	80015fa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e2:	f043 0210 	orr.w	r2, r3, #16
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ee:	f043 0201 	orr.w	r2, r3, #1
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e007      	b.n	800160a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b01      	cmp	r3, #1
 8001606:	d0dc      	beq.n	80015c2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001624:	4b0c      	ldr	r3, [pc, #48]	@ (8001658 <__NVIC_SetPriorityGrouping+0x44>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001630:	4013      	ands	r3, r2
 8001632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800163c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001640:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001646:	4a04      	ldr	r2, [pc, #16]	@ (8001658 <__NVIC_SetPriorityGrouping+0x44>)
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	60d3      	str	r3, [r2, #12]
}
 800164c:	bf00      	nop
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001660:	4b04      	ldr	r3, [pc, #16]	@ (8001674 <__NVIC_GetPriorityGrouping+0x18>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	0a1b      	lsrs	r3, r3, #8
 8001666:	f003 0307 	and.w	r3, r3, #7
}
 800166a:	4618      	mov	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	2b00      	cmp	r3, #0
 8001688:	db0b      	blt.n	80016a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	f003 021f 	and.w	r2, r3, #31
 8001690:	4906      	ldr	r1, [pc, #24]	@ (80016ac <__NVIC_EnableIRQ+0x34>)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	095b      	lsrs	r3, r3, #5
 8001698:	2001      	movs	r0, #1
 800169a:	fa00 f202 	lsl.w	r2, r0, r2
 800169e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr
 80016ac:	e000e100 	.word	0xe000e100

080016b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	6039      	str	r1, [r7, #0]
 80016ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	db0a      	blt.n	80016da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	490c      	ldr	r1, [pc, #48]	@ (80016fc <__NVIC_SetPriority+0x4c>)
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	0112      	lsls	r2, r2, #4
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	440b      	add	r3, r1
 80016d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d8:	e00a      	b.n	80016f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	4908      	ldr	r1, [pc, #32]	@ (8001700 <__NVIC_SetPriority+0x50>)
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	3b04      	subs	r3, #4
 80016e8:	0112      	lsls	r2, r2, #4
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	440b      	add	r3, r1
 80016ee:	761a      	strb	r2, [r3, #24]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000e100 	.word	0xe000e100
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001704:	b480      	push	{r7}
 8001706:	b089      	sub	sp, #36	@ 0x24
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f1c3 0307 	rsb	r3, r3, #7
 800171e:	2b04      	cmp	r3, #4
 8001720:	bf28      	it	cs
 8001722:	2304      	movcs	r3, #4
 8001724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3304      	adds	r3, #4
 800172a:	2b06      	cmp	r3, #6
 800172c:	d902      	bls.n	8001734 <NVIC_EncodePriority+0x30>
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3b03      	subs	r3, #3
 8001732:	e000      	b.n	8001736 <NVIC_EncodePriority+0x32>
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001738:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43da      	mvns	r2, r3
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	401a      	ands	r2, r3
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800174c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	fa01 f303 	lsl.w	r3, r1, r3
 8001756:	43d9      	mvns	r1, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800175c:	4313      	orrs	r3, r2
         );
}
 800175e:	4618      	mov	r0, r3
 8001760:	3724      	adds	r7, #36	@ 0x24
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr

08001768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3b01      	subs	r3, #1
 8001774:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001778:	d301      	bcc.n	800177e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800177a:	2301      	movs	r3, #1
 800177c:	e00f      	b.n	800179e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800177e:	4a0a      	ldr	r2, [pc, #40]	@ (80017a8 <SysTick_Config+0x40>)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3b01      	subs	r3, #1
 8001784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001786:	210f      	movs	r1, #15
 8001788:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800178c:	f7ff ff90 	bl	80016b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001790:	4b05      	ldr	r3, [pc, #20]	@ (80017a8 <SysTick_Config+0x40>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001796:	4b04      	ldr	r3, [pc, #16]	@ (80017a8 <SysTick_Config+0x40>)
 8001798:	2207      	movs	r2, #7
 800179a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	e000e010 	.word	0xe000e010

080017ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff ff2d 	bl	8001614 <__NVIC_SetPriorityGrouping>
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b086      	sub	sp, #24
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	4603      	mov	r3, r0
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
 80017ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017d4:	f7ff ff42 	bl	800165c <__NVIC_GetPriorityGrouping>
 80017d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	68b9      	ldr	r1, [r7, #8]
 80017de:	6978      	ldr	r0, [r7, #20]
 80017e0:	f7ff ff90 	bl	8001704 <NVIC_EncodePriority>
 80017e4:	4602      	mov	r2, r0
 80017e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ea:	4611      	mov	r1, r2
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff5f 	bl	80016b0 <__NVIC_SetPriority>
}
 80017f2:	bf00      	nop
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	4603      	mov	r3, r0
 8001802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ff35 	bl	8001678 <__NVIC_EnableIRQ>
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff ffa2 	bl	8001768 <SysTick_Config>
 8001824:	4603      	mov	r3, r0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e043      	b.n	80018ce <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	461a      	mov	r2, r3
 800184c:	4b22      	ldr	r3, [pc, #136]	@ (80018d8 <HAL_DMA_Init+0xa8>)
 800184e:	4413      	add	r3, r2
 8001850:	4a22      	ldr	r2, [pc, #136]	@ (80018dc <HAL_DMA_Init+0xac>)
 8001852:	fba2 2303 	umull	r2, r3, r2, r3
 8001856:	091b      	lsrs	r3, r3, #4
 8001858:	009a      	lsls	r2, r3, #2
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a1f      	ldr	r2, [pc, #124]	@ (80018e0 <HAL_DMA_Init+0xb0>)
 8001862:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2202      	movs	r2, #2
 8001868:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800187a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800187e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001888:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001894:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	bffdfff8 	.word	0xbffdfff8
 80018dc:	cccccccd 	.word	0xcccccccd
 80018e0:	40020000 	.word	0x40020000

080018e4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018ec:	2300      	movs	r3, #0
 80018ee:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d008      	beq.n	800190e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2204      	movs	r2, #4
 8001900:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e020      	b.n	8001950 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 020e 	bic.w	r2, r2, #14
 800191c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 0201 	bic.w	r2, r2, #1
 800192c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001936:	2101      	movs	r1, #1
 8001938:	fa01 f202 	lsl.w	r2, r1, r2
 800193c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800194e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr
	...

0800195c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001964:	2300      	movs	r3, #0
 8001966:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d005      	beq.n	8001980 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2204      	movs	r2, #4
 8001978:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	73fb      	strb	r3, [r7, #15]
 800197e:	e051      	b.n	8001a24 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 020e 	bic.w	r2, r2, #14
 800198e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 0201 	bic.w	r2, r2, #1
 800199e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a22      	ldr	r2, [pc, #136]	@ (8001a30 <HAL_DMA_Abort_IT+0xd4>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d029      	beq.n	80019fe <HAL_DMA_Abort_IT+0xa2>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a21      	ldr	r2, [pc, #132]	@ (8001a34 <HAL_DMA_Abort_IT+0xd8>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d022      	beq.n	80019fa <HAL_DMA_Abort_IT+0x9e>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a1f      	ldr	r2, [pc, #124]	@ (8001a38 <HAL_DMA_Abort_IT+0xdc>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d01a      	beq.n	80019f4 <HAL_DMA_Abort_IT+0x98>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a1e      	ldr	r2, [pc, #120]	@ (8001a3c <HAL_DMA_Abort_IT+0xe0>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d012      	beq.n	80019ee <HAL_DMA_Abort_IT+0x92>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001a40 <HAL_DMA_Abort_IT+0xe4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d00a      	beq.n	80019e8 <HAL_DMA_Abort_IT+0x8c>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001a44 <HAL_DMA_Abort_IT+0xe8>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d102      	bne.n	80019e2 <HAL_DMA_Abort_IT+0x86>
 80019dc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80019e0:	e00e      	b.n	8001a00 <HAL_DMA_Abort_IT+0xa4>
 80019e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019e6:	e00b      	b.n	8001a00 <HAL_DMA_Abort_IT+0xa4>
 80019e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019ec:	e008      	b.n	8001a00 <HAL_DMA_Abort_IT+0xa4>
 80019ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019f2:	e005      	b.n	8001a00 <HAL_DMA_Abort_IT+0xa4>
 80019f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019f8:	e002      	b.n	8001a00 <HAL_DMA_Abort_IT+0xa4>
 80019fa:	2310      	movs	r3, #16
 80019fc:	e000      	b.n	8001a00 <HAL_DMA_Abort_IT+0xa4>
 80019fe:	2301      	movs	r3, #1
 8001a00:	4a11      	ldr	r2, [pc, #68]	@ (8001a48 <HAL_DMA_Abort_IT+0xec>)
 8001a02:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	4798      	blx	r3
    } 
  }
  return status;
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40020008 	.word	0x40020008
 8001a34:	4002001c 	.word	0x4002001c
 8001a38:	40020030 	.word	0x40020030
 8001a3c:	40020044 	.word	0x40020044
 8001a40:	40020058 	.word	0x40020058
 8001a44:	4002006c 	.word	0x4002006c
 8001a48:	40020000 	.word	0x40020000

08001a4c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a68:	2204      	movs	r2, #4
 8001a6a:	409a      	lsls	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d04f      	beq.n	8001b14 <HAL_DMA_IRQHandler+0xc8>
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d04a      	beq.n	8001b14 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0320 	and.w	r3, r3, #32
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d107      	bne.n	8001a9c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0204 	bic.w	r2, r2, #4
 8001a9a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a66      	ldr	r2, [pc, #408]	@ (8001c3c <HAL_DMA_IRQHandler+0x1f0>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d029      	beq.n	8001afa <HAL_DMA_IRQHandler+0xae>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a65      	ldr	r2, [pc, #404]	@ (8001c40 <HAL_DMA_IRQHandler+0x1f4>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d022      	beq.n	8001af6 <HAL_DMA_IRQHandler+0xaa>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a63      	ldr	r2, [pc, #396]	@ (8001c44 <HAL_DMA_IRQHandler+0x1f8>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d01a      	beq.n	8001af0 <HAL_DMA_IRQHandler+0xa4>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a62      	ldr	r2, [pc, #392]	@ (8001c48 <HAL_DMA_IRQHandler+0x1fc>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d012      	beq.n	8001aea <HAL_DMA_IRQHandler+0x9e>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a60      	ldr	r2, [pc, #384]	@ (8001c4c <HAL_DMA_IRQHandler+0x200>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d00a      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x98>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a5f      	ldr	r2, [pc, #380]	@ (8001c50 <HAL_DMA_IRQHandler+0x204>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d102      	bne.n	8001ade <HAL_DMA_IRQHandler+0x92>
 8001ad8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001adc:	e00e      	b.n	8001afc <HAL_DMA_IRQHandler+0xb0>
 8001ade:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001ae2:	e00b      	b.n	8001afc <HAL_DMA_IRQHandler+0xb0>
 8001ae4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001ae8:	e008      	b.n	8001afc <HAL_DMA_IRQHandler+0xb0>
 8001aea:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001aee:	e005      	b.n	8001afc <HAL_DMA_IRQHandler+0xb0>
 8001af0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001af4:	e002      	b.n	8001afc <HAL_DMA_IRQHandler+0xb0>
 8001af6:	2340      	movs	r3, #64	@ 0x40
 8001af8:	e000      	b.n	8001afc <HAL_DMA_IRQHandler+0xb0>
 8001afa:	2304      	movs	r3, #4
 8001afc:	4a55      	ldr	r2, [pc, #340]	@ (8001c54 <HAL_DMA_IRQHandler+0x208>)
 8001afe:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 8094 	beq.w	8001c32 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001b12:	e08e      	b.n	8001c32 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b18:	2202      	movs	r2, #2
 8001b1a:	409a      	lsls	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d056      	beq.n	8001bd2 <HAL_DMA_IRQHandler+0x186>
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d051      	beq.n	8001bd2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0320 	and.w	r3, r3, #32
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d10b      	bne.n	8001b54 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f022 020a 	bic.w	r2, r2, #10
 8001b4a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a38      	ldr	r2, [pc, #224]	@ (8001c3c <HAL_DMA_IRQHandler+0x1f0>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d029      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0x166>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a37      	ldr	r2, [pc, #220]	@ (8001c40 <HAL_DMA_IRQHandler+0x1f4>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d022      	beq.n	8001bae <HAL_DMA_IRQHandler+0x162>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a35      	ldr	r2, [pc, #212]	@ (8001c44 <HAL_DMA_IRQHandler+0x1f8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d01a      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0x15c>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a34      	ldr	r2, [pc, #208]	@ (8001c48 <HAL_DMA_IRQHandler+0x1fc>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d012      	beq.n	8001ba2 <HAL_DMA_IRQHandler+0x156>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a32      	ldr	r2, [pc, #200]	@ (8001c4c <HAL_DMA_IRQHandler+0x200>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d00a      	beq.n	8001b9c <HAL_DMA_IRQHandler+0x150>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a31      	ldr	r2, [pc, #196]	@ (8001c50 <HAL_DMA_IRQHandler+0x204>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d102      	bne.n	8001b96 <HAL_DMA_IRQHandler+0x14a>
 8001b90:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001b94:	e00e      	b.n	8001bb4 <HAL_DMA_IRQHandler+0x168>
 8001b96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b9a:	e00b      	b.n	8001bb4 <HAL_DMA_IRQHandler+0x168>
 8001b9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ba0:	e008      	b.n	8001bb4 <HAL_DMA_IRQHandler+0x168>
 8001ba2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ba6:	e005      	b.n	8001bb4 <HAL_DMA_IRQHandler+0x168>
 8001ba8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bac:	e002      	b.n	8001bb4 <HAL_DMA_IRQHandler+0x168>
 8001bae:	2320      	movs	r3, #32
 8001bb0:	e000      	b.n	8001bb4 <HAL_DMA_IRQHandler+0x168>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	4a27      	ldr	r2, [pc, #156]	@ (8001c54 <HAL_DMA_IRQHandler+0x208>)
 8001bb6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d034      	beq.n	8001c32 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001bd0:	e02f      	b.n	8001c32 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	2208      	movs	r2, #8
 8001bd8:	409a      	lsls	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d028      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x1e8>
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	f003 0308 	and.w	r3, r3, #8
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d023      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 020e 	bic.w	r2, r2, #14
 8001bfa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c04:	2101      	movs	r1, #1
 8001c06:	fa01 f202 	lsl.w	r2, r1, r2
 8001c0a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d004      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	4798      	blx	r3
    }
  }
  return;
 8001c32:	bf00      	nop
 8001c34:	bf00      	nop
}
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40020008 	.word	0x40020008
 8001c40:	4002001c 	.word	0x4002001c
 8001c44:	40020030 	.word	0x40020030
 8001c48:	40020044 	.word	0x40020044
 8001c4c:	40020058 	.word	0x40020058
 8001c50:	4002006c 	.word	0x4002006c
 8001c54:	40020000 	.word	0x40020000

08001c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b08b      	sub	sp, #44	@ 0x2c
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c62:	2300      	movs	r3, #0
 8001c64:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c66:	2300      	movs	r3, #0
 8001c68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c6a:	e169      	b.n	8001f40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	69fa      	ldr	r2, [r7, #28]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	f040 8158 	bne.w	8001f3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	4a9a      	ldr	r2, [pc, #616]	@ (8001ef8 <HAL_GPIO_Init+0x2a0>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d05e      	beq.n	8001d52 <HAL_GPIO_Init+0xfa>
 8001c94:	4a98      	ldr	r2, [pc, #608]	@ (8001ef8 <HAL_GPIO_Init+0x2a0>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d875      	bhi.n	8001d86 <HAL_GPIO_Init+0x12e>
 8001c9a:	4a98      	ldr	r2, [pc, #608]	@ (8001efc <HAL_GPIO_Init+0x2a4>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d058      	beq.n	8001d52 <HAL_GPIO_Init+0xfa>
 8001ca0:	4a96      	ldr	r2, [pc, #600]	@ (8001efc <HAL_GPIO_Init+0x2a4>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d86f      	bhi.n	8001d86 <HAL_GPIO_Init+0x12e>
 8001ca6:	4a96      	ldr	r2, [pc, #600]	@ (8001f00 <HAL_GPIO_Init+0x2a8>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d052      	beq.n	8001d52 <HAL_GPIO_Init+0xfa>
 8001cac:	4a94      	ldr	r2, [pc, #592]	@ (8001f00 <HAL_GPIO_Init+0x2a8>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d869      	bhi.n	8001d86 <HAL_GPIO_Init+0x12e>
 8001cb2:	4a94      	ldr	r2, [pc, #592]	@ (8001f04 <HAL_GPIO_Init+0x2ac>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d04c      	beq.n	8001d52 <HAL_GPIO_Init+0xfa>
 8001cb8:	4a92      	ldr	r2, [pc, #584]	@ (8001f04 <HAL_GPIO_Init+0x2ac>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d863      	bhi.n	8001d86 <HAL_GPIO_Init+0x12e>
 8001cbe:	4a92      	ldr	r2, [pc, #584]	@ (8001f08 <HAL_GPIO_Init+0x2b0>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d046      	beq.n	8001d52 <HAL_GPIO_Init+0xfa>
 8001cc4:	4a90      	ldr	r2, [pc, #576]	@ (8001f08 <HAL_GPIO_Init+0x2b0>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d85d      	bhi.n	8001d86 <HAL_GPIO_Init+0x12e>
 8001cca:	2b12      	cmp	r3, #18
 8001ccc:	d82a      	bhi.n	8001d24 <HAL_GPIO_Init+0xcc>
 8001cce:	2b12      	cmp	r3, #18
 8001cd0:	d859      	bhi.n	8001d86 <HAL_GPIO_Init+0x12e>
 8001cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8001cd8 <HAL_GPIO_Init+0x80>)
 8001cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd8:	08001d53 	.word	0x08001d53
 8001cdc:	08001d2d 	.word	0x08001d2d
 8001ce0:	08001d3f 	.word	0x08001d3f
 8001ce4:	08001d81 	.word	0x08001d81
 8001ce8:	08001d87 	.word	0x08001d87
 8001cec:	08001d87 	.word	0x08001d87
 8001cf0:	08001d87 	.word	0x08001d87
 8001cf4:	08001d87 	.word	0x08001d87
 8001cf8:	08001d87 	.word	0x08001d87
 8001cfc:	08001d87 	.word	0x08001d87
 8001d00:	08001d87 	.word	0x08001d87
 8001d04:	08001d87 	.word	0x08001d87
 8001d08:	08001d87 	.word	0x08001d87
 8001d0c:	08001d87 	.word	0x08001d87
 8001d10:	08001d87 	.word	0x08001d87
 8001d14:	08001d87 	.word	0x08001d87
 8001d18:	08001d87 	.word	0x08001d87
 8001d1c:	08001d35 	.word	0x08001d35
 8001d20:	08001d49 	.word	0x08001d49
 8001d24:	4a79      	ldr	r2, [pc, #484]	@ (8001f0c <HAL_GPIO_Init+0x2b4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d013      	beq.n	8001d52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d2a:	e02c      	b.n	8001d86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	623b      	str	r3, [r7, #32]
          break;
 8001d32:	e029      	b.n	8001d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	623b      	str	r3, [r7, #32]
          break;
 8001d3c:	e024      	b.n	8001d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	3308      	adds	r3, #8
 8001d44:	623b      	str	r3, [r7, #32]
          break;
 8001d46:	e01f      	b.n	8001d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	330c      	adds	r3, #12
 8001d4e:	623b      	str	r3, [r7, #32]
          break;
 8001d50:	e01a      	b.n	8001d88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d102      	bne.n	8001d60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	623b      	str	r3, [r7, #32]
          break;
 8001d5e:	e013      	b.n	8001d88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d105      	bne.n	8001d74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d68:	2308      	movs	r3, #8
 8001d6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69fa      	ldr	r2, [r7, #28]
 8001d70:	611a      	str	r2, [r3, #16]
          break;
 8001d72:	e009      	b.n	8001d88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d74:	2308      	movs	r3, #8
 8001d76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69fa      	ldr	r2, [r7, #28]
 8001d7c:	615a      	str	r2, [r3, #20]
          break;
 8001d7e:	e003      	b.n	8001d88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d80:	2300      	movs	r3, #0
 8001d82:	623b      	str	r3, [r7, #32]
          break;
 8001d84:	e000      	b.n	8001d88 <HAL_GPIO_Init+0x130>
          break;
 8001d86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	2bff      	cmp	r3, #255	@ 0xff
 8001d8c:	d801      	bhi.n	8001d92 <HAL_GPIO_Init+0x13a>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	e001      	b.n	8001d96 <HAL_GPIO_Init+0x13e>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3304      	adds	r3, #4
 8001d96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	2bff      	cmp	r3, #255	@ 0xff
 8001d9c:	d802      	bhi.n	8001da4 <HAL_GPIO_Init+0x14c>
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	e002      	b.n	8001daa <HAL_GPIO_Init+0x152>
 8001da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da6:	3b08      	subs	r3, #8
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	210f      	movs	r1, #15
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	fa01 f303 	lsl.w	r3, r1, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	401a      	ands	r2, r3
 8001dbc:	6a39      	ldr	r1, [r7, #32]
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f000 80b1 	beq.w	8001f3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dd8:	4b4d      	ldr	r3, [pc, #308]	@ (8001f10 <HAL_GPIO_Init+0x2b8>)
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	4a4c      	ldr	r2, [pc, #304]	@ (8001f10 <HAL_GPIO_Init+0x2b8>)
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	6193      	str	r3, [r2, #24]
 8001de4:	4b4a      	ldr	r3, [pc, #296]	@ (8001f10 <HAL_GPIO_Init+0x2b8>)
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001df0:	4a48      	ldr	r2, [pc, #288]	@ (8001f14 <HAL_GPIO_Init+0x2bc>)
 8001df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df4:	089b      	lsrs	r3, r3, #2
 8001df6:	3302      	adds	r3, #2
 8001df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	220f      	movs	r2, #15
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	4013      	ands	r3, r2
 8001e12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a40      	ldr	r2, [pc, #256]	@ (8001f18 <HAL_GPIO_Init+0x2c0>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d013      	beq.n	8001e44 <HAL_GPIO_Init+0x1ec>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a3f      	ldr	r2, [pc, #252]	@ (8001f1c <HAL_GPIO_Init+0x2c4>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d00d      	beq.n	8001e40 <HAL_GPIO_Init+0x1e8>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a3e      	ldr	r2, [pc, #248]	@ (8001f20 <HAL_GPIO_Init+0x2c8>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d007      	beq.n	8001e3c <HAL_GPIO_Init+0x1e4>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a3d      	ldr	r2, [pc, #244]	@ (8001f24 <HAL_GPIO_Init+0x2cc>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d101      	bne.n	8001e38 <HAL_GPIO_Init+0x1e0>
 8001e34:	2303      	movs	r3, #3
 8001e36:	e006      	b.n	8001e46 <HAL_GPIO_Init+0x1ee>
 8001e38:	2304      	movs	r3, #4
 8001e3a:	e004      	b.n	8001e46 <HAL_GPIO_Init+0x1ee>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	e002      	b.n	8001e46 <HAL_GPIO_Init+0x1ee>
 8001e40:	2301      	movs	r3, #1
 8001e42:	e000      	b.n	8001e46 <HAL_GPIO_Init+0x1ee>
 8001e44:	2300      	movs	r3, #0
 8001e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e48:	f002 0203 	and.w	r2, r2, #3
 8001e4c:	0092      	lsls	r2, r2, #2
 8001e4e:	4093      	lsls	r3, r2
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e56:	492f      	ldr	r1, [pc, #188]	@ (8001f14 <HAL_GPIO_Init+0x2bc>)
 8001e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5a:	089b      	lsrs	r3, r3, #2
 8001e5c:	3302      	adds	r3, #2
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d006      	beq.n	8001e7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e70:	4b2d      	ldr	r3, [pc, #180]	@ (8001f28 <HAL_GPIO_Init+0x2d0>)
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	492c      	ldr	r1, [pc, #176]	@ (8001f28 <HAL_GPIO_Init+0x2d0>)
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	608b      	str	r3, [r1, #8]
 8001e7c:	e006      	b.n	8001e8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001f28 <HAL_GPIO_Init+0x2d0>)
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	4928      	ldr	r1, [pc, #160]	@ (8001f28 <HAL_GPIO_Init+0x2d0>)
 8001e88:	4013      	ands	r3, r2
 8001e8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d006      	beq.n	8001ea6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e98:	4b23      	ldr	r3, [pc, #140]	@ (8001f28 <HAL_GPIO_Init+0x2d0>)
 8001e9a:	68da      	ldr	r2, [r3, #12]
 8001e9c:	4922      	ldr	r1, [pc, #136]	@ (8001f28 <HAL_GPIO_Init+0x2d0>)
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	60cb      	str	r3, [r1, #12]
 8001ea4:	e006      	b.n	8001eb4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ea6:	4b20      	ldr	r3, [pc, #128]	@ (8001f28 <HAL_GPIO_Init+0x2d0>)
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	43db      	mvns	r3, r3
 8001eae:	491e      	ldr	r1, [pc, #120]	@ (8001f28 <HAL_GPIO_Init+0x2d0>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d006      	beq.n	8001ece <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ec0:	4b19      	ldr	r3, [pc, #100]	@ (8001f28 <HAL_GPIO_Init+0x2d0>)
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	4918      	ldr	r1, [pc, #96]	@ (8001f28 <HAL_GPIO_Init+0x2d0>)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	604b      	str	r3, [r1, #4]
 8001ecc:	e006      	b.n	8001edc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ece:	4b16      	ldr	r3, [pc, #88]	@ (8001f28 <HAL_GPIO_Init+0x2d0>)
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	4914      	ldr	r1, [pc, #80]	@ (8001f28 <HAL_GPIO_Init+0x2d0>)
 8001ed8:	4013      	ands	r3, r2
 8001eda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d021      	beq.n	8001f2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f28 <HAL_GPIO_Init+0x2d0>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	490e      	ldr	r1, [pc, #56]	@ (8001f28 <HAL_GPIO_Init+0x2d0>)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	600b      	str	r3, [r1, #0]
 8001ef4:	e021      	b.n	8001f3a <HAL_GPIO_Init+0x2e2>
 8001ef6:	bf00      	nop
 8001ef8:	10320000 	.word	0x10320000
 8001efc:	10310000 	.word	0x10310000
 8001f00:	10220000 	.word	0x10220000
 8001f04:	10210000 	.word	0x10210000
 8001f08:	10120000 	.word	0x10120000
 8001f0c:	10110000 	.word	0x10110000
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40010000 	.word	0x40010000
 8001f18:	40010800 	.word	0x40010800
 8001f1c:	40010c00 	.word	0x40010c00
 8001f20:	40011000 	.word	0x40011000
 8001f24:	40011400 	.word	0x40011400
 8001f28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f5c <HAL_GPIO_Init+0x304>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	43db      	mvns	r3, r3
 8001f34:	4909      	ldr	r1, [pc, #36]	@ (8001f5c <HAL_GPIO_Init+0x304>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f46:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f47f ae8e 	bne.w	8001c6c <HAL_GPIO_Init+0x14>
  }
}
 8001f50:	bf00      	nop
 8001f52:	bf00      	nop
 8001f54:	372c      	adds	r7, #44	@ 0x2c
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr
 8001f5c:	40010400 	.word	0x40010400

08001f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	807b      	strh	r3, [r7, #2]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f70:	787b      	ldrb	r3, [r7, #1]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f76:	887a      	ldrh	r2, [r7, #2]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f7c:	e003      	b.n	8001f86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f7e:	887b      	ldrh	r3, [r7, #2]
 8001f80:	041a      	lsls	r2, r3, #16
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	611a      	str	r2, [r3, #16]
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr

08001f90 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fa2:	887a      	ldrh	r2, [r7, #2]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	041a      	lsls	r2, r3, #16
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	43d9      	mvns	r1, r3
 8001fae:	887b      	ldrh	r3, [r7, #2]
 8001fb0:	400b      	ands	r3, r1
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	611a      	str	r2, [r3, #16]
}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr
	...

08001fc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e272      	b.n	80024bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 8087 	beq.w	80020f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fe4:	4b92      	ldr	r3, [pc, #584]	@ (8002230 <HAL_RCC_OscConfig+0x26c>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 030c 	and.w	r3, r3, #12
 8001fec:	2b04      	cmp	r3, #4
 8001fee:	d00c      	beq.n	800200a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ff0:	4b8f      	ldr	r3, [pc, #572]	@ (8002230 <HAL_RCC_OscConfig+0x26c>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 030c 	and.w	r3, r3, #12
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d112      	bne.n	8002022 <HAL_RCC_OscConfig+0x5e>
 8001ffc:	4b8c      	ldr	r3, [pc, #560]	@ (8002230 <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002004:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002008:	d10b      	bne.n	8002022 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800200a:	4b89      	ldr	r3, [pc, #548]	@ (8002230 <HAL_RCC_OscConfig+0x26c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d06c      	beq.n	80020f0 <HAL_RCC_OscConfig+0x12c>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d168      	bne.n	80020f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e24c      	b.n	80024bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800202a:	d106      	bne.n	800203a <HAL_RCC_OscConfig+0x76>
 800202c:	4b80      	ldr	r3, [pc, #512]	@ (8002230 <HAL_RCC_OscConfig+0x26c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a7f      	ldr	r2, [pc, #508]	@ (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002032:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	e02e      	b.n	8002098 <HAL_RCC_OscConfig+0xd4>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10c      	bne.n	800205c <HAL_RCC_OscConfig+0x98>
 8002042:	4b7b      	ldr	r3, [pc, #492]	@ (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a7a      	ldr	r2, [pc, #488]	@ (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002048:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	4b78      	ldr	r3, [pc, #480]	@ (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a77      	ldr	r2, [pc, #476]	@ (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002054:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	e01d      	b.n	8002098 <HAL_RCC_OscConfig+0xd4>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002064:	d10c      	bne.n	8002080 <HAL_RCC_OscConfig+0xbc>
 8002066:	4b72      	ldr	r3, [pc, #456]	@ (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a71      	ldr	r2, [pc, #452]	@ (8002230 <HAL_RCC_OscConfig+0x26c>)
 800206c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	4b6f      	ldr	r3, [pc, #444]	@ (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a6e      	ldr	r2, [pc, #440]	@ (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	e00b      	b.n	8002098 <HAL_RCC_OscConfig+0xd4>
 8002080:	4b6b      	ldr	r3, [pc, #428]	@ (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a6a      	ldr	r2, [pc, #424]	@ (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002086:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800208a:	6013      	str	r3, [r2, #0]
 800208c:	4b68      	ldr	r3, [pc, #416]	@ (8002230 <HAL_RCC_OscConfig+0x26c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a67      	ldr	r2, [pc, #412]	@ (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002092:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002096:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d013      	beq.n	80020c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a0:	f7fe fe82 	bl	8000da8 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a8:	f7fe fe7e 	bl	8000da8 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b64      	cmp	r3, #100	@ 0x64
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e200      	b.n	80024bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ba:	4b5d      	ldr	r3, [pc, #372]	@ (8002230 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0xe4>
 80020c6:	e014      	b.n	80020f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c8:	f7fe fe6e 	bl	8000da8 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d0:	f7fe fe6a 	bl	8000da8 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b64      	cmp	r3, #100	@ 0x64
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e1ec      	b.n	80024bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e2:	4b53      	ldr	r3, [pc, #332]	@ (8002230 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x10c>
 80020ee:	e000      	b.n	80020f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d063      	beq.n	80021c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020fe:	4b4c      	ldr	r3, [pc, #304]	@ (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00b      	beq.n	8002122 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800210a:	4b49      	ldr	r3, [pc, #292]	@ (8002230 <HAL_RCC_OscConfig+0x26c>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 030c 	and.w	r3, r3, #12
 8002112:	2b08      	cmp	r3, #8
 8002114:	d11c      	bne.n	8002150 <HAL_RCC_OscConfig+0x18c>
 8002116:	4b46      	ldr	r3, [pc, #280]	@ (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d116      	bne.n	8002150 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002122:	4b43      	ldr	r3, [pc, #268]	@ (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d005      	beq.n	800213a <HAL_RCC_OscConfig+0x176>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d001      	beq.n	800213a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e1c0      	b.n	80024bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213a:	4b3d      	ldr	r3, [pc, #244]	@ (8002230 <HAL_RCC_OscConfig+0x26c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4939      	ldr	r1, [pc, #228]	@ (8002230 <HAL_RCC_OscConfig+0x26c>)
 800214a:	4313      	orrs	r3, r2
 800214c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214e:	e03a      	b.n	80021c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d020      	beq.n	800219a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002158:	4b36      	ldr	r3, [pc, #216]	@ (8002234 <HAL_RCC_OscConfig+0x270>)
 800215a:	2201      	movs	r2, #1
 800215c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215e:	f7fe fe23 	bl	8000da8 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002166:	f7fe fe1f 	bl	8000da8 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e1a1      	b.n	80024bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002178:	4b2d      	ldr	r3, [pc, #180]	@ (8002230 <HAL_RCC_OscConfig+0x26c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0f0      	beq.n	8002166 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002184:	4b2a      	ldr	r3, [pc, #168]	@ (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	4927      	ldr	r1, [pc, #156]	@ (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002194:	4313      	orrs	r3, r2
 8002196:	600b      	str	r3, [r1, #0]
 8002198:	e015      	b.n	80021c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800219a:	4b26      	ldr	r3, [pc, #152]	@ (8002234 <HAL_RCC_OscConfig+0x270>)
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a0:	f7fe fe02 	bl	8000da8 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021a8:	f7fe fdfe 	bl	8000da8 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e180      	b.n	80024bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002230 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f0      	bne.n	80021a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d03a      	beq.n	8002248 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d019      	beq.n	800220e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021da:	4b17      	ldr	r3, [pc, #92]	@ (8002238 <HAL_RCC_OscConfig+0x274>)
 80021dc:	2201      	movs	r2, #1
 80021de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e0:	f7fe fde2 	bl	8000da8 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e8:	f7fe fdde 	bl	8000da8 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e160      	b.n	80024bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002230 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002206:	2001      	movs	r0, #1
 8002208:	f000 face 	bl	80027a8 <RCC_Delay>
 800220c:	e01c      	b.n	8002248 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800220e:	4b0a      	ldr	r3, [pc, #40]	@ (8002238 <HAL_RCC_OscConfig+0x274>)
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002214:	f7fe fdc8 	bl	8000da8 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800221a:	e00f      	b.n	800223c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800221c:	f7fe fdc4 	bl	8000da8 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d908      	bls.n	800223c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e146      	b.n	80024bc <HAL_RCC_OscConfig+0x4f8>
 800222e:	bf00      	nop
 8002230:	40021000 	.word	0x40021000
 8002234:	42420000 	.word	0x42420000
 8002238:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800223c:	4b92      	ldr	r3, [pc, #584]	@ (8002488 <HAL_RCC_OscConfig+0x4c4>)
 800223e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1e9      	bne.n	800221c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 80a6 	beq.w	80023a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002256:	2300      	movs	r3, #0
 8002258:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800225a:	4b8b      	ldr	r3, [pc, #556]	@ (8002488 <HAL_RCC_OscConfig+0x4c4>)
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10d      	bne.n	8002282 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002266:	4b88      	ldr	r3, [pc, #544]	@ (8002488 <HAL_RCC_OscConfig+0x4c4>)
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	4a87      	ldr	r2, [pc, #540]	@ (8002488 <HAL_RCC_OscConfig+0x4c4>)
 800226c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002270:	61d3      	str	r3, [r2, #28]
 8002272:	4b85      	ldr	r3, [pc, #532]	@ (8002488 <HAL_RCC_OscConfig+0x4c4>)
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800227e:	2301      	movs	r3, #1
 8002280:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002282:	4b82      	ldr	r3, [pc, #520]	@ (800248c <HAL_RCC_OscConfig+0x4c8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800228a:	2b00      	cmp	r3, #0
 800228c:	d118      	bne.n	80022c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800228e:	4b7f      	ldr	r3, [pc, #508]	@ (800248c <HAL_RCC_OscConfig+0x4c8>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a7e      	ldr	r2, [pc, #504]	@ (800248c <HAL_RCC_OscConfig+0x4c8>)
 8002294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800229a:	f7fe fd85 	bl	8000da8 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a2:	f7fe fd81 	bl	8000da8 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b64      	cmp	r3, #100	@ 0x64
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e103      	b.n	80024bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b4:	4b75      	ldr	r3, [pc, #468]	@ (800248c <HAL_RCC_OscConfig+0x4c8>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0f0      	beq.n	80022a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d106      	bne.n	80022d6 <HAL_RCC_OscConfig+0x312>
 80022c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002488 <HAL_RCC_OscConfig+0x4c4>)
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	4a6e      	ldr	r2, [pc, #440]	@ (8002488 <HAL_RCC_OscConfig+0x4c4>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	6213      	str	r3, [r2, #32]
 80022d4:	e02d      	b.n	8002332 <HAL_RCC_OscConfig+0x36e>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10c      	bne.n	80022f8 <HAL_RCC_OscConfig+0x334>
 80022de:	4b6a      	ldr	r3, [pc, #424]	@ (8002488 <HAL_RCC_OscConfig+0x4c4>)
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	4a69      	ldr	r2, [pc, #420]	@ (8002488 <HAL_RCC_OscConfig+0x4c4>)
 80022e4:	f023 0301 	bic.w	r3, r3, #1
 80022e8:	6213      	str	r3, [r2, #32]
 80022ea:	4b67      	ldr	r3, [pc, #412]	@ (8002488 <HAL_RCC_OscConfig+0x4c4>)
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	4a66      	ldr	r2, [pc, #408]	@ (8002488 <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	f023 0304 	bic.w	r3, r3, #4
 80022f4:	6213      	str	r3, [r2, #32]
 80022f6:	e01c      	b.n	8002332 <HAL_RCC_OscConfig+0x36e>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	2b05      	cmp	r3, #5
 80022fe:	d10c      	bne.n	800231a <HAL_RCC_OscConfig+0x356>
 8002300:	4b61      	ldr	r3, [pc, #388]	@ (8002488 <HAL_RCC_OscConfig+0x4c4>)
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	4a60      	ldr	r2, [pc, #384]	@ (8002488 <HAL_RCC_OscConfig+0x4c4>)
 8002306:	f043 0304 	orr.w	r3, r3, #4
 800230a:	6213      	str	r3, [r2, #32]
 800230c:	4b5e      	ldr	r3, [pc, #376]	@ (8002488 <HAL_RCC_OscConfig+0x4c4>)
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	4a5d      	ldr	r2, [pc, #372]	@ (8002488 <HAL_RCC_OscConfig+0x4c4>)
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	6213      	str	r3, [r2, #32]
 8002318:	e00b      	b.n	8002332 <HAL_RCC_OscConfig+0x36e>
 800231a:	4b5b      	ldr	r3, [pc, #364]	@ (8002488 <HAL_RCC_OscConfig+0x4c4>)
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	4a5a      	ldr	r2, [pc, #360]	@ (8002488 <HAL_RCC_OscConfig+0x4c4>)
 8002320:	f023 0301 	bic.w	r3, r3, #1
 8002324:	6213      	str	r3, [r2, #32]
 8002326:	4b58      	ldr	r3, [pc, #352]	@ (8002488 <HAL_RCC_OscConfig+0x4c4>)
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	4a57      	ldr	r2, [pc, #348]	@ (8002488 <HAL_RCC_OscConfig+0x4c4>)
 800232c:	f023 0304 	bic.w	r3, r3, #4
 8002330:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d015      	beq.n	8002366 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233a:	f7fe fd35 	bl	8000da8 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002340:	e00a      	b.n	8002358 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002342:	f7fe fd31 	bl	8000da8 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002350:	4293      	cmp	r3, r2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e0b1      	b.n	80024bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002358:	4b4b      	ldr	r3, [pc, #300]	@ (8002488 <HAL_RCC_OscConfig+0x4c4>)
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0ee      	beq.n	8002342 <HAL_RCC_OscConfig+0x37e>
 8002364:	e014      	b.n	8002390 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002366:	f7fe fd1f 	bl	8000da8 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800236c:	e00a      	b.n	8002384 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236e:	f7fe fd1b 	bl	8000da8 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800237c:	4293      	cmp	r3, r2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e09b      	b.n	80024bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002384:	4b40      	ldr	r3, [pc, #256]	@ (8002488 <HAL_RCC_OscConfig+0x4c4>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1ee      	bne.n	800236e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002390:	7dfb      	ldrb	r3, [r7, #23]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d105      	bne.n	80023a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002396:	4b3c      	ldr	r3, [pc, #240]	@ (8002488 <HAL_RCC_OscConfig+0x4c4>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	4a3b      	ldr	r2, [pc, #236]	@ (8002488 <HAL_RCC_OscConfig+0x4c4>)
 800239c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 8087 	beq.w	80024ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023ac:	4b36      	ldr	r3, [pc, #216]	@ (8002488 <HAL_RCC_OscConfig+0x4c4>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 030c 	and.w	r3, r3, #12
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d061      	beq.n	800247c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d146      	bne.n	800244e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c0:	4b33      	ldr	r3, [pc, #204]	@ (8002490 <HAL_RCC_OscConfig+0x4cc>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c6:	f7fe fcef 	bl	8000da8 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ce:	f7fe fceb 	bl	8000da8 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e06d      	b.n	80024bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e0:	4b29      	ldr	r3, [pc, #164]	@ (8002488 <HAL_RCC_OscConfig+0x4c4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1f0      	bne.n	80023ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023f4:	d108      	bne.n	8002408 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023f6:	4b24      	ldr	r3, [pc, #144]	@ (8002488 <HAL_RCC_OscConfig+0x4c4>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	4921      	ldr	r1, [pc, #132]	@ (8002488 <HAL_RCC_OscConfig+0x4c4>)
 8002404:	4313      	orrs	r3, r2
 8002406:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002408:	4b1f      	ldr	r3, [pc, #124]	@ (8002488 <HAL_RCC_OscConfig+0x4c4>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a19      	ldr	r1, [r3, #32]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002418:	430b      	orrs	r3, r1
 800241a:	491b      	ldr	r1, [pc, #108]	@ (8002488 <HAL_RCC_OscConfig+0x4c4>)
 800241c:	4313      	orrs	r3, r2
 800241e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002420:	4b1b      	ldr	r3, [pc, #108]	@ (8002490 <HAL_RCC_OscConfig+0x4cc>)
 8002422:	2201      	movs	r2, #1
 8002424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002426:	f7fe fcbf 	bl	8000da8 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242e:	f7fe fcbb 	bl	8000da8 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e03d      	b.n	80024bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002440:	4b11      	ldr	r3, [pc, #68]	@ (8002488 <HAL_RCC_OscConfig+0x4c4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0f0      	beq.n	800242e <HAL_RCC_OscConfig+0x46a>
 800244c:	e035      	b.n	80024ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244e:	4b10      	ldr	r3, [pc, #64]	@ (8002490 <HAL_RCC_OscConfig+0x4cc>)
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002454:	f7fe fca8 	bl	8000da8 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800245c:	f7fe fca4 	bl	8000da8 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e026      	b.n	80024bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800246e:	4b06      	ldr	r3, [pc, #24]	@ (8002488 <HAL_RCC_OscConfig+0x4c4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f0      	bne.n	800245c <HAL_RCC_OscConfig+0x498>
 800247a:	e01e      	b.n	80024ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	69db      	ldr	r3, [r3, #28]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d107      	bne.n	8002494 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e019      	b.n	80024bc <HAL_RCC_OscConfig+0x4f8>
 8002488:	40021000 	.word	0x40021000
 800248c:	40007000 	.word	0x40007000
 8002490:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002494:	4b0b      	ldr	r3, [pc, #44]	@ (80024c4 <HAL_RCC_OscConfig+0x500>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d106      	bne.n	80024b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d001      	beq.n	80024ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40021000 	.word	0x40021000

080024c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0d0      	b.n	800267e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024dc:	4b6a      	ldr	r3, [pc, #424]	@ (8002688 <HAL_RCC_ClockConfig+0x1c0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d910      	bls.n	800250c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ea:	4b67      	ldr	r3, [pc, #412]	@ (8002688 <HAL_RCC_ClockConfig+0x1c0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f023 0207 	bic.w	r2, r3, #7
 80024f2:	4965      	ldr	r1, [pc, #404]	@ (8002688 <HAL_RCC_ClockConfig+0x1c0>)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fa:	4b63      	ldr	r3, [pc, #396]	@ (8002688 <HAL_RCC_ClockConfig+0x1c0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d001      	beq.n	800250c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e0b8      	b.n	800267e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d020      	beq.n	800255a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002524:	4b59      	ldr	r3, [pc, #356]	@ (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	4a58      	ldr	r2, [pc, #352]	@ (800268c <HAL_RCC_ClockConfig+0x1c4>)
 800252a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800252e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d005      	beq.n	8002548 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800253c:	4b53      	ldr	r3, [pc, #332]	@ (800268c <HAL_RCC_ClockConfig+0x1c4>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	4a52      	ldr	r2, [pc, #328]	@ (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002542:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002546:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002548:	4b50      	ldr	r3, [pc, #320]	@ (800268c <HAL_RCC_ClockConfig+0x1c4>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	494d      	ldr	r1, [pc, #308]	@ (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002556:	4313      	orrs	r3, r2
 8002558:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d040      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d107      	bne.n	800257e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256e:	4b47      	ldr	r3, [pc, #284]	@ (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d115      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e07f      	b.n	800267e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d107      	bne.n	8002596 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002586:	4b41      	ldr	r3, [pc, #260]	@ (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d109      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e073      	b.n	800267e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002596:	4b3d      	ldr	r3, [pc, #244]	@ (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e06b      	b.n	800267e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025a6:	4b39      	ldr	r3, [pc, #228]	@ (800268c <HAL_RCC_ClockConfig+0x1c4>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f023 0203 	bic.w	r2, r3, #3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	4936      	ldr	r1, [pc, #216]	@ (800268c <HAL_RCC_ClockConfig+0x1c4>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025b8:	f7fe fbf6 	bl	8000da8 <HAL_GetTick>
 80025bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025be:	e00a      	b.n	80025d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c0:	f7fe fbf2 	bl	8000da8 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e053      	b.n	800267e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d6:	4b2d      	ldr	r3, [pc, #180]	@ (800268c <HAL_RCC_ClockConfig+0x1c4>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 020c 	and.w	r2, r3, #12
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d1eb      	bne.n	80025c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025e8:	4b27      	ldr	r3, [pc, #156]	@ (8002688 <HAL_RCC_ClockConfig+0x1c0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d210      	bcs.n	8002618 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f6:	4b24      	ldr	r3, [pc, #144]	@ (8002688 <HAL_RCC_ClockConfig+0x1c0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 0207 	bic.w	r2, r3, #7
 80025fe:	4922      	ldr	r1, [pc, #136]	@ (8002688 <HAL_RCC_ClockConfig+0x1c0>)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	4313      	orrs	r3, r2
 8002604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002606:	4b20      	ldr	r3, [pc, #128]	@ (8002688 <HAL_RCC_ClockConfig+0x1c0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d001      	beq.n	8002618 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e032      	b.n	800267e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b00      	cmp	r3, #0
 8002622:	d008      	beq.n	8002636 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002624:	4b19      	ldr	r3, [pc, #100]	@ (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4916      	ldr	r1, [pc, #88]	@ (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	4313      	orrs	r3, r2
 8002634:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b00      	cmp	r3, #0
 8002640:	d009      	beq.n	8002656 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002642:	4b12      	ldr	r3, [pc, #72]	@ (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	490e      	ldr	r1, [pc, #56]	@ (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002652:	4313      	orrs	r3, r2
 8002654:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002656:	f000 f821 	bl	800269c <HAL_RCC_GetSysClockFreq>
 800265a:	4602      	mov	r2, r0
 800265c:	4b0b      	ldr	r3, [pc, #44]	@ (800268c <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	091b      	lsrs	r3, r3, #4
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	490a      	ldr	r1, [pc, #40]	@ (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 8002668:	5ccb      	ldrb	r3, [r1, r3]
 800266a:	fa22 f303 	lsr.w	r3, r2, r3
 800266e:	4a09      	ldr	r2, [pc, #36]	@ (8002694 <HAL_RCC_ClockConfig+0x1cc>)
 8002670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002672:	4b09      	ldr	r3, [pc, #36]	@ (8002698 <HAL_RCC_ClockConfig+0x1d0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7fe fb54 	bl	8000d24 <HAL_InitTick>

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40022000 	.word	0x40022000
 800268c:	40021000 	.word	0x40021000
 8002690:	0800533c 	.word	0x0800533c
 8002694:	20000040 	.word	0x20000040
 8002698:	20000044 	.word	0x20000044

0800269c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	2300      	movs	r3, #0
 80026a8:	60bb      	str	r3, [r7, #8]
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	2300      	movs	r3, #0
 80026b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x94>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f003 030c 	and.w	r3, r3, #12
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d002      	beq.n	80026cc <HAL_RCC_GetSysClockFreq+0x30>
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d003      	beq.n	80026d2 <HAL_RCC_GetSysClockFreq+0x36>
 80026ca:	e027      	b.n	800271c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026cc:	4b19      	ldr	r3, [pc, #100]	@ (8002734 <HAL_RCC_GetSysClockFreq+0x98>)
 80026ce:	613b      	str	r3, [r7, #16]
      break;
 80026d0:	e027      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	0c9b      	lsrs	r3, r3, #18
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	4a17      	ldr	r2, [pc, #92]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026dc:	5cd3      	ldrb	r3, [r2, r3]
 80026de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d010      	beq.n	800270c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026ea:	4b11      	ldr	r3, [pc, #68]	@ (8002730 <HAL_RCC_GetSysClockFreq+0x94>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	0c5b      	lsrs	r3, r3, #17
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	4a11      	ldr	r2, [pc, #68]	@ (800273c <HAL_RCC_GetSysClockFreq+0xa0>)
 80026f6:	5cd3      	ldrb	r3, [r2, r3]
 80026f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002734 <HAL_RCC_GetSysClockFreq+0x98>)
 80026fe:	fb03 f202 	mul.w	r2, r3, r2
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	fbb2 f3f3 	udiv	r3, r2, r3
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	e004      	b.n	8002716 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a0c      	ldr	r2, [pc, #48]	@ (8002740 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002710:	fb02 f303 	mul.w	r3, r2, r3
 8002714:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	613b      	str	r3, [r7, #16]
      break;
 800271a:	e002      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800271c:	4b05      	ldr	r3, [pc, #20]	@ (8002734 <HAL_RCC_GetSysClockFreq+0x98>)
 800271e:	613b      	str	r3, [r7, #16]
      break;
 8002720:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002722:	693b      	ldr	r3, [r7, #16]
}
 8002724:	4618      	mov	r0, r3
 8002726:	371c      	adds	r7, #28
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	40021000 	.word	0x40021000
 8002734:	007a1200 	.word	0x007a1200
 8002738:	08005354 	.word	0x08005354
 800273c:	08005364 	.word	0x08005364
 8002740:	003d0900 	.word	0x003d0900

08002744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002748:	4b02      	ldr	r3, [pc, #8]	@ (8002754 <HAL_RCC_GetHCLKFreq+0x10>)
 800274a:	681b      	ldr	r3, [r3, #0]
}
 800274c:	4618      	mov	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr
 8002754:	20000040 	.word	0x20000040

08002758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800275c:	f7ff fff2 	bl	8002744 <HAL_RCC_GetHCLKFreq>
 8002760:	4602      	mov	r2, r0
 8002762:	4b05      	ldr	r3, [pc, #20]	@ (8002778 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	0a1b      	lsrs	r3, r3, #8
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	4903      	ldr	r1, [pc, #12]	@ (800277c <HAL_RCC_GetPCLK1Freq+0x24>)
 800276e:	5ccb      	ldrb	r3, [r1, r3]
 8002770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002774:	4618      	mov	r0, r3
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40021000 	.word	0x40021000
 800277c:	0800534c 	.word	0x0800534c

08002780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002784:	f7ff ffde 	bl	8002744 <HAL_RCC_GetHCLKFreq>
 8002788:	4602      	mov	r2, r0
 800278a:	4b05      	ldr	r3, [pc, #20]	@ (80027a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	0adb      	lsrs	r3, r3, #11
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	4903      	ldr	r1, [pc, #12]	@ (80027a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002796:	5ccb      	ldrb	r3, [r1, r3]
 8002798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800279c:	4618      	mov	r0, r3
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40021000 	.word	0x40021000
 80027a4:	0800534c 	.word	0x0800534c

080027a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027b0:	4b0a      	ldr	r3, [pc, #40]	@ (80027dc <RCC_Delay+0x34>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a0a      	ldr	r2, [pc, #40]	@ (80027e0 <RCC_Delay+0x38>)
 80027b6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ba:	0a5b      	lsrs	r3, r3, #9
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	fb02 f303 	mul.w	r3, r2, r3
 80027c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027c4:	bf00      	nop
  }
  while (Delay --);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	1e5a      	subs	r2, r3, #1
 80027ca:	60fa      	str	r2, [r7, #12]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1f9      	bne.n	80027c4 <RCC_Delay+0x1c>
}
 80027d0:	bf00      	nop
 80027d2:	bf00      	nop
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr
 80027dc:	20000040 	.word	0x20000040
 80027e0:	10624dd3 	.word	0x10624dd3

080027e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	613b      	str	r3, [r7, #16]
 80027f0:	2300      	movs	r3, #0
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d07d      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002800:	2300      	movs	r3, #0
 8002802:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002804:	4b4f      	ldr	r3, [pc, #316]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10d      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002810:	4b4c      	ldr	r3, [pc, #304]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002812:	69db      	ldr	r3, [r3, #28]
 8002814:	4a4b      	ldr	r2, [pc, #300]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002816:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800281a:	61d3      	str	r3, [r2, #28]
 800281c:	4b49      	ldr	r3, [pc, #292]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002828:	2301      	movs	r3, #1
 800282a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800282c:	4b46      	ldr	r3, [pc, #280]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002834:	2b00      	cmp	r3, #0
 8002836:	d118      	bne.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002838:	4b43      	ldr	r3, [pc, #268]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a42      	ldr	r2, [pc, #264]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800283e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002842:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002844:	f7fe fab0 	bl	8000da8 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284a:	e008      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800284c:	f7fe faac 	bl	8000da8 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b64      	cmp	r3, #100	@ 0x64
 8002858:	d901      	bls.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e06d      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285e:	4b3a      	ldr	r3, [pc, #232]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800286a:	4b36      	ldr	r3, [pc, #216]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002872:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d02e      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	429a      	cmp	r2, r3
 8002886:	d027      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002888:	4b2e      	ldr	r3, [pc, #184]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002890:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002892:	4b2e      	ldr	r3, [pc, #184]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002894:	2201      	movs	r2, #1
 8002896:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002898:	4b2c      	ldr	r3, [pc, #176]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800289e:	4a29      	ldr	r2, [pc, #164]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d014      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ae:	f7fe fa7b 	bl	8000da8 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b4:	e00a      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b6:	f7fe fa77 	bl	8000da8 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d901      	bls.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e036      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0ee      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	4917      	ldr	r1, [pc, #92]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028ea:	7dfb      	ldrb	r3, [r7, #23]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d105      	bne.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f0:	4b14      	ldr	r3, [pc, #80]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	4a13      	ldr	r2, [pc, #76]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d008      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002908:	4b0e      	ldr	r3, [pc, #56]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	490b      	ldr	r1, [pc, #44]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002916:	4313      	orrs	r3, r2
 8002918:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0310 	and.w	r3, r3, #16
 8002922:	2b00      	cmp	r3, #0
 8002924:	d008      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002926:	4b07      	ldr	r3, [pc, #28]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	4904      	ldr	r1, [pc, #16]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002934:	4313      	orrs	r3, r2
 8002936:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40021000 	.word	0x40021000
 8002948:	40007000 	.word	0x40007000
 800294c:	42420440 	.word	0x42420440

08002950 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b088      	sub	sp, #32
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	2300      	movs	r3, #0
 800295e:	61fb      	str	r3, [r7, #28]
 8002960:	2300      	movs	r3, #0
 8002962:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	2300      	movs	r3, #0
 800296a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b10      	cmp	r3, #16
 8002970:	d00a      	beq.n	8002988 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b10      	cmp	r3, #16
 8002976:	f200 808a 	bhi.w	8002a8e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d045      	beq.n	8002a0c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b02      	cmp	r3, #2
 8002984:	d075      	beq.n	8002a72 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002986:	e082      	b.n	8002a8e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002988:	4b46      	ldr	r3, [pc, #280]	@ (8002aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800298e:	4b45      	ldr	r3, [pc, #276]	@ (8002aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d07b      	beq.n	8002a92 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	0c9b      	lsrs	r3, r3, #18
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	4a41      	ldr	r2, [pc, #260]	@ (8002aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80029a4:	5cd3      	ldrb	r3, [r2, r3]
 80029a6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d015      	beq.n	80029de <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029b2:	4b3c      	ldr	r3, [pc, #240]	@ (8002aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	0c5b      	lsrs	r3, r3, #17
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	4a3b      	ldr	r2, [pc, #236]	@ (8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80029be:	5cd3      	ldrb	r3, [r2, r3]
 80029c0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00d      	beq.n	80029e8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80029cc:	4a38      	ldr	r2, [pc, #224]	@ (8002ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	fb02 f303 	mul.w	r3, r2, r3
 80029da:	61fb      	str	r3, [r7, #28]
 80029dc:	e004      	b.n	80029e8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4a34      	ldr	r2, [pc, #208]	@ (8002ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80029e2:	fb02 f303 	mul.w	r3, r2, r3
 80029e6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80029e8:	4b2e      	ldr	r3, [pc, #184]	@ (8002aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029f4:	d102      	bne.n	80029fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	61bb      	str	r3, [r7, #24]
      break;
 80029fa:	e04a      	b.n	8002a92 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	4a2d      	ldr	r2, [pc, #180]	@ (8002ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002a02:	fba2 2303 	umull	r2, r3, r2, r3
 8002a06:	085b      	lsrs	r3, r3, #1
 8002a08:	61bb      	str	r3, [r7, #24]
      break;
 8002a0a:	e042      	b.n	8002a92 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002a0c:	4b25      	ldr	r3, [pc, #148]	@ (8002aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a1c:	d108      	bne.n	8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002a28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a2c:	61bb      	str	r3, [r7, #24]
 8002a2e:	e01f      	b.n	8002a70 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a3a:	d109      	bne.n	8002a50 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002a3c:	4b19      	ldr	r3, [pc, #100]	@ (8002aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002a48:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002a4c:	61bb      	str	r3, [r7, #24]
 8002a4e:	e00f      	b.n	8002a70 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a5a:	d11c      	bne.n	8002a96 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002a5c:	4b11      	ldr	r3, [pc, #68]	@ (8002aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d016      	beq.n	8002a96 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002a68:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002a6c:	61bb      	str	r3, [r7, #24]
      break;
 8002a6e:	e012      	b.n	8002a96 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002a70:	e011      	b.n	8002a96 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002a72:	f7ff fe85 	bl	8002780 <HAL_RCC_GetPCLK2Freq>
 8002a76:	4602      	mov	r2, r0
 8002a78:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	0b9b      	lsrs	r3, r3, #14
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	3301      	adds	r3, #1
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8a:	61bb      	str	r3, [r7, #24]
      break;
 8002a8c:	e004      	b.n	8002a98 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002a8e:	bf00      	nop
 8002a90:	e002      	b.n	8002a98 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002a92:	bf00      	nop
 8002a94:	e000      	b.n	8002a98 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002a96:	bf00      	nop
    }
  }
  return (frequency);
 8002a98:	69bb      	ldr	r3, [r7, #24]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3720      	adds	r7, #32
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	08005368 	.word	0x08005368
 8002aac:	08005378 	.word	0x08005378
 8002ab0:	007a1200 	.word	0x007a1200
 8002ab4:	003d0900 	.word	0x003d0900
 8002ab8:	aaaaaaab 	.word	0xaaaaaaab

08002abc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e042      	b.n	8002b54 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d106      	bne.n	8002ae8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7fd ff4e 	bl	8000984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2224      	movs	r2, #36	@ 0x24
 8002aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002afe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 fdc5 	bl	8003690 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	691a      	ldr	r2, [r3, #16]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	695a      	ldr	r2, [r3, #20]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68da      	ldr	r2, [r3, #12]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08a      	sub	sp, #40	@ 0x28
 8002b60:	af02      	add	r7, sp, #8
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b20      	cmp	r3, #32
 8002b7a:	d16d      	bne.n	8002c58 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <HAL_UART_Transmit+0x2c>
 8002b82:	88fb      	ldrh	r3, [r7, #6]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e066      	b.n	8002c5a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2221      	movs	r2, #33	@ 0x21
 8002b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b9a:	f7fe f905 	bl	8000da8 <HAL_GetTick>
 8002b9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	88fa      	ldrh	r2, [r7, #6]
 8002ba4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	88fa      	ldrh	r2, [r7, #6]
 8002baa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bb4:	d108      	bne.n	8002bc8 <HAL_UART_Transmit+0x6c>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d104      	bne.n	8002bc8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	61bb      	str	r3, [r7, #24]
 8002bc6:	e003      	b.n	8002bd0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002bd0:	e02a      	b.n	8002c28 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2180      	movs	r1, #128	@ 0x80
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 fb14 	bl	800320a <UART_WaitOnFlagUntilTimeout>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e036      	b.n	8002c5a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10b      	bne.n	8002c0a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	881b      	ldrh	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	3302      	adds	r3, #2
 8002c06:	61bb      	str	r3, [r7, #24]
 8002c08:	e007      	b.n	8002c1a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	781a      	ldrb	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	3301      	adds	r3, #1
 8002c18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1cf      	bne.n	8002bd2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2140      	movs	r1, #64	@ 0x40
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 fae4 	bl	800320a <UART_WaitOnFlagUntilTimeout>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e006      	b.n	8002c5a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	e000      	b.n	8002c5a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002c58:	2302      	movs	r3, #2
  }
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3720      	adds	r7, #32
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b084      	sub	sp, #16
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b20      	cmp	r3, #32
 8002c7a:	d112      	bne.n	8002ca2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d002      	beq.n	8002c88 <HAL_UART_Receive_IT+0x26>
 8002c82:	88fb      	ldrh	r3, [r7, #6]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e00b      	b.n	8002ca4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002c92:	88fb      	ldrh	r3, [r7, #6]
 8002c94:	461a      	mov	r2, r3
 8002c96:	68b9      	ldr	r1, [r7, #8]
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 fb24 	bl	80032e6 <UART_Start_Receive_IT>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	e000      	b.n	8002ca4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002ca2:	2302      	movs	r3, #2
  }
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b0ba      	sub	sp, #232	@ 0xe8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002cea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10f      	bne.n	8002d12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cf6:	f003 0320 	and.w	r3, r3, #32
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d009      	beq.n	8002d12 <HAL_UART_IRQHandler+0x66>
 8002cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d02:	f003 0320 	and.w	r3, r3, #32
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fc01 	bl	8003512 <UART_Receive_IT>
      return;
 8002d10:	e25b      	b.n	80031ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002d12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 80de 	beq.w	8002ed8 <HAL_UART_IRQHandler+0x22c>
 8002d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d106      	bne.n	8002d36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d2c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 80d1 	beq.w	8002ed8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00b      	beq.n	8002d5a <HAL_UART_IRQHandler+0xae>
 8002d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d005      	beq.n	8002d5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d52:	f043 0201 	orr.w	r2, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00b      	beq.n	8002d7e <HAL_UART_IRQHandler+0xd2>
 8002d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d76:	f043 0202 	orr.w	r2, r3, #2
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00b      	beq.n	8002da2 <HAL_UART_IRQHandler+0xf6>
 8002d8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d005      	beq.n	8002da2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9a:	f043 0204 	orr.w	r2, r3, #4
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d011      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x126>
 8002dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d105      	bne.n	8002dc6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d005      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dca:	f043 0208 	orr.w	r2, r3, #8
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 81f2 	beq.w	80031c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002de0:	f003 0320 	and.w	r3, r3, #32
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d008      	beq.n	8002dfa <HAL_UART_IRQHandler+0x14e>
 8002de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dec:	f003 0320 	and.w	r3, r3, #32
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d002      	beq.n	8002dfa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 fb8c 	bl	8003512 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	bf14      	ite	ne
 8002e08:	2301      	movne	r3, #1
 8002e0a:	2300      	moveq	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d103      	bne.n	8002e26 <HAL_UART_IRQHandler+0x17a>
 8002e1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d04f      	beq.n	8002ec6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 fa96 	bl	8003358 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d041      	beq.n	8002ebe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	3314      	adds	r3, #20
 8002e40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e48:	e853 3f00 	ldrex	r3, [r3]
 8002e4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002e50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	3314      	adds	r3, #20
 8002e62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002e66:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002e6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002e72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002e76:	e841 2300 	strex	r3, r2, [r1]
 8002e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002e7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1d9      	bne.n	8002e3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d013      	beq.n	8002eb6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e92:	4a7e      	ldr	r2, [pc, #504]	@ (800308c <HAL_UART_IRQHandler+0x3e0>)
 8002e94:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fe fd5e 	bl	800195c <HAL_DMA_Abort_IT>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d016      	beq.n	8002ed4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eb4:	e00e      	b.n	8002ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f993 	bl	80031e2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ebc:	e00a      	b.n	8002ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f98f 	bl	80031e2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ec4:	e006      	b.n	8002ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f98b 	bl	80031e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002ed2:	e175      	b.n	80031c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ed4:	bf00      	nop
    return;
 8002ed6:	e173      	b.n	80031c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	f040 814f 	bne.w	8003180 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ee6:	f003 0310 	and.w	r3, r3, #16
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 8148 	beq.w	8003180 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ef4:	f003 0310 	and.w	r3, r3, #16
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 8141 	beq.w	8003180 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002efe:	2300      	movs	r3, #0
 8002f00:	60bb      	str	r3, [r7, #8]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	60bb      	str	r3, [r7, #8]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 80b6 	beq.w	8003090 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 8145 	beq.w	80031c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002f3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002f42:	429a      	cmp	r2, r3
 8002f44:	f080 813e 	bcs.w	80031c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002f4e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	2b20      	cmp	r3, #32
 8002f58:	f000 8088 	beq.w	800306c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	330c      	adds	r3, #12
 8002f62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f66:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f6a:	e853 3f00 	ldrex	r3, [r3]
 8002f6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002f72:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f76:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f7a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	330c      	adds	r3, #12
 8002f84:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002f88:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002f8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f90:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002f94:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002f98:	e841 2300 	strex	r3, r2, [r1]
 8002f9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002fa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1d9      	bne.n	8002f5c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	3314      	adds	r3, #20
 8002fae:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fb2:	e853 3f00 	ldrex	r3, [r3]
 8002fb6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002fb8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002fba:	f023 0301 	bic.w	r3, r3, #1
 8002fbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	3314      	adds	r3, #20
 8002fc8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002fcc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002fd0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002fd4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002fd8:	e841 2300 	strex	r3, r2, [r1]
 8002fdc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002fde:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1e1      	bne.n	8002fa8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	3314      	adds	r3, #20
 8002fea:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002fee:	e853 3f00 	ldrex	r3, [r3]
 8002ff2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002ff4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ff6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ffa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3314      	adds	r3, #20
 8003004:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003008:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800300a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800300e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003010:	e841 2300 	strex	r3, r2, [r1]
 8003014:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003016:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1e3      	bne.n	8002fe4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2220      	movs	r2, #32
 8003020:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	330c      	adds	r3, #12
 8003030:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003032:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003034:	e853 3f00 	ldrex	r3, [r3]
 8003038:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800303a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800303c:	f023 0310 	bic.w	r3, r3, #16
 8003040:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	330c      	adds	r3, #12
 800304a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800304e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003050:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003052:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003054:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003056:	e841 2300 	strex	r3, r2, [r1]
 800305a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800305c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1e3      	bne.n	800302a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003066:	4618      	mov	r0, r3
 8003068:	f7fe fc3c 	bl	80018e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800307a:	b29b      	uxth	r3, r3
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	b29b      	uxth	r3, r3
 8003080:	4619      	mov	r1, r3
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f8b6 	bl	80031f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003088:	e09c      	b.n	80031c4 <HAL_UART_IRQHandler+0x518>
 800308a:	bf00      	nop
 800308c:	0800341d 	.word	0x0800341d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003098:	b29b      	uxth	r3, r3
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 808e 	beq.w	80031c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80030ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 8089 	beq.w	80031c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	330c      	adds	r3, #12
 80030bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030c0:	e853 3f00 	ldrex	r3, [r3]
 80030c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80030c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80030cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	330c      	adds	r3, #12
 80030d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80030da:	647a      	str	r2, [r7, #68]	@ 0x44
 80030dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80030e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030e2:	e841 2300 	strex	r3, r2, [r1]
 80030e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80030e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1e3      	bne.n	80030b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	3314      	adds	r3, #20
 80030f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f8:	e853 3f00 	ldrex	r3, [r3]
 80030fc:	623b      	str	r3, [r7, #32]
   return(result);
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	f023 0301 	bic.w	r3, r3, #1
 8003104:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3314      	adds	r3, #20
 800310e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003112:	633a      	str	r2, [r7, #48]	@ 0x30
 8003114:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003116:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003118:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800311a:	e841 2300 	strex	r3, r2, [r1]
 800311e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1e3      	bne.n	80030ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2220      	movs	r2, #32
 800312a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	330c      	adds	r3, #12
 800313a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	e853 3f00 	ldrex	r3, [r3]
 8003142:	60fb      	str	r3, [r7, #12]
   return(result);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f023 0310 	bic.w	r3, r3, #16
 800314a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	330c      	adds	r3, #12
 8003154:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003158:	61fa      	str	r2, [r7, #28]
 800315a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315c:	69b9      	ldr	r1, [r7, #24]
 800315e:	69fa      	ldr	r2, [r7, #28]
 8003160:	e841 2300 	strex	r3, r2, [r1]
 8003164:	617b      	str	r3, [r7, #20]
   return(result);
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1e3      	bne.n	8003134 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003172:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003176:	4619      	mov	r1, r3
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 f83b 	bl	80031f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800317e:	e023      	b.n	80031c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003184:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003188:	2b00      	cmp	r3, #0
 800318a:	d009      	beq.n	80031a0 <HAL_UART_IRQHandler+0x4f4>
 800318c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f953 	bl	8003444 <UART_Transmit_IT>
    return;
 800319e:	e014      	b.n	80031ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80031a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00e      	beq.n	80031ca <HAL_UART_IRQHandler+0x51e>
 80031ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d008      	beq.n	80031ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f992 	bl	80034e2 <UART_EndTransmit_IT>
    return;
 80031be:	e004      	b.n	80031ca <HAL_UART_IRQHandler+0x51e>
    return;
 80031c0:	bf00      	nop
 80031c2:	e002      	b.n	80031ca <HAL_UART_IRQHandler+0x51e>
      return;
 80031c4:	bf00      	nop
 80031c6:	e000      	b.n	80031ca <HAL_UART_IRQHandler+0x51e>
      return;
 80031c8:	bf00      	nop
  }
}
 80031ca:	37e8      	adds	r7, #232	@ 0xe8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr

080031e2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr

080031f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr

0800320a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b090      	sub	sp, #64	@ 0x40
 800320e:	af00      	add	r7, sp, #0
 8003210:	60f8      	str	r0, [r7, #12]
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	603b      	str	r3, [r7, #0]
 8003216:	4613      	mov	r3, r2
 8003218:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800321a:	e050      	b.n	80032be <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800321c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800321e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003222:	d04c      	beq.n	80032be <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003224:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003226:	2b00      	cmp	r3, #0
 8003228:	d007      	beq.n	800323a <UART_WaitOnFlagUntilTimeout+0x30>
 800322a:	f7fd fdbd 	bl	8000da8 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003236:	429a      	cmp	r2, r3
 8003238:	d241      	bcs.n	80032be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	330c      	adds	r3, #12
 8003240:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003244:	e853 3f00 	ldrex	r3, [r3]
 8003248:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800324a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003250:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	330c      	adds	r3, #12
 8003258:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800325a:	637a      	str	r2, [r7, #52]	@ 0x34
 800325c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003260:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003262:	e841 2300 	strex	r3, r2, [r1]
 8003266:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1e5      	bne.n	800323a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	3314      	adds	r3, #20
 8003274:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	e853 3f00 	ldrex	r3, [r3]
 800327c:	613b      	str	r3, [r7, #16]
   return(result);
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	f023 0301 	bic.w	r3, r3, #1
 8003284:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	3314      	adds	r3, #20
 800328c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800328e:	623a      	str	r2, [r7, #32]
 8003290:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003292:	69f9      	ldr	r1, [r7, #28]
 8003294:	6a3a      	ldr	r2, [r7, #32]
 8003296:	e841 2300 	strex	r3, r2, [r1]
 800329a:	61bb      	str	r3, [r7, #24]
   return(result);
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1e5      	bne.n	800326e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2220      	movs	r2, #32
 80032a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2220      	movs	r2, #32
 80032ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e00f      	b.n	80032de <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	4013      	ands	r3, r2
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	bf0c      	ite	eq
 80032ce:	2301      	moveq	r3, #1
 80032d0:	2300      	movne	r3, #0
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	461a      	mov	r2, r3
 80032d6:	79fb      	ldrb	r3, [r7, #7]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d09f      	beq.n	800321c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3740      	adds	r7, #64	@ 0x40
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b085      	sub	sp, #20
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	60f8      	str	r0, [r7, #12]
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	4613      	mov	r3, r2
 80032f2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	88fa      	ldrh	r2, [r7, #6]
 80032fe:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	88fa      	ldrh	r2, [r7, #6]
 8003304:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2222      	movs	r2, #34	@ 0x22
 8003310:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d007      	beq.n	800332c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800332a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695a      	ldr	r2, [r3, #20]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0201 	orr.w	r2, r2, #1
 800333a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0220 	orr.w	r2, r2, #32
 800334a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr

08003358 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003358:	b480      	push	{r7}
 800335a:	b095      	sub	sp, #84	@ 0x54
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	330c      	adds	r3, #12
 8003366:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800336a:	e853 3f00 	ldrex	r3, [r3]
 800336e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003372:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003376:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	330c      	adds	r3, #12
 800337e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003380:	643a      	str	r2, [r7, #64]	@ 0x40
 8003382:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003384:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003386:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003388:	e841 2300 	strex	r3, r2, [r1]
 800338c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800338e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1e5      	bne.n	8003360 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	3314      	adds	r3, #20
 800339a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	e853 3f00 	ldrex	r3, [r3]
 80033a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f023 0301 	bic.w	r3, r3, #1
 80033aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3314      	adds	r3, #20
 80033b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033bc:	e841 2300 	strex	r3, r2, [r1]
 80033c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1e5      	bne.n	8003394 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d119      	bne.n	8003404 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	330c      	adds	r3, #12
 80033d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	e853 3f00 	ldrex	r3, [r3]
 80033de:	60bb      	str	r3, [r7, #8]
   return(result);
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f023 0310 	bic.w	r3, r3, #16
 80033e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	330c      	adds	r3, #12
 80033ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033f0:	61ba      	str	r2, [r7, #24]
 80033f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f4:	6979      	ldr	r1, [r7, #20]
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	e841 2300 	strex	r3, r2, [r1]
 80033fc:	613b      	str	r3, [r7, #16]
   return(result);
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1e5      	bne.n	80033d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003412:	bf00      	nop
 8003414:	3754      	adds	r7, #84	@ 0x54
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr

0800341c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003428:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f7ff fed3 	bl	80031e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800343c:	bf00      	nop
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b21      	cmp	r3, #33	@ 0x21
 8003456:	d13e      	bne.n	80034d6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003460:	d114      	bne.n	800348c <UART_Transmit_IT+0x48>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d110      	bne.n	800348c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	881b      	ldrh	r3, [r3, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800347e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	1c9a      	adds	r2, r3, #2
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	621a      	str	r2, [r3, #32]
 800348a:	e008      	b.n	800349e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	1c59      	adds	r1, r3, #1
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6211      	str	r1, [r2, #32]
 8003496:	781a      	ldrb	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	4619      	mov	r1, r3
 80034ac:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10f      	bne.n	80034d2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	e000      	b.n	80034d8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034d6:	2302      	movs	r3, #2
  }
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	bc80      	pop	{r7}
 80034e0:	4770      	bx	lr

080034e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b082      	sub	sp, #8
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68da      	ldr	r2, [r3, #12]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2220      	movs	r2, #32
 80034fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7ff fe64 	bl	80031d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b08c      	sub	sp, #48	@ 0x30
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b22      	cmp	r3, #34	@ 0x22
 8003524:	f040 80ae 	bne.w	8003684 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003530:	d117      	bne.n	8003562 <UART_Receive_IT+0x50>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d113      	bne.n	8003562 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800353a:	2300      	movs	r3, #0
 800353c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003542:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	b29b      	uxth	r3, r3
 800354c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003550:	b29a      	uxth	r2, r3
 8003552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003554:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800355a:	1c9a      	adds	r2, r3, #2
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003560:	e026      	b.n	80035b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003566:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003568:	2300      	movs	r3, #0
 800356a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003574:	d007      	beq.n	8003586 <UART_Receive_IT+0x74>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10a      	bne.n	8003594 <UART_Receive_IT+0x82>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d106      	bne.n	8003594 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	b2da      	uxtb	r2, r3
 800358e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003590:	701a      	strb	r2, [r3, #0]
 8003592:	e008      	b.n	80035a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	b2db      	uxtb	r3, r3
 800359c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	4619      	mov	r1, r3
 80035be:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d15d      	bne.n	8003680 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0220 	bic.w	r2, r2, #32
 80035d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695a      	ldr	r2, [r3, #20]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0201 	bic.w	r2, r2, #1
 80035f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003606:	2b01      	cmp	r3, #1
 8003608:	d135      	bne.n	8003676 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	330c      	adds	r3, #12
 8003616:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	e853 3f00 	ldrex	r3, [r3]
 800361e:	613b      	str	r3, [r7, #16]
   return(result);
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	f023 0310 	bic.w	r3, r3, #16
 8003626:	627b      	str	r3, [r7, #36]	@ 0x24
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	330c      	adds	r3, #12
 800362e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003630:	623a      	str	r2, [r7, #32]
 8003632:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003634:	69f9      	ldr	r1, [r7, #28]
 8003636:	6a3a      	ldr	r2, [r7, #32]
 8003638:	e841 2300 	strex	r3, r2, [r1]
 800363c:	61bb      	str	r3, [r7, #24]
   return(result);
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1e5      	bne.n	8003610 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0310 	and.w	r3, r3, #16
 800364e:	2b10      	cmp	r3, #16
 8003650:	d10a      	bne.n	8003668 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003652:	2300      	movs	r3, #0
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800366c:	4619      	mov	r1, r3
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7ff fdc0 	bl	80031f4 <HAL_UARTEx_RxEventCallback>
 8003674:	e002      	b.n	800367c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f9be 	bl	80039f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	e002      	b.n	8003686 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003680:	2300      	movs	r3, #0
 8003682:	e000      	b.n	8003686 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003684:	2302      	movs	r3, #2
  }
}
 8003686:	4618      	mov	r0, r3
 8003688:	3730      	adds	r7, #48	@ 0x30
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
	...

08003690 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	4313      	orrs	r3, r2
 80036be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80036ca:	f023 030c 	bic.w	r3, r3, #12
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6812      	ldr	r2, [r2, #0]
 80036d2:	68b9      	ldr	r1, [r7, #8]
 80036d4:	430b      	orrs	r3, r1
 80036d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	699a      	ldr	r2, [r3, #24]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a2c      	ldr	r2, [pc, #176]	@ (80037a4 <UART_SetConfig+0x114>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d103      	bne.n	8003700 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036f8:	f7ff f842 	bl	8002780 <HAL_RCC_GetPCLK2Freq>
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	e002      	b.n	8003706 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003700:	f7ff f82a 	bl	8002758 <HAL_RCC_GetPCLK1Freq>
 8003704:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	009a      	lsls	r2, r3, #2
 8003710:	441a      	add	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	fbb2 f3f3 	udiv	r3, r2, r3
 800371c:	4a22      	ldr	r2, [pc, #136]	@ (80037a8 <UART_SetConfig+0x118>)
 800371e:	fba2 2303 	umull	r2, r3, r2, r3
 8003722:	095b      	lsrs	r3, r3, #5
 8003724:	0119      	lsls	r1, r3, #4
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4613      	mov	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	009a      	lsls	r2, r3, #2
 8003730:	441a      	add	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	fbb2 f2f3 	udiv	r2, r2, r3
 800373c:	4b1a      	ldr	r3, [pc, #104]	@ (80037a8 <UART_SetConfig+0x118>)
 800373e:	fba3 0302 	umull	r0, r3, r3, r2
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	2064      	movs	r0, #100	@ 0x64
 8003746:	fb00 f303 	mul.w	r3, r0, r3
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	3332      	adds	r3, #50	@ 0x32
 8003750:	4a15      	ldr	r2, [pc, #84]	@ (80037a8 <UART_SetConfig+0x118>)
 8003752:	fba2 2303 	umull	r2, r3, r2, r3
 8003756:	095b      	lsrs	r3, r3, #5
 8003758:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800375c:	4419      	add	r1, r3
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	4613      	mov	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	009a      	lsls	r2, r3, #2
 8003768:	441a      	add	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	fbb2 f2f3 	udiv	r2, r2, r3
 8003774:	4b0c      	ldr	r3, [pc, #48]	@ (80037a8 <UART_SetConfig+0x118>)
 8003776:	fba3 0302 	umull	r0, r3, r3, r2
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	2064      	movs	r0, #100	@ 0x64
 800377e:	fb00 f303 	mul.w	r3, r0, r3
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	3332      	adds	r3, #50	@ 0x32
 8003788:	4a07      	ldr	r2, [pc, #28]	@ (80037a8 <UART_SetConfig+0x118>)
 800378a:	fba2 2303 	umull	r2, r3, r2, r3
 800378e:	095b      	lsrs	r3, r3, #5
 8003790:	f003 020f 	and.w	r2, r3, #15
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	440a      	add	r2, r1
 800379a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800379c:	bf00      	nop
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40013800 	.word	0x40013800
 80037a8:	51eb851f 	.word	0x51eb851f

080037ac <UART_MspInit>:
extern CircularBuffer rxBuffer;
UART_Driver uart1 = { .huart.Instance = USART1, .isInitialized = 0 };
UART_Driver uart2 = { .huart.Instance = USART2, .isInitialized = 0 };
UART_Driver uart3 = { .huart.Instance = USART3, .isInitialized = 0 };

static void UART_MspInit(UART_HandleTypeDef *huart) {
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08c      	sub	sp, #48	@ 0x30
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b4:	f107 0320 	add.w	r3, r7, #32
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	605a      	str	r2, [r3, #4]
 80037be:	609a      	str	r2, [r3, #8]
 80037c0:	60da      	str	r2, [r3, #12]

    if (huart->Instance == USART1) {
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a58      	ldr	r2, [pc, #352]	@ (8003928 <UART_MspInit+0x17c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d135      	bne.n	8003838 <UART_MspInit+0x8c>
        __HAL_RCC_USART1_CLK_ENABLE();
 80037cc:	4b57      	ldr	r3, [pc, #348]	@ (800392c <UART_MspInit+0x180>)
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	4a56      	ldr	r2, [pc, #344]	@ (800392c <UART_MspInit+0x180>)
 80037d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037d6:	6193      	str	r3, [r2, #24]
 80037d8:	4b54      	ldr	r3, [pc, #336]	@ (800392c <UART_MspInit+0x180>)
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037e0:	61fb      	str	r3, [r7, #28]
 80037e2:	69fb      	ldr	r3, [r7, #28]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 80037e4:	4b51      	ldr	r3, [pc, #324]	@ (800392c <UART_MspInit+0x180>)
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	4a50      	ldr	r2, [pc, #320]	@ (800392c <UART_MspInit+0x180>)
 80037ea:	f043 0304 	orr.w	r3, r3, #4
 80037ee:	6193      	str	r3, [r2, #24]
 80037f0:	4b4e      	ldr	r3, [pc, #312]	@ (800392c <UART_MspInit+0x180>)
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	61bb      	str	r3, [r7, #24]
 80037fa:	69bb      	ldr	r3, [r7, #24]

        GPIO_InitStruct.Pin = GPIO_PIN_9 ;
 80037fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003800:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003802:	2302      	movs	r3, #2
 8003804:	627b      	str	r3, [r7, #36]	@ 0x24
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003806:	2300      	movs	r3, #0
 8003808:	62bb      	str	r3, [r7, #40]	@ 0x28
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800380a:	2303      	movs	r3, #3
 800380c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800380e:	f107 0320 	add.w	r3, r7, #32
 8003812:	4619      	mov	r1, r3
 8003814:	4846      	ldr	r0, [pc, #280]	@ (8003930 <UART_MspInit+0x184>)
 8003816:	f7fe fa1f 	bl	8001c58 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_10;
 800381a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800381e:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT ;
 8003820:	2300      	movs	r3, #0
 8003822:	627b      	str	r3, [r7, #36]	@ 0x24
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003824:	2300      	movs	r3, #0
 8003826:	62bb      	str	r3, [r7, #40]	@ 0x28
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003828:	2303      	movs	r3, #3
 800382a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800382c:	f107 0320 	add.w	r3, r7, #32
 8003830:	4619      	mov	r1, r3
 8003832:	483f      	ldr	r0, [pc, #252]	@ (8003930 <UART_MspInit+0x184>)
 8003834:	f7fe fa10 	bl	8001c58 <HAL_GPIO_Init>
    }
    if (huart->Instance == USART2) {
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a3d      	ldr	r2, [pc, #244]	@ (8003934 <UART_MspInit+0x188>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d133      	bne.n	80038aa <UART_MspInit+0xfe>
        __HAL_RCC_USART2_CLK_ENABLE();
 8003842:	4b3a      	ldr	r3, [pc, #232]	@ (800392c <UART_MspInit+0x180>)
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	4a39      	ldr	r2, [pc, #228]	@ (800392c <UART_MspInit+0x180>)
 8003848:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800384c:	61d3      	str	r3, [r2, #28]
 800384e:	4b37      	ldr	r3, [pc, #220]	@ (800392c <UART_MspInit+0x180>)
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003856:	617b      	str	r3, [r7, #20]
 8003858:	697b      	ldr	r3, [r7, #20]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 800385a:	4b34      	ldr	r3, [pc, #208]	@ (800392c <UART_MspInit+0x180>)
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	4a33      	ldr	r2, [pc, #204]	@ (800392c <UART_MspInit+0x180>)
 8003860:	f043 0304 	orr.w	r3, r3, #4
 8003864:	6193      	str	r3, [r2, #24]
 8003866:	4b31      	ldr	r3, [pc, #196]	@ (800392c <UART_MspInit+0x180>)
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	f003 0304 	and.w	r3, r3, #4
 800386e:	613b      	str	r3, [r7, #16]
 8003870:	693b      	ldr	r3, [r7, #16]

        GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003872:	2304      	movs	r3, #4
 8003874:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003876:	2302      	movs	r3, #2
 8003878:	627b      	str	r3, [r7, #36]	@ 0x24
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387a:	2300      	movs	r3, #0
 800387c:	62bb      	str	r3, [r7, #40]	@ 0x28
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800387e:	2303      	movs	r3, #3
 8003880:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003882:	f107 0320 	add.w	r3, r7, #32
 8003886:	4619      	mov	r1, r3
 8003888:	4829      	ldr	r0, [pc, #164]	@ (8003930 <UART_MspInit+0x184>)
 800388a:	f7fe f9e5 	bl	8001c58 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_3;
 800388e:	2308      	movs	r3, #8
 8003890:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003892:	2300      	movs	r3, #0
 8003894:	627b      	str	r3, [r7, #36]	@ 0x24
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003896:	2300      	movs	r3, #0
 8003898:	62bb      	str	r3, [r7, #40]	@ 0x28
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800389a:	2303      	movs	r3, #3
 800389c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800389e:	f107 0320 	add.w	r3, r7, #32
 80038a2:	4619      	mov	r1, r3
 80038a4:	4822      	ldr	r0, [pc, #136]	@ (8003930 <UART_MspInit+0x184>)
 80038a6:	f7fe f9d7 	bl	8001c58 <HAL_GPIO_Init>
    }
    if (huart->Instance == USART3) {
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a22      	ldr	r2, [pc, #136]	@ (8003938 <UART_MspInit+0x18c>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d135      	bne.n	8003920 <UART_MspInit+0x174>
        __HAL_RCC_USART3_CLK_ENABLE();
 80038b4:	4b1d      	ldr	r3, [pc, #116]	@ (800392c <UART_MspInit+0x180>)
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	4a1c      	ldr	r2, [pc, #112]	@ (800392c <UART_MspInit+0x180>)
 80038ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038be:	61d3      	str	r3, [r2, #28]
 80038c0:	4b1a      	ldr	r3, [pc, #104]	@ (800392c <UART_MspInit+0x180>)
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	68fb      	ldr	r3, [r7, #12]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 80038cc:	4b17      	ldr	r3, [pc, #92]	@ (800392c <UART_MspInit+0x180>)
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	4a16      	ldr	r2, [pc, #88]	@ (800392c <UART_MspInit+0x180>)
 80038d2:	f043 0308 	orr.w	r3, r3, #8
 80038d6:	6193      	str	r3, [r2, #24]
 80038d8:	4b14      	ldr	r3, [pc, #80]	@ (800392c <UART_MspInit+0x180>)
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	68bb      	ldr	r3, [r7, #8]

        GPIO_InitStruct.Pin = GPIO_PIN_10;
 80038e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038e8:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ea:	2302      	movs	r3, #2
 80038ec:	627b      	str	r3, [r7, #36]	@ 0x24
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ee:	2300      	movs	r3, #0
 80038f0:	62bb      	str	r3, [r7, #40]	@ 0x28
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038f2:	2303      	movs	r3, #3
 80038f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038f6:	f107 0320 	add.w	r3, r7, #32
 80038fa:	4619      	mov	r1, r3
 80038fc:	480f      	ldr	r0, [pc, #60]	@ (800393c <UART_MspInit+0x190>)
 80038fe:	f7fe f9ab 	bl	8001c58 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003902:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003906:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003908:	2300      	movs	r3, #0
 800390a:	627b      	str	r3, [r7, #36]	@ 0x24
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390c:	2300      	movs	r3, #0
 800390e:	62bb      	str	r3, [r7, #40]	@ 0x28
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003910:	2303      	movs	r3, #3
 8003912:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003914:	f107 0320 	add.w	r3, r7, #32
 8003918:	4619      	mov	r1, r3
 800391a:	4808      	ldr	r0, [pc, #32]	@ (800393c <UART_MspInit+0x190>)
 800391c:	f7fe f99c 	bl	8001c58 <HAL_GPIO_Init>
    }
}
 8003920:	bf00      	nop
 8003922:	3730      	adds	r7, #48	@ 0x30
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40013800 	.word	0x40013800
 800392c:	40021000 	.word	0x40021000
 8003930:	40010800 	.word	0x40010800
 8003934:	40004400 	.word	0x40004400
 8003938:	40004800 	.word	0x40004800
 800393c:	40010c00 	.word	0x40010c00

08003940 <UART_Init>:

int UART_Init(UART_Driver *uart, UART_Config config) {
 8003940:	b084      	sub	sp, #16
 8003942:	b590      	push	{r4, r7, lr}
 8003944:	b083      	sub	sp, #12
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
 800394a:	f107 001c 	add.w	r0, r7, #28
 800394e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (uart->isInitialized) {
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <UART_Init+0x22>
        return -1; // UART đã được khởi tạo trước đó
 800395c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003960:	e02e      	b.n	80039c0 <UART_Init+0x80>
    }
    uart->config = config;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f103 0448 	add.w	r4, r3, #72	@ 0x48
 8003968:	f107 031c 	add.w	r3, r7, #28
 800396c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800396e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    uart->huart.Init.BaudRate = config.baudRate;
 8003972:	69fa      	ldr	r2, [r7, #28]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	605a      	str	r2, [r3, #4]
    uart->huart.Init.WordLength = config.wordLength;
 8003978:	6a3a      	ldr	r2, [r7, #32]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	609a      	str	r2, [r3, #8]
    uart->huart.Init.StopBits = config.stopBits;
 800397e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	60da      	str	r2, [r3, #12]
    uart->huart.Init.Parity = config.parity;
 8003984:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	611a      	str	r2, [r3, #16]
    uart->huart.Init.Mode = UART_MODE_TX_RX;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	220c      	movs	r2, #12
 800398e:	615a      	str	r2, [r3, #20]
    uart->huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	619a      	str	r2, [r3, #24]
    uart->huart.Init.OverSampling = UART_OVERSAMPLING_16;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	61da      	str	r2, [r3, #28]

    UART_MspInit(&uart->huart);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7ff ff04 	bl	80037ac <UART_MspInit>

    if (HAL_UART_Init(&uart->huart) != HAL_OK) {
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7ff f888 	bl	8002abc <HAL_UART_Init>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <UART_Init+0x76>
        return 1; // Khởi tạo thất bại
 80039b2:	2301      	movs	r3, #1
 80039b4:	e004      	b.n	80039c0 <UART_Init+0x80>
    }
    uart->isInitialized = 1;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    return 0; // Khởi tạo thành công
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80039ca:	b004      	add	sp, #16
 80039cc:	4770      	bx	lr

080039ce <UART_SendString>:
void UART_SendString(UART_HandleTypeDef *huart, const char *str) {
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b082      	sub	sp, #8
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
 80039d6:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80039d8:	6838      	ldr	r0, [r7, #0]
 80039da:	f7fc fbc1 	bl	8000160 <strlen>
 80039de:	4603      	mov	r3, r0
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80039e6:	6839      	ldr	r1, [r7, #0]
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7ff f8b7 	bl	8002b5c <HAL_UART_Transmit>
}
 80039ee:	bf00      	nop
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
	...

080039f8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a12      	ldr	r2, [pc, #72]	@ (8003a50 <HAL_UART_RxCpltCallback+0x58>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d11e      	bne.n	8003a48 <HAL_UART_RxCpltCallback+0x50>
	  if (!Setstop){
 8003a0a:	4b12      	ldr	r3, [pc, #72]	@ (8003a54 <HAL_UART_RxCpltCallback+0x5c>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10e      	bne.n	8003a32 <HAL_UART_RxCpltCallback+0x3a>
		  if (rxbyte == 0x03) {  // Kiểm tra lệnh Ctrl+C
 8003a14:	4b10      	ldr	r3, [pc, #64]	@ (8003a58 <HAL_UART_RxCpltCallback+0x60>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	2b03      	cmp	r3, #3
 8003a1a:	d103      	bne.n	8003a24 <HAL_UART_RxCpltCallback+0x2c>
			  Setstop = 1;
 8003a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8003a54 <HAL_UART_RxCpltCallback+0x5c>)
 8003a1e:	2201      	movs	r2, #1
 8003a20:	701a      	strb	r2, [r3, #0]
 8003a22:	e006      	b.n	8003a32 <HAL_UART_RxCpltCallback+0x3a>
		  }
		  else {
			  HAL_UART_Transmit(&uart1.huart, &rxbyte, 1, HAL_MAX_DELAY);
 8003a24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a28:	2201      	movs	r2, #1
 8003a2a:	490b      	ldr	r1, [pc, #44]	@ (8003a58 <HAL_UART_RxCpltCallback+0x60>)
 8003a2c:	480b      	ldr	r0, [pc, #44]	@ (8003a5c <HAL_UART_RxCpltCallback+0x64>)
 8003a2e:	f7ff f895 	bl	8002b5c <HAL_UART_Transmit>
		  }
	  }
	  CircularBuffer_Write(&rxBuffer, rxbyte);
 8003a32:	4b09      	ldr	r3, [pc, #36]	@ (8003a58 <HAL_UART_RxCpltCallback+0x60>)
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	4619      	mov	r1, r3
 8003a38:	4809      	ldr	r0, [pc, #36]	@ (8003a60 <HAL_UART_RxCpltCallback+0x68>)
 8003a3a:	f000 f824 	bl	8003a86 <CircularBuffer_Write>
	  HAL_UART_Receive_IT(&uart1.huart, &rxbyte, 1);
 8003a3e:	2201      	movs	r2, #1
 8003a40:	4905      	ldr	r1, [pc, #20]	@ (8003a58 <HAL_UART_RxCpltCallback+0x60>)
 8003a42:	4806      	ldr	r0, [pc, #24]	@ (8003a5c <HAL_UART_RxCpltCallback+0x64>)
 8003a44:	f7ff f90d 	bl	8002c62 <HAL_UART_Receive_IT>
  }
}
 8003a48:	bf00      	nop
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40013800 	.word	0x40013800
 8003a54:	20000049 	.word	0x20000049
 8003a58:	200004d0 	.word	0x200004d0
 8003a5c:	2000004c 	.word	0x2000004c
 8003a60:	20000224 	.word	0x20000224

08003a64 <send_byte>:
void send_byte(UART_HandleTypeDef *huart, uint8_t byte) {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	70fb      	strb	r3, [r7, #3]
    HAL_UART_Transmit(huart, &byte, 1, HAL_MAX_DELAY);
 8003a70:	1cf9      	adds	r1, r7, #3
 8003a72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a76:	2201      	movs	r2, #1
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7ff f86f 	bl	8002b5c <HAL_UART_Transmit>
}
 8003a7e:	bf00      	nop
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <CircularBuffer_Write>:
 *      Author: tdat
 */

#include "circular_bf.h"

int CircularBuffer_Write(CircularBuffer *cb, uint8_t data) {
 8003a86:	b480      	push	{r7}
 8003a88:	b085      	sub	sp, #20
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	70fb      	strb	r3, [r7, #3]
    uint16_t next = (cb->head + 1) % BUFFER_SIZE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	425a      	negs	r2, r3
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	b2d2      	uxtb	r2, r2
 8003aa2:	bf58      	it	pl
 8003aa4:	4253      	negpl	r3, r2
 8003aa6:	81fb      	strh	r3, [r7, #14]
    if (next == cb->tail) {
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	89fa      	ldrh	r2, [r7, #14]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d101      	bne.n	8003aba <CircularBuffer_Write+0x34>
            return 0;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	e00c      	b.n	8003ad4 <CircularBuffer_Write+0x4e>
    } else {
            cb->buffer[cb->head] = data;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	78fa      	ldrb	r2, [r7, #3]
 8003ac8:	545a      	strb	r2, [r3, r1]
            cb->head = next;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	89fa      	ldrh	r2, [r7, #14]
 8003ace:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
            return 1;
 8003ad2:	2301      	movs	r3, #1
    }
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bc80      	pop	{r7}
 8003adc:	4770      	bx	lr

08003ade <CircularBuffer_Read>:
int CircularBuffer_Read(CircularBuffer *cb, uint8_t *data) {
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
 8003ae6:	6039      	str	r1, [r7, #0]
    if (cb->head == cb->tail) {
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d101      	bne.n	8003b00 <CircularBuffer_Read+0x22>
        return 0; // Buffer empty
 8003afc:	2300      	movs	r3, #0
 8003afe:	e017      	b.n	8003b30 <CircularBuffer_Read+0x52>
    }
    *data = cb->buffer[cb->tail];
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	461a      	mov	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	5c9a      	ldrb	r2, [r3, r2]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	701a      	strb	r2, [r3, #0]
    cb->tail = (cb->tail + 1) % BUFFER_SIZE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	425a      	negs	r2, r3
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	bf58      	it	pl
 8003b24:	4253      	negpl	r3, r2
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
    return 1; // Success
 8003b2e:	2301      	movs	r3, #1
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bc80      	pop	{r7}
 8003b38:	4770      	bx	lr
	...

08003b3c <processCommand>:
#define MAX_COUNT	3
#define MIN_PINLED	0
#define MAX_PINLED	8

int check_arg(char *args);
void processCommand(CommandMapping *ptr, char *cmd){
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
    char *token = strtok(cmd, " ");
 8003b46:	4939      	ldr	r1, [pc, #228]	@ (8003c2c <processCommand+0xf0>)
 8003b48:	6838      	ldr	r0, [r7, #0]
 8003b4a:	f000 fa67 	bl	800401c <strtok>
 8003b4e:	6138      	str	r0, [r7, #16]
    for (CommandMapping *mapping = ptr; mapping->command != NULL; mapping++) {
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	61fb      	str	r3, [r7, #28]
 8003b54:	e05d      	b.n	8003c12 <processCommand+0xd6>
        if (strcmp(token, mapping->command) == 0) {
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	6938      	ldr	r0, [r7, #16]
 8003b5e:	f7fc faf5 	bl	800014c <strcmp>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d151      	bne.n	8003c0c <processCommand+0xd0>
    		if (strcmp(token, "info") == 0){
 8003b68:	4931      	ldr	r1, [pc, #196]	@ (8003c30 <processCommand+0xf4>)
 8003b6a:	6938      	ldr	r0, [r7, #16]
 8003b6c:	f7fc faee 	bl	800014c <strcmp>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10b      	bne.n	8003b8e <processCommand+0x52>
				handleInfoCommand((uint8_t *)strtok(NULL, ""), 0);
 8003b76:	492f      	ldr	r1, [pc, #188]	@ (8003c34 <processCommand+0xf8>)
 8003b78:	2000      	movs	r0, #0
 8003b7a:	f000 fa4f 	bl	800401c <strtok>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2100      	movs	r1, #0
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fc fc96 	bl	80004b4 <handleInfoCommand>
				prompt();
 8003b88:	f000 f872 	bl	8003c70 <prompt>
				return;
 8003b8c:	e04b      	b.n	8003c26 <processCommand+0xea>
			}else{
        		char *token = strtok(NULL, " ");
 8003b8e:	4927      	ldr	r1, [pc, #156]	@ (8003c2c <processCommand+0xf0>)
 8003b90:	2000      	movs	r0, #0
 8003b92:	f000 fa43 	bl	800401c <strtok>
 8003b96:	61b8      	str	r0, [r7, #24]
        		uint8_t argvalue[MAX_COUNT] = {0};
 8003b98:	4b27      	ldr	r3, [pc, #156]	@ (8003c38 <processCommand+0xfc>)
 8003b9a:	881b      	ldrh	r3, [r3, #0]
 8003b9c:	81bb      	strh	r3, [r7, #12]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	73bb      	strb	r3, [r7, #14]
        		uint8_t argcount = 0;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	75fb      	strb	r3, [r7, #23]
            	while (token != NULL) {
 8003ba6:	e01d      	b.n	8003be4 <processCommand+0xa8>
				uint8_t pin = atoi(token);
 8003ba8:	69b8      	ldr	r0, [r7, #24]
 8003baa:	f000 f86d 	bl	8003c88 <atoi>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	73fb      	strb	r3, [r7, #15]
				if (pin >= MIN_PINLED && pin <= MAX_PINLED) {
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d80c      	bhi.n	8003bd2 <processCommand+0x96>
					if (argcount < MAX_COUNT) {
 8003bb8:	7dfb      	ldrb	r3, [r7, #23]
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d805      	bhi.n	8003bca <processCommand+0x8e>
						argvalue[argcount] = pin;
 8003bbe:	7dfb      	ldrb	r3, [r7, #23]
 8003bc0:	3320      	adds	r3, #32
 8003bc2:	443b      	add	r3, r7
 8003bc4:	7bfa      	ldrb	r2, [r7, #15]
 8003bc6:	f803 2c14 	strb.w	r2, [r3, #-20]
					}
					argcount++;
 8003bca:	7dfb      	ldrb	r3, [r7, #23]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	75fb      	strb	r3, [r7, #23]
 8003bd0:	e003      	b.n	8003bda <processCommand+0x9e>
				} else {
					UART_SendString(&uart1.huart, "\r\nError: Invalid pin. Only PA4, PA5, PA6, PA7, and PA8 are allowed.");
 8003bd2:	491a      	ldr	r1, [pc, #104]	@ (8003c3c <processCommand+0x100>)
 8003bd4:	481a      	ldr	r0, [pc, #104]	@ (8003c40 <processCommand+0x104>)
 8003bd6:	f7ff fefa 	bl	80039ce <UART_SendString>
				}
				token = strtok(NULL, " ");
 8003bda:	4914      	ldr	r1, [pc, #80]	@ (8003c2c <processCommand+0xf0>)
 8003bdc:	2000      	movs	r0, #0
 8003bde:	f000 fa1d 	bl	800401c <strtok>
 8003be2:	61b8      	str	r0, [r7, #24]
            	while (token != NULL) {
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1de      	bne.n	8003ba8 <processCommand+0x6c>
			}
			if (argcount > MAX_COUNT) {
 8003bea:	7dfb      	ldrb	r3, [r7, #23]
 8003bec:	2b03      	cmp	r3, #3
 8003bee:	d903      	bls.n	8003bf8 <processCommand+0xbc>
				UART_SendString(&uart1.huart, "\r\nError: Too many arguments.");
 8003bf0:	4914      	ldr	r1, [pc, #80]	@ (8003c44 <processCommand+0x108>)
 8003bf2:	4813      	ldr	r0, [pc, #76]	@ (8003c40 <processCommand+0x104>)
 8003bf4:	f7ff feeb 	bl	80039ce <UART_SendString>
			}

        	mapping->handler(argvalue, argcount);
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	7df9      	ldrb	r1, [r7, #23]
 8003bfe:	f107 020c 	add.w	r2, r7, #12
 8003c02:	4610      	mov	r0, r2
 8003c04:	4798      	blx	r3
        	prompt();
 8003c06:	f000 f833 	bl	8003c70 <prompt>
 8003c0a:	e00c      	b.n	8003c26 <processCommand+0xea>
    for (CommandMapping *mapping = ptr; mapping->command != NULL; mapping++) {
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	3308      	adds	r3, #8
 8003c10:	61fb      	str	r3, [r7, #28]
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d19d      	bne.n	8003b56 <processCommand+0x1a>
        	return;
			}
        }
    }
    handleInvalidCommand((uint8_t *)token, 0);
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	6938      	ldr	r0, [r7, #16]
 8003c1e:	f7fc fc79 	bl	8000514 <handleInvalidCommand>
    prompt();
 8003c22:	f000 f825 	bl	8003c70 <prompt>
}
 8003c26:	3720      	adds	r7, #32
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	080052a0 	.word	0x080052a0
 8003c30:	080052a4 	.word	0x080052a4
 8003c34:	080052ac 	.word	0x080052ac
 8003c38:	08005314 	.word	0x08005314
 8003c3c:	080052b0 	.word	0x080052b0
 8003c40:	2000004c 	.word	0x2000004c
 8003c44:	080052f4 	.word	0x080052f4

08003c48 <checkCtrlC>:
void checkCtrlC(uint8_t data){
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	4603      	mov	r3, r0
 8003c50:	71fb      	strb	r3, [r7, #7]
	if (data == 0x03){
 8003c52:	79fb      	ldrb	r3, [r7, #7]
 8003c54:	2b03      	cmp	r3, #3
 8003c56:	d103      	bne.n	8003c60 <checkCtrlC+0x18>
		UART_SendString(&uart1.huart, "^C\n\r"PROMPT);
 8003c58:	4903      	ldr	r1, [pc, #12]	@ (8003c68 <checkCtrlC+0x20>)
 8003c5a:	4804      	ldr	r0, [pc, #16]	@ (8003c6c <checkCtrlC+0x24>)
 8003c5c:	f7ff feb7 	bl	80039ce <UART_SendString>
	}
}
 8003c60:	bf00      	nop
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	08005318 	.word	0x08005318
 8003c6c:	2000004c 	.word	0x2000004c

08003c70 <prompt>:
void prompt(){
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
	UART_SendString(&uart1.huart, "\n\r"PROMPT);
 8003c74:	4902      	ldr	r1, [pc, #8]	@ (8003c80 <prompt+0x10>)
 8003c76:	4803      	ldr	r0, [pc, #12]	@ (8003c84 <prompt+0x14>)
 8003c78:	f7ff fea9 	bl	80039ce <UART_SendString>
}
 8003c7c:	bf00      	nop
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	0800532c 	.word	0x0800532c
 8003c84:	2000004c 	.word	0x2000004c

08003c88 <atoi>:
 8003c88:	220a      	movs	r2, #10
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	f000 b87a 	b.w	8003d84 <strtol>

08003c90 <_strtol_l.constprop.0>:
 8003c90:	2b24      	cmp	r3, #36	@ 0x24
 8003c92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c96:	4686      	mov	lr, r0
 8003c98:	4690      	mov	r8, r2
 8003c9a:	d801      	bhi.n	8003ca0 <_strtol_l.constprop.0+0x10>
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d106      	bne.n	8003cae <_strtol_l.constprop.0+0x1e>
 8003ca0:	f000 fa5e 	bl	8004160 <__errno>
 8003ca4:	2316      	movs	r3, #22
 8003ca6:	6003      	str	r3, [r0, #0]
 8003ca8:	2000      	movs	r0, #0
 8003caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cae:	460d      	mov	r5, r1
 8003cb0:	4833      	ldr	r0, [pc, #204]	@ (8003d80 <_strtol_l.constprop.0+0xf0>)
 8003cb2:	462a      	mov	r2, r5
 8003cb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003cb8:	5d06      	ldrb	r6, [r0, r4]
 8003cba:	f016 0608 	ands.w	r6, r6, #8
 8003cbe:	d1f8      	bne.n	8003cb2 <_strtol_l.constprop.0+0x22>
 8003cc0:	2c2d      	cmp	r4, #45	@ 0x2d
 8003cc2:	d12d      	bne.n	8003d20 <_strtol_l.constprop.0+0x90>
 8003cc4:	2601      	movs	r6, #1
 8003cc6:	782c      	ldrb	r4, [r5, #0]
 8003cc8:	1c95      	adds	r5, r2, #2
 8003cca:	f033 0210 	bics.w	r2, r3, #16
 8003cce:	d109      	bne.n	8003ce4 <_strtol_l.constprop.0+0x54>
 8003cd0:	2c30      	cmp	r4, #48	@ 0x30
 8003cd2:	d12a      	bne.n	8003d2a <_strtol_l.constprop.0+0x9a>
 8003cd4:	782a      	ldrb	r2, [r5, #0]
 8003cd6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003cda:	2a58      	cmp	r2, #88	@ 0x58
 8003cdc:	d125      	bne.n	8003d2a <_strtol_l.constprop.0+0x9a>
 8003cde:	2310      	movs	r3, #16
 8003ce0:	786c      	ldrb	r4, [r5, #1]
 8003ce2:	3502      	adds	r5, #2
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003cea:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8003cee:	fbbc f9f3 	udiv	r9, ip, r3
 8003cf2:	4610      	mov	r0, r2
 8003cf4:	fb03 ca19 	mls	sl, r3, r9, ip
 8003cf8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003cfc:	2f09      	cmp	r7, #9
 8003cfe:	d81b      	bhi.n	8003d38 <_strtol_l.constprop.0+0xa8>
 8003d00:	463c      	mov	r4, r7
 8003d02:	42a3      	cmp	r3, r4
 8003d04:	dd27      	ble.n	8003d56 <_strtol_l.constprop.0+0xc6>
 8003d06:	1c57      	adds	r7, r2, #1
 8003d08:	d007      	beq.n	8003d1a <_strtol_l.constprop.0+0x8a>
 8003d0a:	4581      	cmp	r9, r0
 8003d0c:	d320      	bcc.n	8003d50 <_strtol_l.constprop.0+0xc0>
 8003d0e:	d101      	bne.n	8003d14 <_strtol_l.constprop.0+0x84>
 8003d10:	45a2      	cmp	sl, r4
 8003d12:	db1d      	blt.n	8003d50 <_strtol_l.constprop.0+0xc0>
 8003d14:	2201      	movs	r2, #1
 8003d16:	fb00 4003 	mla	r0, r0, r3, r4
 8003d1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003d1e:	e7eb      	b.n	8003cf8 <_strtol_l.constprop.0+0x68>
 8003d20:	2c2b      	cmp	r4, #43	@ 0x2b
 8003d22:	bf04      	itt	eq
 8003d24:	782c      	ldrbeq	r4, [r5, #0]
 8003d26:	1c95      	addeq	r5, r2, #2
 8003d28:	e7cf      	b.n	8003cca <_strtol_l.constprop.0+0x3a>
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1da      	bne.n	8003ce4 <_strtol_l.constprop.0+0x54>
 8003d2e:	2c30      	cmp	r4, #48	@ 0x30
 8003d30:	bf0c      	ite	eq
 8003d32:	2308      	moveq	r3, #8
 8003d34:	230a      	movne	r3, #10
 8003d36:	e7d5      	b.n	8003ce4 <_strtol_l.constprop.0+0x54>
 8003d38:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003d3c:	2f19      	cmp	r7, #25
 8003d3e:	d801      	bhi.n	8003d44 <_strtol_l.constprop.0+0xb4>
 8003d40:	3c37      	subs	r4, #55	@ 0x37
 8003d42:	e7de      	b.n	8003d02 <_strtol_l.constprop.0+0x72>
 8003d44:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003d48:	2f19      	cmp	r7, #25
 8003d4a:	d804      	bhi.n	8003d56 <_strtol_l.constprop.0+0xc6>
 8003d4c:	3c57      	subs	r4, #87	@ 0x57
 8003d4e:	e7d8      	b.n	8003d02 <_strtol_l.constprop.0+0x72>
 8003d50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003d54:	e7e1      	b.n	8003d1a <_strtol_l.constprop.0+0x8a>
 8003d56:	1c53      	adds	r3, r2, #1
 8003d58:	d108      	bne.n	8003d6c <_strtol_l.constprop.0+0xdc>
 8003d5a:	2322      	movs	r3, #34	@ 0x22
 8003d5c:	4660      	mov	r0, ip
 8003d5e:	f8ce 3000 	str.w	r3, [lr]
 8003d62:	f1b8 0f00 	cmp.w	r8, #0
 8003d66:	d0a0      	beq.n	8003caa <_strtol_l.constprop.0+0x1a>
 8003d68:	1e69      	subs	r1, r5, #1
 8003d6a:	e006      	b.n	8003d7a <_strtol_l.constprop.0+0xea>
 8003d6c:	b106      	cbz	r6, 8003d70 <_strtol_l.constprop.0+0xe0>
 8003d6e:	4240      	negs	r0, r0
 8003d70:	f1b8 0f00 	cmp.w	r8, #0
 8003d74:	d099      	beq.n	8003caa <_strtol_l.constprop.0+0x1a>
 8003d76:	2a00      	cmp	r2, #0
 8003d78:	d1f6      	bne.n	8003d68 <_strtol_l.constprop.0+0xd8>
 8003d7a:	f8c8 1000 	str.w	r1, [r8]
 8003d7e:	e794      	b.n	8003caa <_strtol_l.constprop.0+0x1a>
 8003d80:	0800537b 	.word	0x0800537b

08003d84 <strtol>:
 8003d84:	4613      	mov	r3, r2
 8003d86:	460a      	mov	r2, r1
 8003d88:	4601      	mov	r1, r0
 8003d8a:	4802      	ldr	r0, [pc, #8]	@ (8003d94 <strtol+0x10>)
 8003d8c:	6800      	ldr	r0, [r0, #0]
 8003d8e:	f7ff bf7f 	b.w	8003c90 <_strtol_l.constprop.0>
 8003d92:	bf00      	nop
 8003d94:	200000b4 	.word	0x200000b4

08003d98 <std>:
 8003d98:	2300      	movs	r3, #0
 8003d9a:	b510      	push	{r4, lr}
 8003d9c:	4604      	mov	r4, r0
 8003d9e:	e9c0 3300 	strd	r3, r3, [r0]
 8003da2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003da6:	6083      	str	r3, [r0, #8]
 8003da8:	8181      	strh	r1, [r0, #12]
 8003daa:	6643      	str	r3, [r0, #100]	@ 0x64
 8003dac:	81c2      	strh	r2, [r0, #14]
 8003dae:	6183      	str	r3, [r0, #24]
 8003db0:	4619      	mov	r1, r3
 8003db2:	2208      	movs	r2, #8
 8003db4:	305c      	adds	r0, #92	@ 0x5c
 8003db6:	f000 f928 	bl	800400a <memset>
 8003dba:	4b0d      	ldr	r3, [pc, #52]	@ (8003df0 <std+0x58>)
 8003dbc:	6224      	str	r4, [r4, #32]
 8003dbe:	6263      	str	r3, [r4, #36]	@ 0x24
 8003dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8003df4 <std+0x5c>)
 8003dc2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8003df8 <std+0x60>)
 8003dc6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003dfc <std+0x64>)
 8003dca:	6323      	str	r3, [r4, #48]	@ 0x30
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8003e00 <std+0x68>)
 8003dce:	429c      	cmp	r4, r3
 8003dd0:	d006      	beq.n	8003de0 <std+0x48>
 8003dd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003dd6:	4294      	cmp	r4, r2
 8003dd8:	d002      	beq.n	8003de0 <std+0x48>
 8003dda:	33d0      	adds	r3, #208	@ 0xd0
 8003ddc:	429c      	cmp	r4, r3
 8003dde:	d105      	bne.n	8003dec <std+0x54>
 8003de0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003de8:	f000 b9e4 	b.w	80041b4 <__retarget_lock_init_recursive>
 8003dec:	bd10      	pop	{r4, pc}
 8003dee:	bf00      	nop
 8003df0:	08003f85 	.word	0x08003f85
 8003df4:	08003fa7 	.word	0x08003fa7
 8003df8:	08003fdf 	.word	0x08003fdf
 8003dfc:	08004003 	.word	0x08004003
 8003e00:	200004d4 	.word	0x200004d4

08003e04 <stdio_exit_handler>:
 8003e04:	4a02      	ldr	r2, [pc, #8]	@ (8003e10 <stdio_exit_handler+0xc>)
 8003e06:	4903      	ldr	r1, [pc, #12]	@ (8003e14 <stdio_exit_handler+0x10>)
 8003e08:	4803      	ldr	r0, [pc, #12]	@ (8003e18 <stdio_exit_handler+0x14>)
 8003e0a:	f000 b869 	b.w	8003ee0 <_fwalk_sglue>
 8003e0e:	bf00      	nop
 8003e10:	200000a8 	.word	0x200000a8
 8003e14:	08004ac9 	.word	0x08004ac9
 8003e18:	200000b8 	.word	0x200000b8

08003e1c <cleanup_stdio>:
 8003e1c:	6841      	ldr	r1, [r0, #4]
 8003e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8003e50 <cleanup_stdio+0x34>)
 8003e20:	b510      	push	{r4, lr}
 8003e22:	4299      	cmp	r1, r3
 8003e24:	4604      	mov	r4, r0
 8003e26:	d001      	beq.n	8003e2c <cleanup_stdio+0x10>
 8003e28:	f000 fe4e 	bl	8004ac8 <_fflush_r>
 8003e2c:	68a1      	ldr	r1, [r4, #8]
 8003e2e:	4b09      	ldr	r3, [pc, #36]	@ (8003e54 <cleanup_stdio+0x38>)
 8003e30:	4299      	cmp	r1, r3
 8003e32:	d002      	beq.n	8003e3a <cleanup_stdio+0x1e>
 8003e34:	4620      	mov	r0, r4
 8003e36:	f000 fe47 	bl	8004ac8 <_fflush_r>
 8003e3a:	68e1      	ldr	r1, [r4, #12]
 8003e3c:	4b06      	ldr	r3, [pc, #24]	@ (8003e58 <cleanup_stdio+0x3c>)
 8003e3e:	4299      	cmp	r1, r3
 8003e40:	d004      	beq.n	8003e4c <cleanup_stdio+0x30>
 8003e42:	4620      	mov	r0, r4
 8003e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e48:	f000 be3e 	b.w	8004ac8 <_fflush_r>
 8003e4c:	bd10      	pop	{r4, pc}
 8003e4e:	bf00      	nop
 8003e50:	200004d4 	.word	0x200004d4
 8003e54:	2000053c 	.word	0x2000053c
 8003e58:	200005a4 	.word	0x200005a4

08003e5c <global_stdio_init.part.0>:
 8003e5c:	b510      	push	{r4, lr}
 8003e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e8c <global_stdio_init.part.0+0x30>)
 8003e60:	4c0b      	ldr	r4, [pc, #44]	@ (8003e90 <global_stdio_init.part.0+0x34>)
 8003e62:	4a0c      	ldr	r2, [pc, #48]	@ (8003e94 <global_stdio_init.part.0+0x38>)
 8003e64:	4620      	mov	r0, r4
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	2104      	movs	r1, #4
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f7ff ff94 	bl	8003d98 <std>
 8003e70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003e74:	2201      	movs	r2, #1
 8003e76:	2109      	movs	r1, #9
 8003e78:	f7ff ff8e 	bl	8003d98 <std>
 8003e7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003e80:	2202      	movs	r2, #2
 8003e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e86:	2112      	movs	r1, #18
 8003e88:	f7ff bf86 	b.w	8003d98 <std>
 8003e8c:	2000060c 	.word	0x2000060c
 8003e90:	200004d4 	.word	0x200004d4
 8003e94:	08003e05 	.word	0x08003e05

08003e98 <__sfp_lock_acquire>:
 8003e98:	4801      	ldr	r0, [pc, #4]	@ (8003ea0 <__sfp_lock_acquire+0x8>)
 8003e9a:	f000 b98c 	b.w	80041b6 <__retarget_lock_acquire_recursive>
 8003e9e:	bf00      	nop
 8003ea0:	20000615 	.word	0x20000615

08003ea4 <__sfp_lock_release>:
 8003ea4:	4801      	ldr	r0, [pc, #4]	@ (8003eac <__sfp_lock_release+0x8>)
 8003ea6:	f000 b987 	b.w	80041b8 <__retarget_lock_release_recursive>
 8003eaa:	bf00      	nop
 8003eac:	20000615 	.word	0x20000615

08003eb0 <__sinit>:
 8003eb0:	b510      	push	{r4, lr}
 8003eb2:	4604      	mov	r4, r0
 8003eb4:	f7ff fff0 	bl	8003e98 <__sfp_lock_acquire>
 8003eb8:	6a23      	ldr	r3, [r4, #32]
 8003eba:	b11b      	cbz	r3, 8003ec4 <__sinit+0x14>
 8003ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ec0:	f7ff bff0 	b.w	8003ea4 <__sfp_lock_release>
 8003ec4:	4b04      	ldr	r3, [pc, #16]	@ (8003ed8 <__sinit+0x28>)
 8003ec6:	6223      	str	r3, [r4, #32]
 8003ec8:	4b04      	ldr	r3, [pc, #16]	@ (8003edc <__sinit+0x2c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1f5      	bne.n	8003ebc <__sinit+0xc>
 8003ed0:	f7ff ffc4 	bl	8003e5c <global_stdio_init.part.0>
 8003ed4:	e7f2      	b.n	8003ebc <__sinit+0xc>
 8003ed6:	bf00      	nop
 8003ed8:	08003e1d 	.word	0x08003e1d
 8003edc:	2000060c 	.word	0x2000060c

08003ee0 <_fwalk_sglue>:
 8003ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ee4:	4607      	mov	r7, r0
 8003ee6:	4688      	mov	r8, r1
 8003ee8:	4614      	mov	r4, r2
 8003eea:	2600      	movs	r6, #0
 8003eec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ef0:	f1b9 0901 	subs.w	r9, r9, #1
 8003ef4:	d505      	bpl.n	8003f02 <_fwalk_sglue+0x22>
 8003ef6:	6824      	ldr	r4, [r4, #0]
 8003ef8:	2c00      	cmp	r4, #0
 8003efa:	d1f7      	bne.n	8003eec <_fwalk_sglue+0xc>
 8003efc:	4630      	mov	r0, r6
 8003efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f02:	89ab      	ldrh	r3, [r5, #12]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d907      	bls.n	8003f18 <_fwalk_sglue+0x38>
 8003f08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	d003      	beq.n	8003f18 <_fwalk_sglue+0x38>
 8003f10:	4629      	mov	r1, r5
 8003f12:	4638      	mov	r0, r7
 8003f14:	47c0      	blx	r8
 8003f16:	4306      	orrs	r6, r0
 8003f18:	3568      	adds	r5, #104	@ 0x68
 8003f1a:	e7e9      	b.n	8003ef0 <_fwalk_sglue+0x10>

08003f1c <sniprintf>:
 8003f1c:	b40c      	push	{r2, r3}
 8003f1e:	b530      	push	{r4, r5, lr}
 8003f20:	4b17      	ldr	r3, [pc, #92]	@ (8003f80 <sniprintf+0x64>)
 8003f22:	1e0c      	subs	r4, r1, #0
 8003f24:	681d      	ldr	r5, [r3, #0]
 8003f26:	b09d      	sub	sp, #116	@ 0x74
 8003f28:	da08      	bge.n	8003f3c <sniprintf+0x20>
 8003f2a:	238b      	movs	r3, #139	@ 0x8b
 8003f2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f30:	602b      	str	r3, [r5, #0]
 8003f32:	b01d      	add	sp, #116	@ 0x74
 8003f34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f38:	b002      	add	sp, #8
 8003f3a:	4770      	bx	lr
 8003f3c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003f40:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003f44:	bf0c      	ite	eq
 8003f46:	4623      	moveq	r3, r4
 8003f48:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8003f4c:	9304      	str	r3, [sp, #16]
 8003f4e:	9307      	str	r3, [sp, #28]
 8003f50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f54:	9002      	str	r0, [sp, #8]
 8003f56:	9006      	str	r0, [sp, #24]
 8003f58:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003f5c:	4628      	mov	r0, r5
 8003f5e:	ab21      	add	r3, sp, #132	@ 0x84
 8003f60:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003f62:	a902      	add	r1, sp, #8
 8003f64:	9301      	str	r3, [sp, #4]
 8003f66:	f000 faa1 	bl	80044ac <_svfiprintf_r>
 8003f6a:	1c43      	adds	r3, r0, #1
 8003f6c:	bfbc      	itt	lt
 8003f6e:	238b      	movlt	r3, #139	@ 0x8b
 8003f70:	602b      	strlt	r3, [r5, #0]
 8003f72:	2c00      	cmp	r4, #0
 8003f74:	d0dd      	beq.n	8003f32 <sniprintf+0x16>
 8003f76:	2200      	movs	r2, #0
 8003f78:	9b02      	ldr	r3, [sp, #8]
 8003f7a:	701a      	strb	r2, [r3, #0]
 8003f7c:	e7d9      	b.n	8003f32 <sniprintf+0x16>
 8003f7e:	bf00      	nop
 8003f80:	200000b4 	.word	0x200000b4

08003f84 <__sread>:
 8003f84:	b510      	push	{r4, lr}
 8003f86:	460c      	mov	r4, r1
 8003f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f8c:	f000 f8c4 	bl	8004118 <_read_r>
 8003f90:	2800      	cmp	r0, #0
 8003f92:	bfab      	itete	ge
 8003f94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003f96:	89a3      	ldrhlt	r3, [r4, #12]
 8003f98:	181b      	addge	r3, r3, r0
 8003f9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003f9e:	bfac      	ite	ge
 8003fa0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003fa2:	81a3      	strhlt	r3, [r4, #12]
 8003fa4:	bd10      	pop	{r4, pc}

08003fa6 <__swrite>:
 8003fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003faa:	461f      	mov	r7, r3
 8003fac:	898b      	ldrh	r3, [r1, #12]
 8003fae:	4605      	mov	r5, r0
 8003fb0:	05db      	lsls	r3, r3, #23
 8003fb2:	460c      	mov	r4, r1
 8003fb4:	4616      	mov	r6, r2
 8003fb6:	d505      	bpl.n	8003fc4 <__swrite+0x1e>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fc0:	f000 f898 	bl	80040f4 <_lseek_r>
 8003fc4:	89a3      	ldrh	r3, [r4, #12]
 8003fc6:	4632      	mov	r2, r6
 8003fc8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003fcc:	81a3      	strh	r3, [r4, #12]
 8003fce:	4628      	mov	r0, r5
 8003fd0:	463b      	mov	r3, r7
 8003fd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fda:	f000 b8af 	b.w	800413c <_write_r>

08003fde <__sseek>:
 8003fde:	b510      	push	{r4, lr}
 8003fe0:	460c      	mov	r4, r1
 8003fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fe6:	f000 f885 	bl	80040f4 <_lseek_r>
 8003fea:	1c43      	adds	r3, r0, #1
 8003fec:	89a3      	ldrh	r3, [r4, #12]
 8003fee:	bf15      	itete	ne
 8003ff0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003ff2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003ff6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003ffa:	81a3      	strheq	r3, [r4, #12]
 8003ffc:	bf18      	it	ne
 8003ffe:	81a3      	strhne	r3, [r4, #12]
 8004000:	bd10      	pop	{r4, pc}

08004002 <__sclose>:
 8004002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004006:	f000 b865 	b.w	80040d4 <_close_r>

0800400a <memset>:
 800400a:	4603      	mov	r3, r0
 800400c:	4402      	add	r2, r0
 800400e:	4293      	cmp	r3, r2
 8004010:	d100      	bne.n	8004014 <memset+0xa>
 8004012:	4770      	bx	lr
 8004014:	f803 1b01 	strb.w	r1, [r3], #1
 8004018:	e7f9      	b.n	800400e <memset+0x4>
	...

0800401c <strtok>:
 800401c:	4b16      	ldr	r3, [pc, #88]	@ (8004078 <strtok+0x5c>)
 800401e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004022:	681f      	ldr	r7, [r3, #0]
 8004024:	4605      	mov	r5, r0
 8004026:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8004028:	460e      	mov	r6, r1
 800402a:	b9ec      	cbnz	r4, 8004068 <strtok+0x4c>
 800402c:	2050      	movs	r0, #80	@ 0x50
 800402e:	f000 f92b 	bl	8004288 <malloc>
 8004032:	4602      	mov	r2, r0
 8004034:	6478      	str	r0, [r7, #68]	@ 0x44
 8004036:	b920      	cbnz	r0, 8004042 <strtok+0x26>
 8004038:	215b      	movs	r1, #91	@ 0x5b
 800403a:	4b10      	ldr	r3, [pc, #64]	@ (800407c <strtok+0x60>)
 800403c:	4810      	ldr	r0, [pc, #64]	@ (8004080 <strtok+0x64>)
 800403e:	f000 f8bd 	bl	80041bc <__assert_func>
 8004042:	e9c0 4400 	strd	r4, r4, [r0]
 8004046:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800404a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800404e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8004052:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8004056:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800405a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800405e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8004062:	6184      	str	r4, [r0, #24]
 8004064:	7704      	strb	r4, [r0, #28]
 8004066:	6244      	str	r4, [r0, #36]	@ 0x24
 8004068:	4631      	mov	r1, r6
 800406a:	4628      	mov	r0, r5
 800406c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800406e:	2301      	movs	r3, #1
 8004070:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004074:	f000 b806 	b.w	8004084 <__strtok_r>
 8004078:	200000b4 	.word	0x200000b4
 800407c:	0800547b 	.word	0x0800547b
 8004080:	08005492 	.word	0x08005492

08004084 <__strtok_r>:
 8004084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004086:	4604      	mov	r4, r0
 8004088:	b908      	cbnz	r0, 800408e <__strtok_r+0xa>
 800408a:	6814      	ldr	r4, [r2, #0]
 800408c:	b144      	cbz	r4, 80040a0 <__strtok_r+0x1c>
 800408e:	460f      	mov	r7, r1
 8004090:	4620      	mov	r0, r4
 8004092:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004096:	f817 6b01 	ldrb.w	r6, [r7], #1
 800409a:	b91e      	cbnz	r6, 80040a4 <__strtok_r+0x20>
 800409c:	b965      	cbnz	r5, 80040b8 <__strtok_r+0x34>
 800409e:	6015      	str	r5, [r2, #0]
 80040a0:	2000      	movs	r0, #0
 80040a2:	e005      	b.n	80040b0 <__strtok_r+0x2c>
 80040a4:	42b5      	cmp	r5, r6
 80040a6:	d1f6      	bne.n	8004096 <__strtok_r+0x12>
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1f0      	bne.n	800408e <__strtok_r+0xa>
 80040ac:	6014      	str	r4, [r2, #0]
 80040ae:	7003      	strb	r3, [r0, #0]
 80040b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040b2:	461c      	mov	r4, r3
 80040b4:	e00c      	b.n	80040d0 <__strtok_r+0x4c>
 80040b6:	b915      	cbnz	r5, 80040be <__strtok_r+0x3a>
 80040b8:	460e      	mov	r6, r1
 80040ba:	f814 3b01 	ldrb.w	r3, [r4], #1
 80040be:	f816 5b01 	ldrb.w	r5, [r6], #1
 80040c2:	42ab      	cmp	r3, r5
 80040c4:	d1f7      	bne.n	80040b6 <__strtok_r+0x32>
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d0f3      	beq.n	80040b2 <__strtok_r+0x2e>
 80040ca:	2300      	movs	r3, #0
 80040cc:	f804 3c01 	strb.w	r3, [r4, #-1]
 80040d0:	6014      	str	r4, [r2, #0]
 80040d2:	e7ed      	b.n	80040b0 <__strtok_r+0x2c>

080040d4 <_close_r>:
 80040d4:	b538      	push	{r3, r4, r5, lr}
 80040d6:	2300      	movs	r3, #0
 80040d8:	4d05      	ldr	r5, [pc, #20]	@ (80040f0 <_close_r+0x1c>)
 80040da:	4604      	mov	r4, r0
 80040dc:	4608      	mov	r0, r1
 80040de:	602b      	str	r3, [r5, #0]
 80040e0:	f7fc fd77 	bl	8000bd2 <_close>
 80040e4:	1c43      	adds	r3, r0, #1
 80040e6:	d102      	bne.n	80040ee <_close_r+0x1a>
 80040e8:	682b      	ldr	r3, [r5, #0]
 80040ea:	b103      	cbz	r3, 80040ee <_close_r+0x1a>
 80040ec:	6023      	str	r3, [r4, #0]
 80040ee:	bd38      	pop	{r3, r4, r5, pc}
 80040f0:	20000610 	.word	0x20000610

080040f4 <_lseek_r>:
 80040f4:	b538      	push	{r3, r4, r5, lr}
 80040f6:	4604      	mov	r4, r0
 80040f8:	4608      	mov	r0, r1
 80040fa:	4611      	mov	r1, r2
 80040fc:	2200      	movs	r2, #0
 80040fe:	4d05      	ldr	r5, [pc, #20]	@ (8004114 <_lseek_r+0x20>)
 8004100:	602a      	str	r2, [r5, #0]
 8004102:	461a      	mov	r2, r3
 8004104:	f7fc fd89 	bl	8000c1a <_lseek>
 8004108:	1c43      	adds	r3, r0, #1
 800410a:	d102      	bne.n	8004112 <_lseek_r+0x1e>
 800410c:	682b      	ldr	r3, [r5, #0]
 800410e:	b103      	cbz	r3, 8004112 <_lseek_r+0x1e>
 8004110:	6023      	str	r3, [r4, #0]
 8004112:	bd38      	pop	{r3, r4, r5, pc}
 8004114:	20000610 	.word	0x20000610

08004118 <_read_r>:
 8004118:	b538      	push	{r3, r4, r5, lr}
 800411a:	4604      	mov	r4, r0
 800411c:	4608      	mov	r0, r1
 800411e:	4611      	mov	r1, r2
 8004120:	2200      	movs	r2, #0
 8004122:	4d05      	ldr	r5, [pc, #20]	@ (8004138 <_read_r+0x20>)
 8004124:	602a      	str	r2, [r5, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	f7fc fd1a 	bl	8000b60 <_read>
 800412c:	1c43      	adds	r3, r0, #1
 800412e:	d102      	bne.n	8004136 <_read_r+0x1e>
 8004130:	682b      	ldr	r3, [r5, #0]
 8004132:	b103      	cbz	r3, 8004136 <_read_r+0x1e>
 8004134:	6023      	str	r3, [r4, #0]
 8004136:	bd38      	pop	{r3, r4, r5, pc}
 8004138:	20000610 	.word	0x20000610

0800413c <_write_r>:
 800413c:	b538      	push	{r3, r4, r5, lr}
 800413e:	4604      	mov	r4, r0
 8004140:	4608      	mov	r0, r1
 8004142:	4611      	mov	r1, r2
 8004144:	2200      	movs	r2, #0
 8004146:	4d05      	ldr	r5, [pc, #20]	@ (800415c <_write_r+0x20>)
 8004148:	602a      	str	r2, [r5, #0]
 800414a:	461a      	mov	r2, r3
 800414c:	f7fc fd25 	bl	8000b9a <_write>
 8004150:	1c43      	adds	r3, r0, #1
 8004152:	d102      	bne.n	800415a <_write_r+0x1e>
 8004154:	682b      	ldr	r3, [r5, #0]
 8004156:	b103      	cbz	r3, 800415a <_write_r+0x1e>
 8004158:	6023      	str	r3, [r4, #0]
 800415a:	bd38      	pop	{r3, r4, r5, pc}
 800415c:	20000610 	.word	0x20000610

08004160 <__errno>:
 8004160:	4b01      	ldr	r3, [pc, #4]	@ (8004168 <__errno+0x8>)
 8004162:	6818      	ldr	r0, [r3, #0]
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	200000b4 	.word	0x200000b4

0800416c <__libc_init_array>:
 800416c:	b570      	push	{r4, r5, r6, lr}
 800416e:	2600      	movs	r6, #0
 8004170:	4d0c      	ldr	r5, [pc, #48]	@ (80041a4 <__libc_init_array+0x38>)
 8004172:	4c0d      	ldr	r4, [pc, #52]	@ (80041a8 <__libc_init_array+0x3c>)
 8004174:	1b64      	subs	r4, r4, r5
 8004176:	10a4      	asrs	r4, r4, #2
 8004178:	42a6      	cmp	r6, r4
 800417a:	d109      	bne.n	8004190 <__libc_init_array+0x24>
 800417c:	f000 fffc 	bl	8005178 <_init>
 8004180:	2600      	movs	r6, #0
 8004182:	4d0a      	ldr	r5, [pc, #40]	@ (80041ac <__libc_init_array+0x40>)
 8004184:	4c0a      	ldr	r4, [pc, #40]	@ (80041b0 <__libc_init_array+0x44>)
 8004186:	1b64      	subs	r4, r4, r5
 8004188:	10a4      	asrs	r4, r4, #2
 800418a:	42a6      	cmp	r6, r4
 800418c:	d105      	bne.n	800419a <__libc_init_array+0x2e>
 800418e:	bd70      	pop	{r4, r5, r6, pc}
 8004190:	f855 3b04 	ldr.w	r3, [r5], #4
 8004194:	4798      	blx	r3
 8004196:	3601      	adds	r6, #1
 8004198:	e7ee      	b.n	8004178 <__libc_init_array+0xc>
 800419a:	f855 3b04 	ldr.w	r3, [r5], #4
 800419e:	4798      	blx	r3
 80041a0:	3601      	adds	r6, #1
 80041a2:	e7f2      	b.n	800418a <__libc_init_array+0x1e>
 80041a4:	08005564 	.word	0x08005564
 80041a8:	08005564 	.word	0x08005564
 80041ac:	08005564 	.word	0x08005564
 80041b0:	08005568 	.word	0x08005568

080041b4 <__retarget_lock_init_recursive>:
 80041b4:	4770      	bx	lr

080041b6 <__retarget_lock_acquire_recursive>:
 80041b6:	4770      	bx	lr

080041b8 <__retarget_lock_release_recursive>:
 80041b8:	4770      	bx	lr
	...

080041bc <__assert_func>:
 80041bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80041be:	4614      	mov	r4, r2
 80041c0:	461a      	mov	r2, r3
 80041c2:	4b09      	ldr	r3, [pc, #36]	@ (80041e8 <__assert_func+0x2c>)
 80041c4:	4605      	mov	r5, r0
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68d8      	ldr	r0, [r3, #12]
 80041ca:	b954      	cbnz	r4, 80041e2 <__assert_func+0x26>
 80041cc:	4b07      	ldr	r3, [pc, #28]	@ (80041ec <__assert_func+0x30>)
 80041ce:	461c      	mov	r4, r3
 80041d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80041d4:	9100      	str	r1, [sp, #0]
 80041d6:	462b      	mov	r3, r5
 80041d8:	4905      	ldr	r1, [pc, #20]	@ (80041f0 <__assert_func+0x34>)
 80041da:	f000 fc9d 	bl	8004b18 <fiprintf>
 80041de:	f000 fcf3 	bl	8004bc8 <abort>
 80041e2:	4b04      	ldr	r3, [pc, #16]	@ (80041f4 <__assert_func+0x38>)
 80041e4:	e7f4      	b.n	80041d0 <__assert_func+0x14>
 80041e6:	bf00      	nop
 80041e8:	200000b4 	.word	0x200000b4
 80041ec:	08005527 	.word	0x08005527
 80041f0:	080054f9 	.word	0x080054f9
 80041f4:	080054ec 	.word	0x080054ec

080041f8 <_free_r>:
 80041f8:	b538      	push	{r3, r4, r5, lr}
 80041fa:	4605      	mov	r5, r0
 80041fc:	2900      	cmp	r1, #0
 80041fe:	d040      	beq.n	8004282 <_free_r+0x8a>
 8004200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004204:	1f0c      	subs	r4, r1, #4
 8004206:	2b00      	cmp	r3, #0
 8004208:	bfb8      	it	lt
 800420a:	18e4      	addlt	r4, r4, r3
 800420c:	f000 f8e6 	bl	80043dc <__malloc_lock>
 8004210:	4a1c      	ldr	r2, [pc, #112]	@ (8004284 <_free_r+0x8c>)
 8004212:	6813      	ldr	r3, [r2, #0]
 8004214:	b933      	cbnz	r3, 8004224 <_free_r+0x2c>
 8004216:	6063      	str	r3, [r4, #4]
 8004218:	6014      	str	r4, [r2, #0]
 800421a:	4628      	mov	r0, r5
 800421c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004220:	f000 b8e2 	b.w	80043e8 <__malloc_unlock>
 8004224:	42a3      	cmp	r3, r4
 8004226:	d908      	bls.n	800423a <_free_r+0x42>
 8004228:	6820      	ldr	r0, [r4, #0]
 800422a:	1821      	adds	r1, r4, r0
 800422c:	428b      	cmp	r3, r1
 800422e:	bf01      	itttt	eq
 8004230:	6819      	ldreq	r1, [r3, #0]
 8004232:	685b      	ldreq	r3, [r3, #4]
 8004234:	1809      	addeq	r1, r1, r0
 8004236:	6021      	streq	r1, [r4, #0]
 8004238:	e7ed      	b.n	8004216 <_free_r+0x1e>
 800423a:	461a      	mov	r2, r3
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	b10b      	cbz	r3, 8004244 <_free_r+0x4c>
 8004240:	42a3      	cmp	r3, r4
 8004242:	d9fa      	bls.n	800423a <_free_r+0x42>
 8004244:	6811      	ldr	r1, [r2, #0]
 8004246:	1850      	adds	r0, r2, r1
 8004248:	42a0      	cmp	r0, r4
 800424a:	d10b      	bne.n	8004264 <_free_r+0x6c>
 800424c:	6820      	ldr	r0, [r4, #0]
 800424e:	4401      	add	r1, r0
 8004250:	1850      	adds	r0, r2, r1
 8004252:	4283      	cmp	r3, r0
 8004254:	6011      	str	r1, [r2, #0]
 8004256:	d1e0      	bne.n	800421a <_free_r+0x22>
 8004258:	6818      	ldr	r0, [r3, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	4408      	add	r0, r1
 800425e:	6010      	str	r0, [r2, #0]
 8004260:	6053      	str	r3, [r2, #4]
 8004262:	e7da      	b.n	800421a <_free_r+0x22>
 8004264:	d902      	bls.n	800426c <_free_r+0x74>
 8004266:	230c      	movs	r3, #12
 8004268:	602b      	str	r3, [r5, #0]
 800426a:	e7d6      	b.n	800421a <_free_r+0x22>
 800426c:	6820      	ldr	r0, [r4, #0]
 800426e:	1821      	adds	r1, r4, r0
 8004270:	428b      	cmp	r3, r1
 8004272:	bf01      	itttt	eq
 8004274:	6819      	ldreq	r1, [r3, #0]
 8004276:	685b      	ldreq	r3, [r3, #4]
 8004278:	1809      	addeq	r1, r1, r0
 800427a:	6021      	streq	r1, [r4, #0]
 800427c:	6063      	str	r3, [r4, #4]
 800427e:	6054      	str	r4, [r2, #4]
 8004280:	e7cb      	b.n	800421a <_free_r+0x22>
 8004282:	bd38      	pop	{r3, r4, r5, pc}
 8004284:	2000061c 	.word	0x2000061c

08004288 <malloc>:
 8004288:	4b02      	ldr	r3, [pc, #8]	@ (8004294 <malloc+0xc>)
 800428a:	4601      	mov	r1, r0
 800428c:	6818      	ldr	r0, [r3, #0]
 800428e:	f000 b825 	b.w	80042dc <_malloc_r>
 8004292:	bf00      	nop
 8004294:	200000b4 	.word	0x200000b4

08004298 <sbrk_aligned>:
 8004298:	b570      	push	{r4, r5, r6, lr}
 800429a:	4e0f      	ldr	r6, [pc, #60]	@ (80042d8 <sbrk_aligned+0x40>)
 800429c:	460c      	mov	r4, r1
 800429e:	6831      	ldr	r1, [r6, #0]
 80042a0:	4605      	mov	r5, r0
 80042a2:	b911      	cbnz	r1, 80042aa <sbrk_aligned+0x12>
 80042a4:	f000 fc64 	bl	8004b70 <_sbrk_r>
 80042a8:	6030      	str	r0, [r6, #0]
 80042aa:	4621      	mov	r1, r4
 80042ac:	4628      	mov	r0, r5
 80042ae:	f000 fc5f 	bl	8004b70 <_sbrk_r>
 80042b2:	1c43      	adds	r3, r0, #1
 80042b4:	d103      	bne.n	80042be <sbrk_aligned+0x26>
 80042b6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80042ba:	4620      	mov	r0, r4
 80042bc:	bd70      	pop	{r4, r5, r6, pc}
 80042be:	1cc4      	adds	r4, r0, #3
 80042c0:	f024 0403 	bic.w	r4, r4, #3
 80042c4:	42a0      	cmp	r0, r4
 80042c6:	d0f8      	beq.n	80042ba <sbrk_aligned+0x22>
 80042c8:	1a21      	subs	r1, r4, r0
 80042ca:	4628      	mov	r0, r5
 80042cc:	f000 fc50 	bl	8004b70 <_sbrk_r>
 80042d0:	3001      	adds	r0, #1
 80042d2:	d1f2      	bne.n	80042ba <sbrk_aligned+0x22>
 80042d4:	e7ef      	b.n	80042b6 <sbrk_aligned+0x1e>
 80042d6:	bf00      	nop
 80042d8:	20000618 	.word	0x20000618

080042dc <_malloc_r>:
 80042dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042e0:	1ccd      	adds	r5, r1, #3
 80042e2:	f025 0503 	bic.w	r5, r5, #3
 80042e6:	3508      	adds	r5, #8
 80042e8:	2d0c      	cmp	r5, #12
 80042ea:	bf38      	it	cc
 80042ec:	250c      	movcc	r5, #12
 80042ee:	2d00      	cmp	r5, #0
 80042f0:	4606      	mov	r6, r0
 80042f2:	db01      	blt.n	80042f8 <_malloc_r+0x1c>
 80042f4:	42a9      	cmp	r1, r5
 80042f6:	d904      	bls.n	8004302 <_malloc_r+0x26>
 80042f8:	230c      	movs	r3, #12
 80042fa:	6033      	str	r3, [r6, #0]
 80042fc:	2000      	movs	r0, #0
 80042fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004302:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80043d8 <_malloc_r+0xfc>
 8004306:	f000 f869 	bl	80043dc <__malloc_lock>
 800430a:	f8d8 3000 	ldr.w	r3, [r8]
 800430e:	461c      	mov	r4, r3
 8004310:	bb44      	cbnz	r4, 8004364 <_malloc_r+0x88>
 8004312:	4629      	mov	r1, r5
 8004314:	4630      	mov	r0, r6
 8004316:	f7ff ffbf 	bl	8004298 <sbrk_aligned>
 800431a:	1c43      	adds	r3, r0, #1
 800431c:	4604      	mov	r4, r0
 800431e:	d158      	bne.n	80043d2 <_malloc_r+0xf6>
 8004320:	f8d8 4000 	ldr.w	r4, [r8]
 8004324:	4627      	mov	r7, r4
 8004326:	2f00      	cmp	r7, #0
 8004328:	d143      	bne.n	80043b2 <_malloc_r+0xd6>
 800432a:	2c00      	cmp	r4, #0
 800432c:	d04b      	beq.n	80043c6 <_malloc_r+0xea>
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	4639      	mov	r1, r7
 8004332:	4630      	mov	r0, r6
 8004334:	eb04 0903 	add.w	r9, r4, r3
 8004338:	f000 fc1a 	bl	8004b70 <_sbrk_r>
 800433c:	4581      	cmp	r9, r0
 800433e:	d142      	bne.n	80043c6 <_malloc_r+0xea>
 8004340:	6821      	ldr	r1, [r4, #0]
 8004342:	4630      	mov	r0, r6
 8004344:	1a6d      	subs	r5, r5, r1
 8004346:	4629      	mov	r1, r5
 8004348:	f7ff ffa6 	bl	8004298 <sbrk_aligned>
 800434c:	3001      	adds	r0, #1
 800434e:	d03a      	beq.n	80043c6 <_malloc_r+0xea>
 8004350:	6823      	ldr	r3, [r4, #0]
 8004352:	442b      	add	r3, r5
 8004354:	6023      	str	r3, [r4, #0]
 8004356:	f8d8 3000 	ldr.w	r3, [r8]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	bb62      	cbnz	r2, 80043b8 <_malloc_r+0xdc>
 800435e:	f8c8 7000 	str.w	r7, [r8]
 8004362:	e00f      	b.n	8004384 <_malloc_r+0xa8>
 8004364:	6822      	ldr	r2, [r4, #0]
 8004366:	1b52      	subs	r2, r2, r5
 8004368:	d420      	bmi.n	80043ac <_malloc_r+0xd0>
 800436a:	2a0b      	cmp	r2, #11
 800436c:	d917      	bls.n	800439e <_malloc_r+0xc2>
 800436e:	1961      	adds	r1, r4, r5
 8004370:	42a3      	cmp	r3, r4
 8004372:	6025      	str	r5, [r4, #0]
 8004374:	bf18      	it	ne
 8004376:	6059      	strne	r1, [r3, #4]
 8004378:	6863      	ldr	r3, [r4, #4]
 800437a:	bf08      	it	eq
 800437c:	f8c8 1000 	streq.w	r1, [r8]
 8004380:	5162      	str	r2, [r4, r5]
 8004382:	604b      	str	r3, [r1, #4]
 8004384:	4630      	mov	r0, r6
 8004386:	f000 f82f 	bl	80043e8 <__malloc_unlock>
 800438a:	f104 000b 	add.w	r0, r4, #11
 800438e:	1d23      	adds	r3, r4, #4
 8004390:	f020 0007 	bic.w	r0, r0, #7
 8004394:	1ac2      	subs	r2, r0, r3
 8004396:	bf1c      	itt	ne
 8004398:	1a1b      	subne	r3, r3, r0
 800439a:	50a3      	strne	r3, [r4, r2]
 800439c:	e7af      	b.n	80042fe <_malloc_r+0x22>
 800439e:	6862      	ldr	r2, [r4, #4]
 80043a0:	42a3      	cmp	r3, r4
 80043a2:	bf0c      	ite	eq
 80043a4:	f8c8 2000 	streq.w	r2, [r8]
 80043a8:	605a      	strne	r2, [r3, #4]
 80043aa:	e7eb      	b.n	8004384 <_malloc_r+0xa8>
 80043ac:	4623      	mov	r3, r4
 80043ae:	6864      	ldr	r4, [r4, #4]
 80043b0:	e7ae      	b.n	8004310 <_malloc_r+0x34>
 80043b2:	463c      	mov	r4, r7
 80043b4:	687f      	ldr	r7, [r7, #4]
 80043b6:	e7b6      	b.n	8004326 <_malloc_r+0x4a>
 80043b8:	461a      	mov	r2, r3
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	42a3      	cmp	r3, r4
 80043be:	d1fb      	bne.n	80043b8 <_malloc_r+0xdc>
 80043c0:	2300      	movs	r3, #0
 80043c2:	6053      	str	r3, [r2, #4]
 80043c4:	e7de      	b.n	8004384 <_malloc_r+0xa8>
 80043c6:	230c      	movs	r3, #12
 80043c8:	4630      	mov	r0, r6
 80043ca:	6033      	str	r3, [r6, #0]
 80043cc:	f000 f80c 	bl	80043e8 <__malloc_unlock>
 80043d0:	e794      	b.n	80042fc <_malloc_r+0x20>
 80043d2:	6005      	str	r5, [r0, #0]
 80043d4:	e7d6      	b.n	8004384 <_malloc_r+0xa8>
 80043d6:	bf00      	nop
 80043d8:	2000061c 	.word	0x2000061c

080043dc <__malloc_lock>:
 80043dc:	4801      	ldr	r0, [pc, #4]	@ (80043e4 <__malloc_lock+0x8>)
 80043de:	f7ff beea 	b.w	80041b6 <__retarget_lock_acquire_recursive>
 80043e2:	bf00      	nop
 80043e4:	20000614 	.word	0x20000614

080043e8 <__malloc_unlock>:
 80043e8:	4801      	ldr	r0, [pc, #4]	@ (80043f0 <__malloc_unlock+0x8>)
 80043ea:	f7ff bee5 	b.w	80041b8 <__retarget_lock_release_recursive>
 80043ee:	bf00      	nop
 80043f0:	20000614 	.word	0x20000614

080043f4 <__ssputs_r>:
 80043f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043f8:	461f      	mov	r7, r3
 80043fa:	688e      	ldr	r6, [r1, #8]
 80043fc:	4682      	mov	sl, r0
 80043fe:	42be      	cmp	r6, r7
 8004400:	460c      	mov	r4, r1
 8004402:	4690      	mov	r8, r2
 8004404:	680b      	ldr	r3, [r1, #0]
 8004406:	d82d      	bhi.n	8004464 <__ssputs_r+0x70>
 8004408:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800440c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004410:	d026      	beq.n	8004460 <__ssputs_r+0x6c>
 8004412:	6965      	ldr	r5, [r4, #20]
 8004414:	6909      	ldr	r1, [r1, #16]
 8004416:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800441a:	eba3 0901 	sub.w	r9, r3, r1
 800441e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004422:	1c7b      	adds	r3, r7, #1
 8004424:	444b      	add	r3, r9
 8004426:	106d      	asrs	r5, r5, #1
 8004428:	429d      	cmp	r5, r3
 800442a:	bf38      	it	cc
 800442c:	461d      	movcc	r5, r3
 800442e:	0553      	lsls	r3, r2, #21
 8004430:	d527      	bpl.n	8004482 <__ssputs_r+0x8e>
 8004432:	4629      	mov	r1, r5
 8004434:	f7ff ff52 	bl	80042dc <_malloc_r>
 8004438:	4606      	mov	r6, r0
 800443a:	b360      	cbz	r0, 8004496 <__ssputs_r+0xa2>
 800443c:	464a      	mov	r2, r9
 800443e:	6921      	ldr	r1, [r4, #16]
 8004440:	f000 fbb4 	bl	8004bac <memcpy>
 8004444:	89a3      	ldrh	r3, [r4, #12]
 8004446:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800444a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800444e:	81a3      	strh	r3, [r4, #12]
 8004450:	6126      	str	r6, [r4, #16]
 8004452:	444e      	add	r6, r9
 8004454:	6026      	str	r6, [r4, #0]
 8004456:	463e      	mov	r6, r7
 8004458:	6165      	str	r5, [r4, #20]
 800445a:	eba5 0509 	sub.w	r5, r5, r9
 800445e:	60a5      	str	r5, [r4, #8]
 8004460:	42be      	cmp	r6, r7
 8004462:	d900      	bls.n	8004466 <__ssputs_r+0x72>
 8004464:	463e      	mov	r6, r7
 8004466:	4632      	mov	r2, r6
 8004468:	4641      	mov	r1, r8
 800446a:	6820      	ldr	r0, [r4, #0]
 800446c:	f000 fb66 	bl	8004b3c <memmove>
 8004470:	2000      	movs	r0, #0
 8004472:	68a3      	ldr	r3, [r4, #8]
 8004474:	1b9b      	subs	r3, r3, r6
 8004476:	60a3      	str	r3, [r4, #8]
 8004478:	6823      	ldr	r3, [r4, #0]
 800447a:	4433      	add	r3, r6
 800447c:	6023      	str	r3, [r4, #0]
 800447e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004482:	462a      	mov	r2, r5
 8004484:	f000 fba7 	bl	8004bd6 <_realloc_r>
 8004488:	4606      	mov	r6, r0
 800448a:	2800      	cmp	r0, #0
 800448c:	d1e0      	bne.n	8004450 <__ssputs_r+0x5c>
 800448e:	4650      	mov	r0, sl
 8004490:	6921      	ldr	r1, [r4, #16]
 8004492:	f7ff feb1 	bl	80041f8 <_free_r>
 8004496:	230c      	movs	r3, #12
 8004498:	f8ca 3000 	str.w	r3, [sl]
 800449c:	89a3      	ldrh	r3, [r4, #12]
 800449e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80044a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044a6:	81a3      	strh	r3, [r4, #12]
 80044a8:	e7e9      	b.n	800447e <__ssputs_r+0x8a>
	...

080044ac <_svfiprintf_r>:
 80044ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b0:	4698      	mov	r8, r3
 80044b2:	898b      	ldrh	r3, [r1, #12]
 80044b4:	4607      	mov	r7, r0
 80044b6:	061b      	lsls	r3, r3, #24
 80044b8:	460d      	mov	r5, r1
 80044ba:	4614      	mov	r4, r2
 80044bc:	b09d      	sub	sp, #116	@ 0x74
 80044be:	d510      	bpl.n	80044e2 <_svfiprintf_r+0x36>
 80044c0:	690b      	ldr	r3, [r1, #16]
 80044c2:	b973      	cbnz	r3, 80044e2 <_svfiprintf_r+0x36>
 80044c4:	2140      	movs	r1, #64	@ 0x40
 80044c6:	f7ff ff09 	bl	80042dc <_malloc_r>
 80044ca:	6028      	str	r0, [r5, #0]
 80044cc:	6128      	str	r0, [r5, #16]
 80044ce:	b930      	cbnz	r0, 80044de <_svfiprintf_r+0x32>
 80044d0:	230c      	movs	r3, #12
 80044d2:	603b      	str	r3, [r7, #0]
 80044d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80044d8:	b01d      	add	sp, #116	@ 0x74
 80044da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044de:	2340      	movs	r3, #64	@ 0x40
 80044e0:	616b      	str	r3, [r5, #20]
 80044e2:	2300      	movs	r3, #0
 80044e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80044e6:	2320      	movs	r3, #32
 80044e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80044ec:	2330      	movs	r3, #48	@ 0x30
 80044ee:	f04f 0901 	mov.w	r9, #1
 80044f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80044f6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004690 <_svfiprintf_r+0x1e4>
 80044fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80044fe:	4623      	mov	r3, r4
 8004500:	469a      	mov	sl, r3
 8004502:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004506:	b10a      	cbz	r2, 800450c <_svfiprintf_r+0x60>
 8004508:	2a25      	cmp	r2, #37	@ 0x25
 800450a:	d1f9      	bne.n	8004500 <_svfiprintf_r+0x54>
 800450c:	ebba 0b04 	subs.w	fp, sl, r4
 8004510:	d00b      	beq.n	800452a <_svfiprintf_r+0x7e>
 8004512:	465b      	mov	r3, fp
 8004514:	4622      	mov	r2, r4
 8004516:	4629      	mov	r1, r5
 8004518:	4638      	mov	r0, r7
 800451a:	f7ff ff6b 	bl	80043f4 <__ssputs_r>
 800451e:	3001      	adds	r0, #1
 8004520:	f000 80a7 	beq.w	8004672 <_svfiprintf_r+0x1c6>
 8004524:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004526:	445a      	add	r2, fp
 8004528:	9209      	str	r2, [sp, #36]	@ 0x24
 800452a:	f89a 3000 	ldrb.w	r3, [sl]
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 809f 	beq.w	8004672 <_svfiprintf_r+0x1c6>
 8004534:	2300      	movs	r3, #0
 8004536:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800453a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800453e:	f10a 0a01 	add.w	sl, sl, #1
 8004542:	9304      	str	r3, [sp, #16]
 8004544:	9307      	str	r3, [sp, #28]
 8004546:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800454a:	931a      	str	r3, [sp, #104]	@ 0x68
 800454c:	4654      	mov	r4, sl
 800454e:	2205      	movs	r2, #5
 8004550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004554:	484e      	ldr	r0, [pc, #312]	@ (8004690 <_svfiprintf_r+0x1e4>)
 8004556:	f000 fb1b 	bl	8004b90 <memchr>
 800455a:	9a04      	ldr	r2, [sp, #16]
 800455c:	b9d8      	cbnz	r0, 8004596 <_svfiprintf_r+0xea>
 800455e:	06d0      	lsls	r0, r2, #27
 8004560:	bf44      	itt	mi
 8004562:	2320      	movmi	r3, #32
 8004564:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004568:	0711      	lsls	r1, r2, #28
 800456a:	bf44      	itt	mi
 800456c:	232b      	movmi	r3, #43	@ 0x2b
 800456e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004572:	f89a 3000 	ldrb.w	r3, [sl]
 8004576:	2b2a      	cmp	r3, #42	@ 0x2a
 8004578:	d015      	beq.n	80045a6 <_svfiprintf_r+0xfa>
 800457a:	4654      	mov	r4, sl
 800457c:	2000      	movs	r0, #0
 800457e:	f04f 0c0a 	mov.w	ip, #10
 8004582:	9a07      	ldr	r2, [sp, #28]
 8004584:	4621      	mov	r1, r4
 8004586:	f811 3b01 	ldrb.w	r3, [r1], #1
 800458a:	3b30      	subs	r3, #48	@ 0x30
 800458c:	2b09      	cmp	r3, #9
 800458e:	d94b      	bls.n	8004628 <_svfiprintf_r+0x17c>
 8004590:	b1b0      	cbz	r0, 80045c0 <_svfiprintf_r+0x114>
 8004592:	9207      	str	r2, [sp, #28]
 8004594:	e014      	b.n	80045c0 <_svfiprintf_r+0x114>
 8004596:	eba0 0308 	sub.w	r3, r0, r8
 800459a:	fa09 f303 	lsl.w	r3, r9, r3
 800459e:	4313      	orrs	r3, r2
 80045a0:	46a2      	mov	sl, r4
 80045a2:	9304      	str	r3, [sp, #16]
 80045a4:	e7d2      	b.n	800454c <_svfiprintf_r+0xa0>
 80045a6:	9b03      	ldr	r3, [sp, #12]
 80045a8:	1d19      	adds	r1, r3, #4
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	9103      	str	r1, [sp, #12]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	bfbb      	ittet	lt
 80045b2:	425b      	neglt	r3, r3
 80045b4:	f042 0202 	orrlt.w	r2, r2, #2
 80045b8:	9307      	strge	r3, [sp, #28]
 80045ba:	9307      	strlt	r3, [sp, #28]
 80045bc:	bfb8      	it	lt
 80045be:	9204      	strlt	r2, [sp, #16]
 80045c0:	7823      	ldrb	r3, [r4, #0]
 80045c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80045c4:	d10a      	bne.n	80045dc <_svfiprintf_r+0x130>
 80045c6:	7863      	ldrb	r3, [r4, #1]
 80045c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80045ca:	d132      	bne.n	8004632 <_svfiprintf_r+0x186>
 80045cc:	9b03      	ldr	r3, [sp, #12]
 80045ce:	3402      	adds	r4, #2
 80045d0:	1d1a      	adds	r2, r3, #4
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	9203      	str	r2, [sp, #12]
 80045d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80045da:	9305      	str	r3, [sp, #20]
 80045dc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004694 <_svfiprintf_r+0x1e8>
 80045e0:	2203      	movs	r2, #3
 80045e2:	4650      	mov	r0, sl
 80045e4:	7821      	ldrb	r1, [r4, #0]
 80045e6:	f000 fad3 	bl	8004b90 <memchr>
 80045ea:	b138      	cbz	r0, 80045fc <_svfiprintf_r+0x150>
 80045ec:	2240      	movs	r2, #64	@ 0x40
 80045ee:	9b04      	ldr	r3, [sp, #16]
 80045f0:	eba0 000a 	sub.w	r0, r0, sl
 80045f4:	4082      	lsls	r2, r0
 80045f6:	4313      	orrs	r3, r2
 80045f8:	3401      	adds	r4, #1
 80045fa:	9304      	str	r3, [sp, #16]
 80045fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004600:	2206      	movs	r2, #6
 8004602:	4825      	ldr	r0, [pc, #148]	@ (8004698 <_svfiprintf_r+0x1ec>)
 8004604:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004608:	f000 fac2 	bl	8004b90 <memchr>
 800460c:	2800      	cmp	r0, #0
 800460e:	d036      	beq.n	800467e <_svfiprintf_r+0x1d2>
 8004610:	4b22      	ldr	r3, [pc, #136]	@ (800469c <_svfiprintf_r+0x1f0>)
 8004612:	bb1b      	cbnz	r3, 800465c <_svfiprintf_r+0x1b0>
 8004614:	9b03      	ldr	r3, [sp, #12]
 8004616:	3307      	adds	r3, #7
 8004618:	f023 0307 	bic.w	r3, r3, #7
 800461c:	3308      	adds	r3, #8
 800461e:	9303      	str	r3, [sp, #12]
 8004620:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004622:	4433      	add	r3, r6
 8004624:	9309      	str	r3, [sp, #36]	@ 0x24
 8004626:	e76a      	b.n	80044fe <_svfiprintf_r+0x52>
 8004628:	460c      	mov	r4, r1
 800462a:	2001      	movs	r0, #1
 800462c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004630:	e7a8      	b.n	8004584 <_svfiprintf_r+0xd8>
 8004632:	2300      	movs	r3, #0
 8004634:	f04f 0c0a 	mov.w	ip, #10
 8004638:	4619      	mov	r1, r3
 800463a:	3401      	adds	r4, #1
 800463c:	9305      	str	r3, [sp, #20]
 800463e:	4620      	mov	r0, r4
 8004640:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004644:	3a30      	subs	r2, #48	@ 0x30
 8004646:	2a09      	cmp	r2, #9
 8004648:	d903      	bls.n	8004652 <_svfiprintf_r+0x1a6>
 800464a:	2b00      	cmp	r3, #0
 800464c:	d0c6      	beq.n	80045dc <_svfiprintf_r+0x130>
 800464e:	9105      	str	r1, [sp, #20]
 8004650:	e7c4      	b.n	80045dc <_svfiprintf_r+0x130>
 8004652:	4604      	mov	r4, r0
 8004654:	2301      	movs	r3, #1
 8004656:	fb0c 2101 	mla	r1, ip, r1, r2
 800465a:	e7f0      	b.n	800463e <_svfiprintf_r+0x192>
 800465c:	ab03      	add	r3, sp, #12
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	462a      	mov	r2, r5
 8004662:	4638      	mov	r0, r7
 8004664:	4b0e      	ldr	r3, [pc, #56]	@ (80046a0 <_svfiprintf_r+0x1f4>)
 8004666:	a904      	add	r1, sp, #16
 8004668:	f3af 8000 	nop.w
 800466c:	1c42      	adds	r2, r0, #1
 800466e:	4606      	mov	r6, r0
 8004670:	d1d6      	bne.n	8004620 <_svfiprintf_r+0x174>
 8004672:	89ab      	ldrh	r3, [r5, #12]
 8004674:	065b      	lsls	r3, r3, #25
 8004676:	f53f af2d 	bmi.w	80044d4 <_svfiprintf_r+0x28>
 800467a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800467c:	e72c      	b.n	80044d8 <_svfiprintf_r+0x2c>
 800467e:	ab03      	add	r3, sp, #12
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	462a      	mov	r2, r5
 8004684:	4638      	mov	r0, r7
 8004686:	4b06      	ldr	r3, [pc, #24]	@ (80046a0 <_svfiprintf_r+0x1f4>)
 8004688:	a904      	add	r1, sp, #16
 800468a:	f000 f87d 	bl	8004788 <_printf_i>
 800468e:	e7ed      	b.n	800466c <_svfiprintf_r+0x1c0>
 8004690:	08005528 	.word	0x08005528
 8004694:	0800552e 	.word	0x0800552e
 8004698:	08005532 	.word	0x08005532
 800469c:	00000000 	.word	0x00000000
 80046a0:	080043f5 	.word	0x080043f5

080046a4 <_printf_common>:
 80046a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046a8:	4616      	mov	r6, r2
 80046aa:	4698      	mov	r8, r3
 80046ac:	688a      	ldr	r2, [r1, #8]
 80046ae:	690b      	ldr	r3, [r1, #16]
 80046b0:	4607      	mov	r7, r0
 80046b2:	4293      	cmp	r3, r2
 80046b4:	bfb8      	it	lt
 80046b6:	4613      	movlt	r3, r2
 80046b8:	6033      	str	r3, [r6, #0]
 80046ba:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80046be:	460c      	mov	r4, r1
 80046c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80046c4:	b10a      	cbz	r2, 80046ca <_printf_common+0x26>
 80046c6:	3301      	adds	r3, #1
 80046c8:	6033      	str	r3, [r6, #0]
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	0699      	lsls	r1, r3, #26
 80046ce:	bf42      	ittt	mi
 80046d0:	6833      	ldrmi	r3, [r6, #0]
 80046d2:	3302      	addmi	r3, #2
 80046d4:	6033      	strmi	r3, [r6, #0]
 80046d6:	6825      	ldr	r5, [r4, #0]
 80046d8:	f015 0506 	ands.w	r5, r5, #6
 80046dc:	d106      	bne.n	80046ec <_printf_common+0x48>
 80046de:	f104 0a19 	add.w	sl, r4, #25
 80046e2:	68e3      	ldr	r3, [r4, #12]
 80046e4:	6832      	ldr	r2, [r6, #0]
 80046e6:	1a9b      	subs	r3, r3, r2
 80046e8:	42ab      	cmp	r3, r5
 80046ea:	dc2b      	bgt.n	8004744 <_printf_common+0xa0>
 80046ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80046f0:	6822      	ldr	r2, [r4, #0]
 80046f2:	3b00      	subs	r3, #0
 80046f4:	bf18      	it	ne
 80046f6:	2301      	movne	r3, #1
 80046f8:	0692      	lsls	r2, r2, #26
 80046fa:	d430      	bmi.n	800475e <_printf_common+0xba>
 80046fc:	4641      	mov	r1, r8
 80046fe:	4638      	mov	r0, r7
 8004700:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004704:	47c8      	blx	r9
 8004706:	3001      	adds	r0, #1
 8004708:	d023      	beq.n	8004752 <_printf_common+0xae>
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	6922      	ldr	r2, [r4, #16]
 800470e:	f003 0306 	and.w	r3, r3, #6
 8004712:	2b04      	cmp	r3, #4
 8004714:	bf14      	ite	ne
 8004716:	2500      	movne	r5, #0
 8004718:	6833      	ldreq	r3, [r6, #0]
 800471a:	f04f 0600 	mov.w	r6, #0
 800471e:	bf08      	it	eq
 8004720:	68e5      	ldreq	r5, [r4, #12]
 8004722:	f104 041a 	add.w	r4, r4, #26
 8004726:	bf08      	it	eq
 8004728:	1aed      	subeq	r5, r5, r3
 800472a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800472e:	bf08      	it	eq
 8004730:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004734:	4293      	cmp	r3, r2
 8004736:	bfc4      	itt	gt
 8004738:	1a9b      	subgt	r3, r3, r2
 800473a:	18ed      	addgt	r5, r5, r3
 800473c:	42b5      	cmp	r5, r6
 800473e:	d11a      	bne.n	8004776 <_printf_common+0xd2>
 8004740:	2000      	movs	r0, #0
 8004742:	e008      	b.n	8004756 <_printf_common+0xb2>
 8004744:	2301      	movs	r3, #1
 8004746:	4652      	mov	r2, sl
 8004748:	4641      	mov	r1, r8
 800474a:	4638      	mov	r0, r7
 800474c:	47c8      	blx	r9
 800474e:	3001      	adds	r0, #1
 8004750:	d103      	bne.n	800475a <_printf_common+0xb6>
 8004752:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800475a:	3501      	adds	r5, #1
 800475c:	e7c1      	b.n	80046e2 <_printf_common+0x3e>
 800475e:	2030      	movs	r0, #48	@ 0x30
 8004760:	18e1      	adds	r1, r4, r3
 8004762:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800476c:	4422      	add	r2, r4
 800476e:	3302      	adds	r3, #2
 8004770:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004774:	e7c2      	b.n	80046fc <_printf_common+0x58>
 8004776:	2301      	movs	r3, #1
 8004778:	4622      	mov	r2, r4
 800477a:	4641      	mov	r1, r8
 800477c:	4638      	mov	r0, r7
 800477e:	47c8      	blx	r9
 8004780:	3001      	adds	r0, #1
 8004782:	d0e6      	beq.n	8004752 <_printf_common+0xae>
 8004784:	3601      	adds	r6, #1
 8004786:	e7d9      	b.n	800473c <_printf_common+0x98>

08004788 <_printf_i>:
 8004788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800478c:	7e0f      	ldrb	r7, [r1, #24]
 800478e:	4691      	mov	r9, r2
 8004790:	2f78      	cmp	r7, #120	@ 0x78
 8004792:	4680      	mov	r8, r0
 8004794:	460c      	mov	r4, r1
 8004796:	469a      	mov	sl, r3
 8004798:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800479a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800479e:	d807      	bhi.n	80047b0 <_printf_i+0x28>
 80047a0:	2f62      	cmp	r7, #98	@ 0x62
 80047a2:	d80a      	bhi.n	80047ba <_printf_i+0x32>
 80047a4:	2f00      	cmp	r7, #0
 80047a6:	f000 80d3 	beq.w	8004950 <_printf_i+0x1c8>
 80047aa:	2f58      	cmp	r7, #88	@ 0x58
 80047ac:	f000 80ba 	beq.w	8004924 <_printf_i+0x19c>
 80047b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80047b8:	e03a      	b.n	8004830 <_printf_i+0xa8>
 80047ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80047be:	2b15      	cmp	r3, #21
 80047c0:	d8f6      	bhi.n	80047b0 <_printf_i+0x28>
 80047c2:	a101      	add	r1, pc, #4	@ (adr r1, 80047c8 <_printf_i+0x40>)
 80047c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047c8:	08004821 	.word	0x08004821
 80047cc:	08004835 	.word	0x08004835
 80047d0:	080047b1 	.word	0x080047b1
 80047d4:	080047b1 	.word	0x080047b1
 80047d8:	080047b1 	.word	0x080047b1
 80047dc:	080047b1 	.word	0x080047b1
 80047e0:	08004835 	.word	0x08004835
 80047e4:	080047b1 	.word	0x080047b1
 80047e8:	080047b1 	.word	0x080047b1
 80047ec:	080047b1 	.word	0x080047b1
 80047f0:	080047b1 	.word	0x080047b1
 80047f4:	08004937 	.word	0x08004937
 80047f8:	0800485f 	.word	0x0800485f
 80047fc:	080048f1 	.word	0x080048f1
 8004800:	080047b1 	.word	0x080047b1
 8004804:	080047b1 	.word	0x080047b1
 8004808:	08004959 	.word	0x08004959
 800480c:	080047b1 	.word	0x080047b1
 8004810:	0800485f 	.word	0x0800485f
 8004814:	080047b1 	.word	0x080047b1
 8004818:	080047b1 	.word	0x080047b1
 800481c:	080048f9 	.word	0x080048f9
 8004820:	6833      	ldr	r3, [r6, #0]
 8004822:	1d1a      	adds	r2, r3, #4
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6032      	str	r2, [r6, #0]
 8004828:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800482c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004830:	2301      	movs	r3, #1
 8004832:	e09e      	b.n	8004972 <_printf_i+0x1ea>
 8004834:	6833      	ldr	r3, [r6, #0]
 8004836:	6820      	ldr	r0, [r4, #0]
 8004838:	1d19      	adds	r1, r3, #4
 800483a:	6031      	str	r1, [r6, #0]
 800483c:	0606      	lsls	r6, r0, #24
 800483e:	d501      	bpl.n	8004844 <_printf_i+0xbc>
 8004840:	681d      	ldr	r5, [r3, #0]
 8004842:	e003      	b.n	800484c <_printf_i+0xc4>
 8004844:	0645      	lsls	r5, r0, #25
 8004846:	d5fb      	bpl.n	8004840 <_printf_i+0xb8>
 8004848:	f9b3 5000 	ldrsh.w	r5, [r3]
 800484c:	2d00      	cmp	r5, #0
 800484e:	da03      	bge.n	8004858 <_printf_i+0xd0>
 8004850:	232d      	movs	r3, #45	@ 0x2d
 8004852:	426d      	negs	r5, r5
 8004854:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004858:	230a      	movs	r3, #10
 800485a:	4859      	ldr	r0, [pc, #356]	@ (80049c0 <_printf_i+0x238>)
 800485c:	e011      	b.n	8004882 <_printf_i+0xfa>
 800485e:	6821      	ldr	r1, [r4, #0]
 8004860:	6833      	ldr	r3, [r6, #0]
 8004862:	0608      	lsls	r0, r1, #24
 8004864:	f853 5b04 	ldr.w	r5, [r3], #4
 8004868:	d402      	bmi.n	8004870 <_printf_i+0xe8>
 800486a:	0649      	lsls	r1, r1, #25
 800486c:	bf48      	it	mi
 800486e:	b2ad      	uxthmi	r5, r5
 8004870:	2f6f      	cmp	r7, #111	@ 0x6f
 8004872:	6033      	str	r3, [r6, #0]
 8004874:	bf14      	ite	ne
 8004876:	230a      	movne	r3, #10
 8004878:	2308      	moveq	r3, #8
 800487a:	4851      	ldr	r0, [pc, #324]	@ (80049c0 <_printf_i+0x238>)
 800487c:	2100      	movs	r1, #0
 800487e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004882:	6866      	ldr	r6, [r4, #4]
 8004884:	2e00      	cmp	r6, #0
 8004886:	bfa8      	it	ge
 8004888:	6821      	ldrge	r1, [r4, #0]
 800488a:	60a6      	str	r6, [r4, #8]
 800488c:	bfa4      	itt	ge
 800488e:	f021 0104 	bicge.w	r1, r1, #4
 8004892:	6021      	strge	r1, [r4, #0]
 8004894:	b90d      	cbnz	r5, 800489a <_printf_i+0x112>
 8004896:	2e00      	cmp	r6, #0
 8004898:	d04b      	beq.n	8004932 <_printf_i+0x1aa>
 800489a:	4616      	mov	r6, r2
 800489c:	fbb5 f1f3 	udiv	r1, r5, r3
 80048a0:	fb03 5711 	mls	r7, r3, r1, r5
 80048a4:	5dc7      	ldrb	r7, [r0, r7]
 80048a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048aa:	462f      	mov	r7, r5
 80048ac:	42bb      	cmp	r3, r7
 80048ae:	460d      	mov	r5, r1
 80048b0:	d9f4      	bls.n	800489c <_printf_i+0x114>
 80048b2:	2b08      	cmp	r3, #8
 80048b4:	d10b      	bne.n	80048ce <_printf_i+0x146>
 80048b6:	6823      	ldr	r3, [r4, #0]
 80048b8:	07df      	lsls	r7, r3, #31
 80048ba:	d508      	bpl.n	80048ce <_printf_i+0x146>
 80048bc:	6923      	ldr	r3, [r4, #16]
 80048be:	6861      	ldr	r1, [r4, #4]
 80048c0:	4299      	cmp	r1, r3
 80048c2:	bfde      	ittt	le
 80048c4:	2330      	movle	r3, #48	@ 0x30
 80048c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048ca:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80048ce:	1b92      	subs	r2, r2, r6
 80048d0:	6122      	str	r2, [r4, #16]
 80048d2:	464b      	mov	r3, r9
 80048d4:	4621      	mov	r1, r4
 80048d6:	4640      	mov	r0, r8
 80048d8:	f8cd a000 	str.w	sl, [sp]
 80048dc:	aa03      	add	r2, sp, #12
 80048de:	f7ff fee1 	bl	80046a4 <_printf_common>
 80048e2:	3001      	adds	r0, #1
 80048e4:	d14a      	bne.n	800497c <_printf_i+0x1f4>
 80048e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80048ea:	b004      	add	sp, #16
 80048ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	f043 0320 	orr.w	r3, r3, #32
 80048f6:	6023      	str	r3, [r4, #0]
 80048f8:	2778      	movs	r7, #120	@ 0x78
 80048fa:	4832      	ldr	r0, [pc, #200]	@ (80049c4 <_printf_i+0x23c>)
 80048fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004900:	6823      	ldr	r3, [r4, #0]
 8004902:	6831      	ldr	r1, [r6, #0]
 8004904:	061f      	lsls	r7, r3, #24
 8004906:	f851 5b04 	ldr.w	r5, [r1], #4
 800490a:	d402      	bmi.n	8004912 <_printf_i+0x18a>
 800490c:	065f      	lsls	r7, r3, #25
 800490e:	bf48      	it	mi
 8004910:	b2ad      	uxthmi	r5, r5
 8004912:	6031      	str	r1, [r6, #0]
 8004914:	07d9      	lsls	r1, r3, #31
 8004916:	bf44      	itt	mi
 8004918:	f043 0320 	orrmi.w	r3, r3, #32
 800491c:	6023      	strmi	r3, [r4, #0]
 800491e:	b11d      	cbz	r5, 8004928 <_printf_i+0x1a0>
 8004920:	2310      	movs	r3, #16
 8004922:	e7ab      	b.n	800487c <_printf_i+0xf4>
 8004924:	4826      	ldr	r0, [pc, #152]	@ (80049c0 <_printf_i+0x238>)
 8004926:	e7e9      	b.n	80048fc <_printf_i+0x174>
 8004928:	6823      	ldr	r3, [r4, #0]
 800492a:	f023 0320 	bic.w	r3, r3, #32
 800492e:	6023      	str	r3, [r4, #0]
 8004930:	e7f6      	b.n	8004920 <_printf_i+0x198>
 8004932:	4616      	mov	r6, r2
 8004934:	e7bd      	b.n	80048b2 <_printf_i+0x12a>
 8004936:	6833      	ldr	r3, [r6, #0]
 8004938:	6825      	ldr	r5, [r4, #0]
 800493a:	1d18      	adds	r0, r3, #4
 800493c:	6961      	ldr	r1, [r4, #20]
 800493e:	6030      	str	r0, [r6, #0]
 8004940:	062e      	lsls	r6, r5, #24
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	d501      	bpl.n	800494a <_printf_i+0x1c2>
 8004946:	6019      	str	r1, [r3, #0]
 8004948:	e002      	b.n	8004950 <_printf_i+0x1c8>
 800494a:	0668      	lsls	r0, r5, #25
 800494c:	d5fb      	bpl.n	8004946 <_printf_i+0x1be>
 800494e:	8019      	strh	r1, [r3, #0]
 8004950:	2300      	movs	r3, #0
 8004952:	4616      	mov	r6, r2
 8004954:	6123      	str	r3, [r4, #16]
 8004956:	e7bc      	b.n	80048d2 <_printf_i+0x14a>
 8004958:	6833      	ldr	r3, [r6, #0]
 800495a:	2100      	movs	r1, #0
 800495c:	1d1a      	adds	r2, r3, #4
 800495e:	6032      	str	r2, [r6, #0]
 8004960:	681e      	ldr	r6, [r3, #0]
 8004962:	6862      	ldr	r2, [r4, #4]
 8004964:	4630      	mov	r0, r6
 8004966:	f000 f913 	bl	8004b90 <memchr>
 800496a:	b108      	cbz	r0, 8004970 <_printf_i+0x1e8>
 800496c:	1b80      	subs	r0, r0, r6
 800496e:	6060      	str	r0, [r4, #4]
 8004970:	6863      	ldr	r3, [r4, #4]
 8004972:	6123      	str	r3, [r4, #16]
 8004974:	2300      	movs	r3, #0
 8004976:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800497a:	e7aa      	b.n	80048d2 <_printf_i+0x14a>
 800497c:	4632      	mov	r2, r6
 800497e:	4649      	mov	r1, r9
 8004980:	4640      	mov	r0, r8
 8004982:	6923      	ldr	r3, [r4, #16]
 8004984:	47d0      	blx	sl
 8004986:	3001      	adds	r0, #1
 8004988:	d0ad      	beq.n	80048e6 <_printf_i+0x15e>
 800498a:	6823      	ldr	r3, [r4, #0]
 800498c:	079b      	lsls	r3, r3, #30
 800498e:	d413      	bmi.n	80049b8 <_printf_i+0x230>
 8004990:	68e0      	ldr	r0, [r4, #12]
 8004992:	9b03      	ldr	r3, [sp, #12]
 8004994:	4298      	cmp	r0, r3
 8004996:	bfb8      	it	lt
 8004998:	4618      	movlt	r0, r3
 800499a:	e7a6      	b.n	80048ea <_printf_i+0x162>
 800499c:	2301      	movs	r3, #1
 800499e:	4632      	mov	r2, r6
 80049a0:	4649      	mov	r1, r9
 80049a2:	4640      	mov	r0, r8
 80049a4:	47d0      	blx	sl
 80049a6:	3001      	adds	r0, #1
 80049a8:	d09d      	beq.n	80048e6 <_printf_i+0x15e>
 80049aa:	3501      	adds	r5, #1
 80049ac:	68e3      	ldr	r3, [r4, #12]
 80049ae:	9903      	ldr	r1, [sp, #12]
 80049b0:	1a5b      	subs	r3, r3, r1
 80049b2:	42ab      	cmp	r3, r5
 80049b4:	dcf2      	bgt.n	800499c <_printf_i+0x214>
 80049b6:	e7eb      	b.n	8004990 <_printf_i+0x208>
 80049b8:	2500      	movs	r5, #0
 80049ba:	f104 0619 	add.w	r6, r4, #25
 80049be:	e7f5      	b.n	80049ac <_printf_i+0x224>
 80049c0:	08005539 	.word	0x08005539
 80049c4:	0800554a 	.word	0x0800554a

080049c8 <__sflush_r>:
 80049c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80049cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ce:	0716      	lsls	r6, r2, #28
 80049d0:	4605      	mov	r5, r0
 80049d2:	460c      	mov	r4, r1
 80049d4:	d454      	bmi.n	8004a80 <__sflush_r+0xb8>
 80049d6:	684b      	ldr	r3, [r1, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	dc02      	bgt.n	80049e2 <__sflush_r+0x1a>
 80049dc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80049de:	2b00      	cmp	r3, #0
 80049e0:	dd48      	ble.n	8004a74 <__sflush_r+0xac>
 80049e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80049e4:	2e00      	cmp	r6, #0
 80049e6:	d045      	beq.n	8004a74 <__sflush_r+0xac>
 80049e8:	2300      	movs	r3, #0
 80049ea:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80049ee:	682f      	ldr	r7, [r5, #0]
 80049f0:	6a21      	ldr	r1, [r4, #32]
 80049f2:	602b      	str	r3, [r5, #0]
 80049f4:	d030      	beq.n	8004a58 <__sflush_r+0x90>
 80049f6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80049f8:	89a3      	ldrh	r3, [r4, #12]
 80049fa:	0759      	lsls	r1, r3, #29
 80049fc:	d505      	bpl.n	8004a0a <__sflush_r+0x42>
 80049fe:	6863      	ldr	r3, [r4, #4]
 8004a00:	1ad2      	subs	r2, r2, r3
 8004a02:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004a04:	b10b      	cbz	r3, 8004a0a <__sflush_r+0x42>
 8004a06:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a08:	1ad2      	subs	r2, r2, r3
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a10:	6a21      	ldr	r1, [r4, #32]
 8004a12:	47b0      	blx	r6
 8004a14:	1c43      	adds	r3, r0, #1
 8004a16:	89a3      	ldrh	r3, [r4, #12]
 8004a18:	d106      	bne.n	8004a28 <__sflush_r+0x60>
 8004a1a:	6829      	ldr	r1, [r5, #0]
 8004a1c:	291d      	cmp	r1, #29
 8004a1e:	d82b      	bhi.n	8004a78 <__sflush_r+0xb0>
 8004a20:	4a28      	ldr	r2, [pc, #160]	@ (8004ac4 <__sflush_r+0xfc>)
 8004a22:	410a      	asrs	r2, r1
 8004a24:	07d6      	lsls	r6, r2, #31
 8004a26:	d427      	bmi.n	8004a78 <__sflush_r+0xb0>
 8004a28:	2200      	movs	r2, #0
 8004a2a:	6062      	str	r2, [r4, #4]
 8004a2c:	6922      	ldr	r2, [r4, #16]
 8004a2e:	04d9      	lsls	r1, r3, #19
 8004a30:	6022      	str	r2, [r4, #0]
 8004a32:	d504      	bpl.n	8004a3e <__sflush_r+0x76>
 8004a34:	1c42      	adds	r2, r0, #1
 8004a36:	d101      	bne.n	8004a3c <__sflush_r+0x74>
 8004a38:	682b      	ldr	r3, [r5, #0]
 8004a3a:	b903      	cbnz	r3, 8004a3e <__sflush_r+0x76>
 8004a3c:	6560      	str	r0, [r4, #84]	@ 0x54
 8004a3e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a40:	602f      	str	r7, [r5, #0]
 8004a42:	b1b9      	cbz	r1, 8004a74 <__sflush_r+0xac>
 8004a44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a48:	4299      	cmp	r1, r3
 8004a4a:	d002      	beq.n	8004a52 <__sflush_r+0x8a>
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	f7ff fbd3 	bl	80041f8 <_free_r>
 8004a52:	2300      	movs	r3, #0
 8004a54:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a56:	e00d      	b.n	8004a74 <__sflush_r+0xac>
 8004a58:	2301      	movs	r3, #1
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	47b0      	blx	r6
 8004a5e:	4602      	mov	r2, r0
 8004a60:	1c50      	adds	r0, r2, #1
 8004a62:	d1c9      	bne.n	80049f8 <__sflush_r+0x30>
 8004a64:	682b      	ldr	r3, [r5, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0c6      	beq.n	80049f8 <__sflush_r+0x30>
 8004a6a:	2b1d      	cmp	r3, #29
 8004a6c:	d001      	beq.n	8004a72 <__sflush_r+0xaa>
 8004a6e:	2b16      	cmp	r3, #22
 8004a70:	d11d      	bne.n	8004aae <__sflush_r+0xe6>
 8004a72:	602f      	str	r7, [r5, #0]
 8004a74:	2000      	movs	r0, #0
 8004a76:	e021      	b.n	8004abc <__sflush_r+0xf4>
 8004a78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a7c:	b21b      	sxth	r3, r3
 8004a7e:	e01a      	b.n	8004ab6 <__sflush_r+0xee>
 8004a80:	690f      	ldr	r7, [r1, #16]
 8004a82:	2f00      	cmp	r7, #0
 8004a84:	d0f6      	beq.n	8004a74 <__sflush_r+0xac>
 8004a86:	0793      	lsls	r3, r2, #30
 8004a88:	bf18      	it	ne
 8004a8a:	2300      	movne	r3, #0
 8004a8c:	680e      	ldr	r6, [r1, #0]
 8004a8e:	bf08      	it	eq
 8004a90:	694b      	ldreq	r3, [r1, #20]
 8004a92:	1bf6      	subs	r6, r6, r7
 8004a94:	600f      	str	r7, [r1, #0]
 8004a96:	608b      	str	r3, [r1, #8]
 8004a98:	2e00      	cmp	r6, #0
 8004a9a:	ddeb      	ble.n	8004a74 <__sflush_r+0xac>
 8004a9c:	4633      	mov	r3, r6
 8004a9e:	463a      	mov	r2, r7
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	6a21      	ldr	r1, [r4, #32]
 8004aa4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004aa8:	47e0      	blx	ip
 8004aaa:	2800      	cmp	r0, #0
 8004aac:	dc07      	bgt.n	8004abe <__sflush_r+0xf6>
 8004aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ab2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ab6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004aba:	81a3      	strh	r3, [r4, #12]
 8004abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004abe:	4407      	add	r7, r0
 8004ac0:	1a36      	subs	r6, r6, r0
 8004ac2:	e7e9      	b.n	8004a98 <__sflush_r+0xd0>
 8004ac4:	dfbffffe 	.word	0xdfbffffe

08004ac8 <_fflush_r>:
 8004ac8:	b538      	push	{r3, r4, r5, lr}
 8004aca:	690b      	ldr	r3, [r1, #16]
 8004acc:	4605      	mov	r5, r0
 8004ace:	460c      	mov	r4, r1
 8004ad0:	b913      	cbnz	r3, 8004ad8 <_fflush_r+0x10>
 8004ad2:	2500      	movs	r5, #0
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	bd38      	pop	{r3, r4, r5, pc}
 8004ad8:	b118      	cbz	r0, 8004ae2 <_fflush_r+0x1a>
 8004ada:	6a03      	ldr	r3, [r0, #32]
 8004adc:	b90b      	cbnz	r3, 8004ae2 <_fflush_r+0x1a>
 8004ade:	f7ff f9e7 	bl	8003eb0 <__sinit>
 8004ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0f3      	beq.n	8004ad2 <_fflush_r+0xa>
 8004aea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004aec:	07d0      	lsls	r0, r2, #31
 8004aee:	d404      	bmi.n	8004afa <_fflush_r+0x32>
 8004af0:	0599      	lsls	r1, r3, #22
 8004af2:	d402      	bmi.n	8004afa <_fflush_r+0x32>
 8004af4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004af6:	f7ff fb5e 	bl	80041b6 <__retarget_lock_acquire_recursive>
 8004afa:	4628      	mov	r0, r5
 8004afc:	4621      	mov	r1, r4
 8004afe:	f7ff ff63 	bl	80049c8 <__sflush_r>
 8004b02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b04:	4605      	mov	r5, r0
 8004b06:	07da      	lsls	r2, r3, #31
 8004b08:	d4e4      	bmi.n	8004ad4 <_fflush_r+0xc>
 8004b0a:	89a3      	ldrh	r3, [r4, #12]
 8004b0c:	059b      	lsls	r3, r3, #22
 8004b0e:	d4e1      	bmi.n	8004ad4 <_fflush_r+0xc>
 8004b10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b12:	f7ff fb51 	bl	80041b8 <__retarget_lock_release_recursive>
 8004b16:	e7dd      	b.n	8004ad4 <_fflush_r+0xc>

08004b18 <fiprintf>:
 8004b18:	b40e      	push	{r1, r2, r3}
 8004b1a:	b503      	push	{r0, r1, lr}
 8004b1c:	4601      	mov	r1, r0
 8004b1e:	ab03      	add	r3, sp, #12
 8004b20:	4805      	ldr	r0, [pc, #20]	@ (8004b38 <fiprintf+0x20>)
 8004b22:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b26:	6800      	ldr	r0, [r0, #0]
 8004b28:	9301      	str	r3, [sp, #4]
 8004b2a:	f000 f8a9 	bl	8004c80 <_vfiprintf_r>
 8004b2e:	b002      	add	sp, #8
 8004b30:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b34:	b003      	add	sp, #12
 8004b36:	4770      	bx	lr
 8004b38:	200000b4 	.word	0x200000b4

08004b3c <memmove>:
 8004b3c:	4288      	cmp	r0, r1
 8004b3e:	b510      	push	{r4, lr}
 8004b40:	eb01 0402 	add.w	r4, r1, r2
 8004b44:	d902      	bls.n	8004b4c <memmove+0x10>
 8004b46:	4284      	cmp	r4, r0
 8004b48:	4623      	mov	r3, r4
 8004b4a:	d807      	bhi.n	8004b5c <memmove+0x20>
 8004b4c:	1e43      	subs	r3, r0, #1
 8004b4e:	42a1      	cmp	r1, r4
 8004b50:	d008      	beq.n	8004b64 <memmove+0x28>
 8004b52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b5a:	e7f8      	b.n	8004b4e <memmove+0x12>
 8004b5c:	4601      	mov	r1, r0
 8004b5e:	4402      	add	r2, r0
 8004b60:	428a      	cmp	r2, r1
 8004b62:	d100      	bne.n	8004b66 <memmove+0x2a>
 8004b64:	bd10      	pop	{r4, pc}
 8004b66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b6e:	e7f7      	b.n	8004b60 <memmove+0x24>

08004b70 <_sbrk_r>:
 8004b70:	b538      	push	{r3, r4, r5, lr}
 8004b72:	2300      	movs	r3, #0
 8004b74:	4d05      	ldr	r5, [pc, #20]	@ (8004b8c <_sbrk_r+0x1c>)
 8004b76:	4604      	mov	r4, r0
 8004b78:	4608      	mov	r0, r1
 8004b7a:	602b      	str	r3, [r5, #0]
 8004b7c:	f7fc f85a 	bl	8000c34 <_sbrk>
 8004b80:	1c43      	adds	r3, r0, #1
 8004b82:	d102      	bne.n	8004b8a <_sbrk_r+0x1a>
 8004b84:	682b      	ldr	r3, [r5, #0]
 8004b86:	b103      	cbz	r3, 8004b8a <_sbrk_r+0x1a>
 8004b88:	6023      	str	r3, [r4, #0]
 8004b8a:	bd38      	pop	{r3, r4, r5, pc}
 8004b8c:	20000610 	.word	0x20000610

08004b90 <memchr>:
 8004b90:	4603      	mov	r3, r0
 8004b92:	b510      	push	{r4, lr}
 8004b94:	b2c9      	uxtb	r1, r1
 8004b96:	4402      	add	r2, r0
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	d101      	bne.n	8004ba2 <memchr+0x12>
 8004b9e:	2000      	movs	r0, #0
 8004ba0:	e003      	b.n	8004baa <memchr+0x1a>
 8004ba2:	7804      	ldrb	r4, [r0, #0]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	428c      	cmp	r4, r1
 8004ba8:	d1f6      	bne.n	8004b98 <memchr+0x8>
 8004baa:	bd10      	pop	{r4, pc}

08004bac <memcpy>:
 8004bac:	440a      	add	r2, r1
 8004bae:	4291      	cmp	r1, r2
 8004bb0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004bb4:	d100      	bne.n	8004bb8 <memcpy+0xc>
 8004bb6:	4770      	bx	lr
 8004bb8:	b510      	push	{r4, lr}
 8004bba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bbe:	4291      	cmp	r1, r2
 8004bc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bc4:	d1f9      	bne.n	8004bba <memcpy+0xe>
 8004bc6:	bd10      	pop	{r4, pc}

08004bc8 <abort>:
 8004bc8:	2006      	movs	r0, #6
 8004bca:	b508      	push	{r3, lr}
 8004bcc:	f000 fa2c 	bl	8005028 <raise>
 8004bd0:	2001      	movs	r0, #1
 8004bd2:	f7fb ffba 	bl	8000b4a <_exit>

08004bd6 <_realloc_r>:
 8004bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bda:	4680      	mov	r8, r0
 8004bdc:	4615      	mov	r5, r2
 8004bde:	460c      	mov	r4, r1
 8004be0:	b921      	cbnz	r1, 8004bec <_realloc_r+0x16>
 8004be2:	4611      	mov	r1, r2
 8004be4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004be8:	f7ff bb78 	b.w	80042dc <_malloc_r>
 8004bec:	b92a      	cbnz	r2, 8004bfa <_realloc_r+0x24>
 8004bee:	f7ff fb03 	bl	80041f8 <_free_r>
 8004bf2:	2400      	movs	r4, #0
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bfa:	f000 fa31 	bl	8005060 <_malloc_usable_size_r>
 8004bfe:	4285      	cmp	r5, r0
 8004c00:	4606      	mov	r6, r0
 8004c02:	d802      	bhi.n	8004c0a <_realloc_r+0x34>
 8004c04:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004c08:	d8f4      	bhi.n	8004bf4 <_realloc_r+0x1e>
 8004c0a:	4629      	mov	r1, r5
 8004c0c:	4640      	mov	r0, r8
 8004c0e:	f7ff fb65 	bl	80042dc <_malloc_r>
 8004c12:	4607      	mov	r7, r0
 8004c14:	2800      	cmp	r0, #0
 8004c16:	d0ec      	beq.n	8004bf2 <_realloc_r+0x1c>
 8004c18:	42b5      	cmp	r5, r6
 8004c1a:	462a      	mov	r2, r5
 8004c1c:	4621      	mov	r1, r4
 8004c1e:	bf28      	it	cs
 8004c20:	4632      	movcs	r2, r6
 8004c22:	f7ff ffc3 	bl	8004bac <memcpy>
 8004c26:	4621      	mov	r1, r4
 8004c28:	4640      	mov	r0, r8
 8004c2a:	f7ff fae5 	bl	80041f8 <_free_r>
 8004c2e:	463c      	mov	r4, r7
 8004c30:	e7e0      	b.n	8004bf4 <_realloc_r+0x1e>

08004c32 <__sfputc_r>:
 8004c32:	6893      	ldr	r3, [r2, #8]
 8004c34:	b410      	push	{r4}
 8004c36:	3b01      	subs	r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	6093      	str	r3, [r2, #8]
 8004c3c:	da07      	bge.n	8004c4e <__sfputc_r+0x1c>
 8004c3e:	6994      	ldr	r4, [r2, #24]
 8004c40:	42a3      	cmp	r3, r4
 8004c42:	db01      	blt.n	8004c48 <__sfputc_r+0x16>
 8004c44:	290a      	cmp	r1, #10
 8004c46:	d102      	bne.n	8004c4e <__sfputc_r+0x1c>
 8004c48:	bc10      	pop	{r4}
 8004c4a:	f000 b931 	b.w	8004eb0 <__swbuf_r>
 8004c4e:	6813      	ldr	r3, [r2, #0]
 8004c50:	1c58      	adds	r0, r3, #1
 8004c52:	6010      	str	r0, [r2, #0]
 8004c54:	7019      	strb	r1, [r3, #0]
 8004c56:	4608      	mov	r0, r1
 8004c58:	bc10      	pop	{r4}
 8004c5a:	4770      	bx	lr

08004c5c <__sfputs_r>:
 8004c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5e:	4606      	mov	r6, r0
 8004c60:	460f      	mov	r7, r1
 8004c62:	4614      	mov	r4, r2
 8004c64:	18d5      	adds	r5, r2, r3
 8004c66:	42ac      	cmp	r4, r5
 8004c68:	d101      	bne.n	8004c6e <__sfputs_r+0x12>
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	e007      	b.n	8004c7e <__sfputs_r+0x22>
 8004c6e:	463a      	mov	r2, r7
 8004c70:	4630      	mov	r0, r6
 8004c72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c76:	f7ff ffdc 	bl	8004c32 <__sfputc_r>
 8004c7a:	1c43      	adds	r3, r0, #1
 8004c7c:	d1f3      	bne.n	8004c66 <__sfputs_r+0xa>
 8004c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004c80 <_vfiprintf_r>:
 8004c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c84:	460d      	mov	r5, r1
 8004c86:	4614      	mov	r4, r2
 8004c88:	4698      	mov	r8, r3
 8004c8a:	4606      	mov	r6, r0
 8004c8c:	b09d      	sub	sp, #116	@ 0x74
 8004c8e:	b118      	cbz	r0, 8004c98 <_vfiprintf_r+0x18>
 8004c90:	6a03      	ldr	r3, [r0, #32]
 8004c92:	b90b      	cbnz	r3, 8004c98 <_vfiprintf_r+0x18>
 8004c94:	f7ff f90c 	bl	8003eb0 <__sinit>
 8004c98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c9a:	07d9      	lsls	r1, r3, #31
 8004c9c:	d405      	bmi.n	8004caa <_vfiprintf_r+0x2a>
 8004c9e:	89ab      	ldrh	r3, [r5, #12]
 8004ca0:	059a      	lsls	r2, r3, #22
 8004ca2:	d402      	bmi.n	8004caa <_vfiprintf_r+0x2a>
 8004ca4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ca6:	f7ff fa86 	bl	80041b6 <__retarget_lock_acquire_recursive>
 8004caa:	89ab      	ldrh	r3, [r5, #12]
 8004cac:	071b      	lsls	r3, r3, #28
 8004cae:	d501      	bpl.n	8004cb4 <_vfiprintf_r+0x34>
 8004cb0:	692b      	ldr	r3, [r5, #16]
 8004cb2:	b99b      	cbnz	r3, 8004cdc <_vfiprintf_r+0x5c>
 8004cb4:	4629      	mov	r1, r5
 8004cb6:	4630      	mov	r0, r6
 8004cb8:	f000 f938 	bl	8004f2c <__swsetup_r>
 8004cbc:	b170      	cbz	r0, 8004cdc <_vfiprintf_r+0x5c>
 8004cbe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004cc0:	07dc      	lsls	r4, r3, #31
 8004cc2:	d504      	bpl.n	8004cce <_vfiprintf_r+0x4e>
 8004cc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004cc8:	b01d      	add	sp, #116	@ 0x74
 8004cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cce:	89ab      	ldrh	r3, [r5, #12]
 8004cd0:	0598      	lsls	r0, r3, #22
 8004cd2:	d4f7      	bmi.n	8004cc4 <_vfiprintf_r+0x44>
 8004cd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004cd6:	f7ff fa6f 	bl	80041b8 <__retarget_lock_release_recursive>
 8004cda:	e7f3      	b.n	8004cc4 <_vfiprintf_r+0x44>
 8004cdc:	2300      	movs	r3, #0
 8004cde:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ce0:	2320      	movs	r3, #32
 8004ce2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004ce6:	2330      	movs	r3, #48	@ 0x30
 8004ce8:	f04f 0901 	mov.w	r9, #1
 8004cec:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cf0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004e9c <_vfiprintf_r+0x21c>
 8004cf4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004cf8:	4623      	mov	r3, r4
 8004cfa:	469a      	mov	sl, r3
 8004cfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d00:	b10a      	cbz	r2, 8004d06 <_vfiprintf_r+0x86>
 8004d02:	2a25      	cmp	r2, #37	@ 0x25
 8004d04:	d1f9      	bne.n	8004cfa <_vfiprintf_r+0x7a>
 8004d06:	ebba 0b04 	subs.w	fp, sl, r4
 8004d0a:	d00b      	beq.n	8004d24 <_vfiprintf_r+0xa4>
 8004d0c:	465b      	mov	r3, fp
 8004d0e:	4622      	mov	r2, r4
 8004d10:	4629      	mov	r1, r5
 8004d12:	4630      	mov	r0, r6
 8004d14:	f7ff ffa2 	bl	8004c5c <__sfputs_r>
 8004d18:	3001      	adds	r0, #1
 8004d1a:	f000 80a7 	beq.w	8004e6c <_vfiprintf_r+0x1ec>
 8004d1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d20:	445a      	add	r2, fp
 8004d22:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d24:	f89a 3000 	ldrb.w	r3, [sl]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 809f 	beq.w	8004e6c <_vfiprintf_r+0x1ec>
 8004d2e:	2300      	movs	r3, #0
 8004d30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d38:	f10a 0a01 	add.w	sl, sl, #1
 8004d3c:	9304      	str	r3, [sp, #16]
 8004d3e:	9307      	str	r3, [sp, #28]
 8004d40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d44:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d46:	4654      	mov	r4, sl
 8004d48:	2205      	movs	r2, #5
 8004d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d4e:	4853      	ldr	r0, [pc, #332]	@ (8004e9c <_vfiprintf_r+0x21c>)
 8004d50:	f7ff ff1e 	bl	8004b90 <memchr>
 8004d54:	9a04      	ldr	r2, [sp, #16]
 8004d56:	b9d8      	cbnz	r0, 8004d90 <_vfiprintf_r+0x110>
 8004d58:	06d1      	lsls	r1, r2, #27
 8004d5a:	bf44      	itt	mi
 8004d5c:	2320      	movmi	r3, #32
 8004d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d62:	0713      	lsls	r3, r2, #28
 8004d64:	bf44      	itt	mi
 8004d66:	232b      	movmi	r3, #43	@ 0x2b
 8004d68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8004d70:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d72:	d015      	beq.n	8004da0 <_vfiprintf_r+0x120>
 8004d74:	4654      	mov	r4, sl
 8004d76:	2000      	movs	r0, #0
 8004d78:	f04f 0c0a 	mov.w	ip, #10
 8004d7c:	9a07      	ldr	r2, [sp, #28]
 8004d7e:	4621      	mov	r1, r4
 8004d80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d84:	3b30      	subs	r3, #48	@ 0x30
 8004d86:	2b09      	cmp	r3, #9
 8004d88:	d94b      	bls.n	8004e22 <_vfiprintf_r+0x1a2>
 8004d8a:	b1b0      	cbz	r0, 8004dba <_vfiprintf_r+0x13a>
 8004d8c:	9207      	str	r2, [sp, #28]
 8004d8e:	e014      	b.n	8004dba <_vfiprintf_r+0x13a>
 8004d90:	eba0 0308 	sub.w	r3, r0, r8
 8004d94:	fa09 f303 	lsl.w	r3, r9, r3
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	46a2      	mov	sl, r4
 8004d9c:	9304      	str	r3, [sp, #16]
 8004d9e:	e7d2      	b.n	8004d46 <_vfiprintf_r+0xc6>
 8004da0:	9b03      	ldr	r3, [sp, #12]
 8004da2:	1d19      	adds	r1, r3, #4
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	9103      	str	r1, [sp, #12]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	bfbb      	ittet	lt
 8004dac:	425b      	neglt	r3, r3
 8004dae:	f042 0202 	orrlt.w	r2, r2, #2
 8004db2:	9307      	strge	r3, [sp, #28]
 8004db4:	9307      	strlt	r3, [sp, #28]
 8004db6:	bfb8      	it	lt
 8004db8:	9204      	strlt	r2, [sp, #16]
 8004dba:	7823      	ldrb	r3, [r4, #0]
 8004dbc:	2b2e      	cmp	r3, #46	@ 0x2e
 8004dbe:	d10a      	bne.n	8004dd6 <_vfiprintf_r+0x156>
 8004dc0:	7863      	ldrb	r3, [r4, #1]
 8004dc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dc4:	d132      	bne.n	8004e2c <_vfiprintf_r+0x1ac>
 8004dc6:	9b03      	ldr	r3, [sp, #12]
 8004dc8:	3402      	adds	r4, #2
 8004dca:	1d1a      	adds	r2, r3, #4
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	9203      	str	r2, [sp, #12]
 8004dd0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004dd4:	9305      	str	r3, [sp, #20]
 8004dd6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004ea0 <_vfiprintf_r+0x220>
 8004dda:	2203      	movs	r2, #3
 8004ddc:	4650      	mov	r0, sl
 8004dde:	7821      	ldrb	r1, [r4, #0]
 8004de0:	f7ff fed6 	bl	8004b90 <memchr>
 8004de4:	b138      	cbz	r0, 8004df6 <_vfiprintf_r+0x176>
 8004de6:	2240      	movs	r2, #64	@ 0x40
 8004de8:	9b04      	ldr	r3, [sp, #16]
 8004dea:	eba0 000a 	sub.w	r0, r0, sl
 8004dee:	4082      	lsls	r2, r0
 8004df0:	4313      	orrs	r3, r2
 8004df2:	3401      	adds	r4, #1
 8004df4:	9304      	str	r3, [sp, #16]
 8004df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dfa:	2206      	movs	r2, #6
 8004dfc:	4829      	ldr	r0, [pc, #164]	@ (8004ea4 <_vfiprintf_r+0x224>)
 8004dfe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e02:	f7ff fec5 	bl	8004b90 <memchr>
 8004e06:	2800      	cmp	r0, #0
 8004e08:	d03f      	beq.n	8004e8a <_vfiprintf_r+0x20a>
 8004e0a:	4b27      	ldr	r3, [pc, #156]	@ (8004ea8 <_vfiprintf_r+0x228>)
 8004e0c:	bb1b      	cbnz	r3, 8004e56 <_vfiprintf_r+0x1d6>
 8004e0e:	9b03      	ldr	r3, [sp, #12]
 8004e10:	3307      	adds	r3, #7
 8004e12:	f023 0307 	bic.w	r3, r3, #7
 8004e16:	3308      	adds	r3, #8
 8004e18:	9303      	str	r3, [sp, #12]
 8004e1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e1c:	443b      	add	r3, r7
 8004e1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e20:	e76a      	b.n	8004cf8 <_vfiprintf_r+0x78>
 8004e22:	460c      	mov	r4, r1
 8004e24:	2001      	movs	r0, #1
 8004e26:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e2a:	e7a8      	b.n	8004d7e <_vfiprintf_r+0xfe>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f04f 0c0a 	mov.w	ip, #10
 8004e32:	4619      	mov	r1, r3
 8004e34:	3401      	adds	r4, #1
 8004e36:	9305      	str	r3, [sp, #20]
 8004e38:	4620      	mov	r0, r4
 8004e3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e3e:	3a30      	subs	r2, #48	@ 0x30
 8004e40:	2a09      	cmp	r2, #9
 8004e42:	d903      	bls.n	8004e4c <_vfiprintf_r+0x1cc>
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0c6      	beq.n	8004dd6 <_vfiprintf_r+0x156>
 8004e48:	9105      	str	r1, [sp, #20]
 8004e4a:	e7c4      	b.n	8004dd6 <_vfiprintf_r+0x156>
 8004e4c:	4604      	mov	r4, r0
 8004e4e:	2301      	movs	r3, #1
 8004e50:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e54:	e7f0      	b.n	8004e38 <_vfiprintf_r+0x1b8>
 8004e56:	ab03      	add	r3, sp, #12
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	462a      	mov	r2, r5
 8004e5c:	4630      	mov	r0, r6
 8004e5e:	4b13      	ldr	r3, [pc, #76]	@ (8004eac <_vfiprintf_r+0x22c>)
 8004e60:	a904      	add	r1, sp, #16
 8004e62:	f3af 8000 	nop.w
 8004e66:	4607      	mov	r7, r0
 8004e68:	1c78      	adds	r0, r7, #1
 8004e6a:	d1d6      	bne.n	8004e1a <_vfiprintf_r+0x19a>
 8004e6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e6e:	07d9      	lsls	r1, r3, #31
 8004e70:	d405      	bmi.n	8004e7e <_vfiprintf_r+0x1fe>
 8004e72:	89ab      	ldrh	r3, [r5, #12]
 8004e74:	059a      	lsls	r2, r3, #22
 8004e76:	d402      	bmi.n	8004e7e <_vfiprintf_r+0x1fe>
 8004e78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e7a:	f7ff f99d 	bl	80041b8 <__retarget_lock_release_recursive>
 8004e7e:	89ab      	ldrh	r3, [r5, #12]
 8004e80:	065b      	lsls	r3, r3, #25
 8004e82:	f53f af1f 	bmi.w	8004cc4 <_vfiprintf_r+0x44>
 8004e86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e88:	e71e      	b.n	8004cc8 <_vfiprintf_r+0x48>
 8004e8a:	ab03      	add	r3, sp, #12
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	462a      	mov	r2, r5
 8004e90:	4630      	mov	r0, r6
 8004e92:	4b06      	ldr	r3, [pc, #24]	@ (8004eac <_vfiprintf_r+0x22c>)
 8004e94:	a904      	add	r1, sp, #16
 8004e96:	f7ff fc77 	bl	8004788 <_printf_i>
 8004e9a:	e7e4      	b.n	8004e66 <_vfiprintf_r+0x1e6>
 8004e9c:	08005528 	.word	0x08005528
 8004ea0:	0800552e 	.word	0x0800552e
 8004ea4:	08005532 	.word	0x08005532
 8004ea8:	00000000 	.word	0x00000000
 8004eac:	08004c5d 	.word	0x08004c5d

08004eb0 <__swbuf_r>:
 8004eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb2:	460e      	mov	r6, r1
 8004eb4:	4614      	mov	r4, r2
 8004eb6:	4605      	mov	r5, r0
 8004eb8:	b118      	cbz	r0, 8004ec2 <__swbuf_r+0x12>
 8004eba:	6a03      	ldr	r3, [r0, #32]
 8004ebc:	b90b      	cbnz	r3, 8004ec2 <__swbuf_r+0x12>
 8004ebe:	f7fe fff7 	bl	8003eb0 <__sinit>
 8004ec2:	69a3      	ldr	r3, [r4, #24]
 8004ec4:	60a3      	str	r3, [r4, #8]
 8004ec6:	89a3      	ldrh	r3, [r4, #12]
 8004ec8:	071a      	lsls	r2, r3, #28
 8004eca:	d501      	bpl.n	8004ed0 <__swbuf_r+0x20>
 8004ecc:	6923      	ldr	r3, [r4, #16]
 8004ece:	b943      	cbnz	r3, 8004ee2 <__swbuf_r+0x32>
 8004ed0:	4621      	mov	r1, r4
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	f000 f82a 	bl	8004f2c <__swsetup_r>
 8004ed8:	b118      	cbz	r0, 8004ee2 <__swbuf_r+0x32>
 8004eda:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004ede:	4638      	mov	r0, r7
 8004ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ee2:	6823      	ldr	r3, [r4, #0]
 8004ee4:	6922      	ldr	r2, [r4, #16]
 8004ee6:	b2f6      	uxtb	r6, r6
 8004ee8:	1a98      	subs	r0, r3, r2
 8004eea:	6963      	ldr	r3, [r4, #20]
 8004eec:	4637      	mov	r7, r6
 8004eee:	4283      	cmp	r3, r0
 8004ef0:	dc05      	bgt.n	8004efe <__swbuf_r+0x4e>
 8004ef2:	4621      	mov	r1, r4
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	f7ff fde7 	bl	8004ac8 <_fflush_r>
 8004efa:	2800      	cmp	r0, #0
 8004efc:	d1ed      	bne.n	8004eda <__swbuf_r+0x2a>
 8004efe:	68a3      	ldr	r3, [r4, #8]
 8004f00:	3b01      	subs	r3, #1
 8004f02:	60a3      	str	r3, [r4, #8]
 8004f04:	6823      	ldr	r3, [r4, #0]
 8004f06:	1c5a      	adds	r2, r3, #1
 8004f08:	6022      	str	r2, [r4, #0]
 8004f0a:	701e      	strb	r6, [r3, #0]
 8004f0c:	6962      	ldr	r2, [r4, #20]
 8004f0e:	1c43      	adds	r3, r0, #1
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d004      	beq.n	8004f1e <__swbuf_r+0x6e>
 8004f14:	89a3      	ldrh	r3, [r4, #12]
 8004f16:	07db      	lsls	r3, r3, #31
 8004f18:	d5e1      	bpl.n	8004ede <__swbuf_r+0x2e>
 8004f1a:	2e0a      	cmp	r6, #10
 8004f1c:	d1df      	bne.n	8004ede <__swbuf_r+0x2e>
 8004f1e:	4621      	mov	r1, r4
 8004f20:	4628      	mov	r0, r5
 8004f22:	f7ff fdd1 	bl	8004ac8 <_fflush_r>
 8004f26:	2800      	cmp	r0, #0
 8004f28:	d0d9      	beq.n	8004ede <__swbuf_r+0x2e>
 8004f2a:	e7d6      	b.n	8004eda <__swbuf_r+0x2a>

08004f2c <__swsetup_r>:
 8004f2c:	b538      	push	{r3, r4, r5, lr}
 8004f2e:	4b29      	ldr	r3, [pc, #164]	@ (8004fd4 <__swsetup_r+0xa8>)
 8004f30:	4605      	mov	r5, r0
 8004f32:	6818      	ldr	r0, [r3, #0]
 8004f34:	460c      	mov	r4, r1
 8004f36:	b118      	cbz	r0, 8004f40 <__swsetup_r+0x14>
 8004f38:	6a03      	ldr	r3, [r0, #32]
 8004f3a:	b90b      	cbnz	r3, 8004f40 <__swsetup_r+0x14>
 8004f3c:	f7fe ffb8 	bl	8003eb0 <__sinit>
 8004f40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f44:	0719      	lsls	r1, r3, #28
 8004f46:	d422      	bmi.n	8004f8e <__swsetup_r+0x62>
 8004f48:	06da      	lsls	r2, r3, #27
 8004f4a:	d407      	bmi.n	8004f5c <__swsetup_r+0x30>
 8004f4c:	2209      	movs	r2, #9
 8004f4e:	602a      	str	r2, [r5, #0]
 8004f50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f58:	81a3      	strh	r3, [r4, #12]
 8004f5a:	e033      	b.n	8004fc4 <__swsetup_r+0x98>
 8004f5c:	0758      	lsls	r0, r3, #29
 8004f5e:	d512      	bpl.n	8004f86 <__swsetup_r+0x5a>
 8004f60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f62:	b141      	cbz	r1, 8004f76 <__swsetup_r+0x4a>
 8004f64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f68:	4299      	cmp	r1, r3
 8004f6a:	d002      	beq.n	8004f72 <__swsetup_r+0x46>
 8004f6c:	4628      	mov	r0, r5
 8004f6e:	f7ff f943 	bl	80041f8 <_free_r>
 8004f72:	2300      	movs	r3, #0
 8004f74:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f76:	89a3      	ldrh	r3, [r4, #12]
 8004f78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004f7c:	81a3      	strh	r3, [r4, #12]
 8004f7e:	2300      	movs	r3, #0
 8004f80:	6063      	str	r3, [r4, #4]
 8004f82:	6923      	ldr	r3, [r4, #16]
 8004f84:	6023      	str	r3, [r4, #0]
 8004f86:	89a3      	ldrh	r3, [r4, #12]
 8004f88:	f043 0308 	orr.w	r3, r3, #8
 8004f8c:	81a3      	strh	r3, [r4, #12]
 8004f8e:	6923      	ldr	r3, [r4, #16]
 8004f90:	b94b      	cbnz	r3, 8004fa6 <__swsetup_r+0x7a>
 8004f92:	89a3      	ldrh	r3, [r4, #12]
 8004f94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004f98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f9c:	d003      	beq.n	8004fa6 <__swsetup_r+0x7a>
 8004f9e:	4621      	mov	r1, r4
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	f000 f88a 	bl	80050ba <__smakebuf_r>
 8004fa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004faa:	f013 0201 	ands.w	r2, r3, #1
 8004fae:	d00a      	beq.n	8004fc6 <__swsetup_r+0x9a>
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	60a2      	str	r2, [r4, #8]
 8004fb4:	6962      	ldr	r2, [r4, #20]
 8004fb6:	4252      	negs	r2, r2
 8004fb8:	61a2      	str	r2, [r4, #24]
 8004fba:	6922      	ldr	r2, [r4, #16]
 8004fbc:	b942      	cbnz	r2, 8004fd0 <__swsetup_r+0xa4>
 8004fbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004fc2:	d1c5      	bne.n	8004f50 <__swsetup_r+0x24>
 8004fc4:	bd38      	pop	{r3, r4, r5, pc}
 8004fc6:	0799      	lsls	r1, r3, #30
 8004fc8:	bf58      	it	pl
 8004fca:	6962      	ldrpl	r2, [r4, #20]
 8004fcc:	60a2      	str	r2, [r4, #8]
 8004fce:	e7f4      	b.n	8004fba <__swsetup_r+0x8e>
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	e7f7      	b.n	8004fc4 <__swsetup_r+0x98>
 8004fd4:	200000b4 	.word	0x200000b4

08004fd8 <_raise_r>:
 8004fd8:	291f      	cmp	r1, #31
 8004fda:	b538      	push	{r3, r4, r5, lr}
 8004fdc:	4605      	mov	r5, r0
 8004fde:	460c      	mov	r4, r1
 8004fe0:	d904      	bls.n	8004fec <_raise_r+0x14>
 8004fe2:	2316      	movs	r3, #22
 8004fe4:	6003      	str	r3, [r0, #0]
 8004fe6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004fea:	bd38      	pop	{r3, r4, r5, pc}
 8004fec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004fee:	b112      	cbz	r2, 8004ff6 <_raise_r+0x1e>
 8004ff0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004ff4:	b94b      	cbnz	r3, 800500a <_raise_r+0x32>
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	f000 f830 	bl	800505c <_getpid_r>
 8004ffc:	4622      	mov	r2, r4
 8004ffe:	4601      	mov	r1, r0
 8005000:	4628      	mov	r0, r5
 8005002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005006:	f000 b817 	b.w	8005038 <_kill_r>
 800500a:	2b01      	cmp	r3, #1
 800500c:	d00a      	beq.n	8005024 <_raise_r+0x4c>
 800500e:	1c59      	adds	r1, r3, #1
 8005010:	d103      	bne.n	800501a <_raise_r+0x42>
 8005012:	2316      	movs	r3, #22
 8005014:	6003      	str	r3, [r0, #0]
 8005016:	2001      	movs	r0, #1
 8005018:	e7e7      	b.n	8004fea <_raise_r+0x12>
 800501a:	2100      	movs	r1, #0
 800501c:	4620      	mov	r0, r4
 800501e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005022:	4798      	blx	r3
 8005024:	2000      	movs	r0, #0
 8005026:	e7e0      	b.n	8004fea <_raise_r+0x12>

08005028 <raise>:
 8005028:	4b02      	ldr	r3, [pc, #8]	@ (8005034 <raise+0xc>)
 800502a:	4601      	mov	r1, r0
 800502c:	6818      	ldr	r0, [r3, #0]
 800502e:	f7ff bfd3 	b.w	8004fd8 <_raise_r>
 8005032:	bf00      	nop
 8005034:	200000b4 	.word	0x200000b4

08005038 <_kill_r>:
 8005038:	b538      	push	{r3, r4, r5, lr}
 800503a:	2300      	movs	r3, #0
 800503c:	4d06      	ldr	r5, [pc, #24]	@ (8005058 <_kill_r+0x20>)
 800503e:	4604      	mov	r4, r0
 8005040:	4608      	mov	r0, r1
 8005042:	4611      	mov	r1, r2
 8005044:	602b      	str	r3, [r5, #0]
 8005046:	f7fb fd70 	bl	8000b2a <_kill>
 800504a:	1c43      	adds	r3, r0, #1
 800504c:	d102      	bne.n	8005054 <_kill_r+0x1c>
 800504e:	682b      	ldr	r3, [r5, #0]
 8005050:	b103      	cbz	r3, 8005054 <_kill_r+0x1c>
 8005052:	6023      	str	r3, [r4, #0]
 8005054:	bd38      	pop	{r3, r4, r5, pc}
 8005056:	bf00      	nop
 8005058:	20000610 	.word	0x20000610

0800505c <_getpid_r>:
 800505c:	f7fb bd5e 	b.w	8000b1c <_getpid>

08005060 <_malloc_usable_size_r>:
 8005060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005064:	1f18      	subs	r0, r3, #4
 8005066:	2b00      	cmp	r3, #0
 8005068:	bfbc      	itt	lt
 800506a:	580b      	ldrlt	r3, [r1, r0]
 800506c:	18c0      	addlt	r0, r0, r3
 800506e:	4770      	bx	lr

08005070 <__swhatbuf_r>:
 8005070:	b570      	push	{r4, r5, r6, lr}
 8005072:	460c      	mov	r4, r1
 8005074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005078:	4615      	mov	r5, r2
 800507a:	2900      	cmp	r1, #0
 800507c:	461e      	mov	r6, r3
 800507e:	b096      	sub	sp, #88	@ 0x58
 8005080:	da0c      	bge.n	800509c <__swhatbuf_r+0x2c>
 8005082:	89a3      	ldrh	r3, [r4, #12]
 8005084:	2100      	movs	r1, #0
 8005086:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800508a:	bf14      	ite	ne
 800508c:	2340      	movne	r3, #64	@ 0x40
 800508e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005092:	2000      	movs	r0, #0
 8005094:	6031      	str	r1, [r6, #0]
 8005096:	602b      	str	r3, [r5, #0]
 8005098:	b016      	add	sp, #88	@ 0x58
 800509a:	bd70      	pop	{r4, r5, r6, pc}
 800509c:	466a      	mov	r2, sp
 800509e:	f000 f849 	bl	8005134 <_fstat_r>
 80050a2:	2800      	cmp	r0, #0
 80050a4:	dbed      	blt.n	8005082 <__swhatbuf_r+0x12>
 80050a6:	9901      	ldr	r1, [sp, #4]
 80050a8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80050ac:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80050b0:	4259      	negs	r1, r3
 80050b2:	4159      	adcs	r1, r3
 80050b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050b8:	e7eb      	b.n	8005092 <__swhatbuf_r+0x22>

080050ba <__smakebuf_r>:
 80050ba:	898b      	ldrh	r3, [r1, #12]
 80050bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050be:	079d      	lsls	r5, r3, #30
 80050c0:	4606      	mov	r6, r0
 80050c2:	460c      	mov	r4, r1
 80050c4:	d507      	bpl.n	80050d6 <__smakebuf_r+0x1c>
 80050c6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80050ca:	6023      	str	r3, [r4, #0]
 80050cc:	6123      	str	r3, [r4, #16]
 80050ce:	2301      	movs	r3, #1
 80050d0:	6163      	str	r3, [r4, #20]
 80050d2:	b003      	add	sp, #12
 80050d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050d6:	466a      	mov	r2, sp
 80050d8:	ab01      	add	r3, sp, #4
 80050da:	f7ff ffc9 	bl	8005070 <__swhatbuf_r>
 80050de:	9f00      	ldr	r7, [sp, #0]
 80050e0:	4605      	mov	r5, r0
 80050e2:	4639      	mov	r1, r7
 80050e4:	4630      	mov	r0, r6
 80050e6:	f7ff f8f9 	bl	80042dc <_malloc_r>
 80050ea:	b948      	cbnz	r0, 8005100 <__smakebuf_r+0x46>
 80050ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050f0:	059a      	lsls	r2, r3, #22
 80050f2:	d4ee      	bmi.n	80050d2 <__smakebuf_r+0x18>
 80050f4:	f023 0303 	bic.w	r3, r3, #3
 80050f8:	f043 0302 	orr.w	r3, r3, #2
 80050fc:	81a3      	strh	r3, [r4, #12]
 80050fe:	e7e2      	b.n	80050c6 <__smakebuf_r+0xc>
 8005100:	89a3      	ldrh	r3, [r4, #12]
 8005102:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800510a:	81a3      	strh	r3, [r4, #12]
 800510c:	9b01      	ldr	r3, [sp, #4]
 800510e:	6020      	str	r0, [r4, #0]
 8005110:	b15b      	cbz	r3, 800512a <__smakebuf_r+0x70>
 8005112:	4630      	mov	r0, r6
 8005114:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005118:	f000 f81e 	bl	8005158 <_isatty_r>
 800511c:	b128      	cbz	r0, 800512a <__smakebuf_r+0x70>
 800511e:	89a3      	ldrh	r3, [r4, #12]
 8005120:	f023 0303 	bic.w	r3, r3, #3
 8005124:	f043 0301 	orr.w	r3, r3, #1
 8005128:	81a3      	strh	r3, [r4, #12]
 800512a:	89a3      	ldrh	r3, [r4, #12]
 800512c:	431d      	orrs	r5, r3
 800512e:	81a5      	strh	r5, [r4, #12]
 8005130:	e7cf      	b.n	80050d2 <__smakebuf_r+0x18>
	...

08005134 <_fstat_r>:
 8005134:	b538      	push	{r3, r4, r5, lr}
 8005136:	2300      	movs	r3, #0
 8005138:	4d06      	ldr	r5, [pc, #24]	@ (8005154 <_fstat_r+0x20>)
 800513a:	4604      	mov	r4, r0
 800513c:	4608      	mov	r0, r1
 800513e:	4611      	mov	r1, r2
 8005140:	602b      	str	r3, [r5, #0]
 8005142:	f7fb fd51 	bl	8000be8 <_fstat>
 8005146:	1c43      	adds	r3, r0, #1
 8005148:	d102      	bne.n	8005150 <_fstat_r+0x1c>
 800514a:	682b      	ldr	r3, [r5, #0]
 800514c:	b103      	cbz	r3, 8005150 <_fstat_r+0x1c>
 800514e:	6023      	str	r3, [r4, #0]
 8005150:	bd38      	pop	{r3, r4, r5, pc}
 8005152:	bf00      	nop
 8005154:	20000610 	.word	0x20000610

08005158 <_isatty_r>:
 8005158:	b538      	push	{r3, r4, r5, lr}
 800515a:	2300      	movs	r3, #0
 800515c:	4d05      	ldr	r5, [pc, #20]	@ (8005174 <_isatty_r+0x1c>)
 800515e:	4604      	mov	r4, r0
 8005160:	4608      	mov	r0, r1
 8005162:	602b      	str	r3, [r5, #0]
 8005164:	f7fb fd4f 	bl	8000c06 <_isatty>
 8005168:	1c43      	adds	r3, r0, #1
 800516a:	d102      	bne.n	8005172 <_isatty_r+0x1a>
 800516c:	682b      	ldr	r3, [r5, #0]
 800516e:	b103      	cbz	r3, 8005172 <_isatty_r+0x1a>
 8005170:	6023      	str	r3, [r4, #0]
 8005172:	bd38      	pop	{r3, r4, r5, pc}
 8005174:	20000610 	.word	0x20000610

08005178 <_init>:
 8005178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517a:	bf00      	nop
 800517c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800517e:	bc08      	pop	{r3}
 8005180:	469e      	mov	lr, r3
 8005182:	4770      	bx	lr

08005184 <_fini>:
 8005184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005186:	bf00      	nop
 8005188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800518a:	bc08      	pop	{r3}
 800518c:	469e      	mov	lr, r3
 800518e:	4770      	bx	lr
