
CLI_103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051f0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  080052fc  080052fc  000062fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056c0  080056c0  000071bc  2**0
                  CONTENTS
  4 .ARM          00000008  080056c0  080056c0  000066c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056c8  080056c8  000071bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056c8  080056c8  000066c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056cc  080056cc  000066cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001bc  20000000  080056d0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000488  200001bc  0800588c  000071bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000644  0800588c  00007644  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000071bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b96a  00000000  00000000  000071e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024ef  00000000  00000000  00012b4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  00015040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000735  00000000  00000000  000159d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191ec  00000000  00000000  00016105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ccc2  00000000  00000000  0002f2f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088f70  00000000  00000000  0003bfb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4f23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030f4  00000000  00000000  000c4f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000c805c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001bc 	.word	0x200001bc
 8000128:	00000000 	.word	0x00000000
 800012c:	080052e4 	.word	0x080052e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001c0 	.word	0x200001c0
 8000148:	080052e4 	.word	0x080052e4

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <main_loop>:
.wordLength = UART_WORDLENGTH_8B,
.stopBits = UART_STOPBITS_1,
.parity = UART_PARITY_NONE,
};

void main_loop(void) {
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af02      	add	r7, sp, #8
	if (init(&uart1.huart, uartConfig) != 0) {
 8000176:	4b0f      	ldr	r3, [pc, #60]	@ (80001b4 <main_loop+0x44>)
 8000178:	68da      	ldr	r2, [r3, #12]
 800017a:	9200      	str	r2, [sp, #0]
 800017c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800017e:	480e      	ldr	r0, [pc, #56]	@ (80001b8 <main_loop+0x48>)
 8000180:	f003 fa84 	bl	800368c <init>
 8000184:	4603      	mov	r3, r0
 8000186:	2b00      	cmp	r3, #0
 8000188:	d005      	beq.n	8000196 <main_loop+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800018a:	2201      	movs	r2, #1
 800018c:	2120      	movs	r1, #32
 800018e:	480b      	ldr	r0, [pc, #44]	@ (80001bc <main_loop+0x4c>)
 8000190:	f001 fd5e 	bl	8001c50 <HAL_GPIO_WritePin>
		return;
 8000194:	e00b      	b.n	80001ae <main_loop+0x3e>
	}
	HAL_UART_Receive_IT(&uart1.huart, &rxbyte, 1);
 8000196:	2201      	movs	r2, #1
 8000198:	4909      	ldr	r1, [pc, #36]	@ (80001c0 <main_loop+0x50>)
 800019a:	4807      	ldr	r0, [pc, #28]	@ (80001b8 <main_loop+0x48>)
 800019c:	f002 fbbf 	bl	800291e <HAL_UART_Receive_IT>
    UART_SendString(&uart1.huart, PROMPT);
 80001a0:	4908      	ldr	r1, [pc, #32]	@ (80001c4 <main_loop+0x54>)
 80001a2:	4805      	ldr	r0, [pc, #20]	@ (80001b8 <main_loop+0x48>)
 80001a4:	f003 fabc 	bl	8003720 <UART_SendString>

    while(1) {
    	CheckAndPrintReceivedData();
 80001a8:	f003 fb5c 	bl	8003864 <CheckAndPrintReceivedData>
 80001ac:	e7fc      	b.n	80001a8 <main_loop+0x38>
    }
}
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	20000000 	.word	0x20000000
 80001b8:	2000001c 	.word	0x2000001c
 80001bc:	40010800 	.word	0x40010800
 80001c0:	200002e4 	.word	0x200002e4
 80001c4:	080052fc 	.word	0x080052fc

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fbbc 	bl	8000948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f80e 	bl	80001f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f91e 	bl	8000414 <MX_GPIO_Init>
  MX_DMA_Init();
 80001d8:	f000 f8fe 	bl	80003d8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80001dc:	f000 f8a8 	bl	8000330 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80001e0:	f000 f8d0 	bl	8000384 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80001e4:	f000 f856 	bl	8000294 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  main_loop();
 80001e8:	f7ff ffc2 	bl	8000170 <main_loop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ec:	bf00      	nop
 80001ee:	e7fd      	b.n	80001ec <main+0x24>

080001f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b094      	sub	sp, #80	@ 0x50
 80001f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001fa:	2228      	movs	r2, #40	@ 0x28
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f003 ffb9 	bl	8004176 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000204:	f107 0314 	add.w	r3, r7, #20
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]
 800020c:	605a      	str	r2, [r3, #4]
 800020e:	609a      	str	r2, [r3, #8]
 8000210:	60da      	str	r2, [r3, #12]
 8000212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
 800021a:	605a      	str	r2, [r3, #4]
 800021c:	609a      	str	r2, [r3, #8]
 800021e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000220:	2302      	movs	r3, #2
 8000222:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000224:	2301      	movs	r3, #1
 8000226:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000228:	2310      	movs	r3, #16
 800022a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800022c:	2300      	movs	r3, #0
 800022e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000230:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000234:	4618      	mov	r0, r3
 8000236:	f001 fd23 	bl	8001c80 <HAL_RCC_OscConfig>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000240:	f000 f928 	bl	8000494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000244:	230f      	movs	r3, #15
 8000246:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000248:	2300      	movs	r3, #0
 800024a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000250:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000254:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800025a:	f107 0314 	add.w	r3, r7, #20
 800025e:	2100      	movs	r1, #0
 8000260:	4618      	mov	r0, r3
 8000262:	f001 ff8f 	bl	8002184 <HAL_RCC_ClockConfig>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800026c:	f000 f912 	bl	8000494 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000270:	2302      	movs	r3, #2
 8000272:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000274:	2300      	movs	r3, #0
 8000276:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	4618      	mov	r0, r3
 800027c:	f002 f910 	bl	80024a0 <HAL_RCCEx_PeriphCLKConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000286:	f000 f905 	bl	8000494 <Error_Handler>
  }
}
 800028a:	bf00      	nop
 800028c:	3750      	adds	r7, #80	@ 0x50
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
	...

08000294 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	2200      	movs	r2, #0
 800029e:	601a      	str	r2, [r3, #0]
 80002a0:	605a      	str	r2, [r3, #4]
 80002a2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002a4:	4b20      	ldr	r3, [pc, #128]	@ (8000328 <MX_ADC1_Init+0x94>)
 80002a6:	4a21      	ldr	r2, [pc, #132]	@ (800032c <MX_ADC1_Init+0x98>)
 80002a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000328 <MX_ADC1_Init+0x94>)
 80002ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80002b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000328 <MX_ADC1_Init+0x94>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000328 <MX_ADC1_Init+0x94>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002be:	4b1a      	ldr	r3, [pc, #104]	@ (8000328 <MX_ADC1_Init+0x94>)
 80002c0:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80002c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002c6:	4b18      	ldr	r3, [pc, #96]	@ (8000328 <MX_ADC1_Init+0x94>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80002cc:	4b16      	ldr	r3, [pc, #88]	@ (8000328 <MX_ADC1_Init+0x94>)
 80002ce:	2202      	movs	r2, #2
 80002d0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002d2:	4815      	ldr	r0, [pc, #84]	@ (8000328 <MX_ADC1_Init+0x94>)
 80002d4:	f000 fbbe 	bl	8000a54 <HAL_ADC_Init>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80002de:	f000 f8d9 	bl	8000494 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002e2:	2300      	movs	r3, #0
 80002e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002e6:	2301      	movs	r3, #1
 80002e8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002ea:	2300      	movs	r3, #0
 80002ec:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	4619      	mov	r1, r3
 80002f2:	480d      	ldr	r0, [pc, #52]	@ (8000328 <MX_ADC1_Init+0x94>)
 80002f4:	f000 fe72 	bl	8000fdc <HAL_ADC_ConfigChannel>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80002fe:	f000 f8c9 	bl	8000494 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000302:	2301      	movs	r3, #1
 8000304:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000306:	2302      	movs	r3, #2
 8000308:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	4619      	mov	r1, r3
 800030e:	4806      	ldr	r0, [pc, #24]	@ (8000328 <MX_ADC1_Init+0x94>)
 8000310:	f000 fe64 	bl	8000fdc <HAL_ADC_ConfigChannel>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800031a:	f000 f8bb 	bl	8000494 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800031e:	bf00      	nop
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	200001d8 	.word	0x200001d8
 800032c:	40012400 	.word	0x40012400

08000330 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000334:	4b11      	ldr	r3, [pc, #68]	@ (800037c <MX_USART1_UART_Init+0x4c>)
 8000336:	4a12      	ldr	r2, [pc, #72]	@ (8000380 <MX_USART1_UART_Init+0x50>)
 8000338:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800033a:	4b10      	ldr	r3, [pc, #64]	@ (800037c <MX_USART1_UART_Init+0x4c>)
 800033c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000340:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000342:	4b0e      	ldr	r3, [pc, #56]	@ (800037c <MX_USART1_UART_Init+0x4c>)
 8000344:	2200      	movs	r2, #0
 8000346:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000348:	4b0c      	ldr	r3, [pc, #48]	@ (800037c <MX_USART1_UART_Init+0x4c>)
 800034a:	2200      	movs	r2, #0
 800034c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800034e:	4b0b      	ldr	r3, [pc, #44]	@ (800037c <MX_USART1_UART_Init+0x4c>)
 8000350:	2200      	movs	r2, #0
 8000352:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000354:	4b09      	ldr	r3, [pc, #36]	@ (800037c <MX_USART1_UART_Init+0x4c>)
 8000356:	220c      	movs	r2, #12
 8000358:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800035a:	4b08      	ldr	r3, [pc, #32]	@ (800037c <MX_USART1_UART_Init+0x4c>)
 800035c:	2200      	movs	r2, #0
 800035e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000360:	4b06      	ldr	r3, [pc, #24]	@ (800037c <MX_USART1_UART_Init+0x4c>)
 8000362:	2200      	movs	r2, #0
 8000364:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000366:	4805      	ldr	r0, [pc, #20]	@ (800037c <MX_USART1_UART_Init+0x4c>)
 8000368:	f002 fa06 	bl	8002778 <HAL_UART_Init>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000372:	f000 f88f 	bl	8000494 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	2000024c 	.word	0x2000024c
 8000380:	40013800 	.word	0x40013800

08000384 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000388:	4b11      	ldr	r3, [pc, #68]	@ (80003d0 <MX_USART2_UART_Init+0x4c>)
 800038a:	4a12      	ldr	r2, [pc, #72]	@ (80003d4 <MX_USART2_UART_Init+0x50>)
 800038c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800038e:	4b10      	ldr	r3, [pc, #64]	@ (80003d0 <MX_USART2_UART_Init+0x4c>)
 8000390:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000394:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000396:	4b0e      	ldr	r3, [pc, #56]	@ (80003d0 <MX_USART2_UART_Init+0x4c>)
 8000398:	2200      	movs	r2, #0
 800039a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800039c:	4b0c      	ldr	r3, [pc, #48]	@ (80003d0 <MX_USART2_UART_Init+0x4c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003a2:	4b0b      	ldr	r3, [pc, #44]	@ (80003d0 <MX_USART2_UART_Init+0x4c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003a8:	4b09      	ldr	r3, [pc, #36]	@ (80003d0 <MX_USART2_UART_Init+0x4c>)
 80003aa:	220c      	movs	r2, #12
 80003ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ae:	4b08      	ldr	r3, [pc, #32]	@ (80003d0 <MX_USART2_UART_Init+0x4c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003b4:	4b06      	ldr	r3, [pc, #24]	@ (80003d0 <MX_USART2_UART_Init+0x4c>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003ba:	4805      	ldr	r0, [pc, #20]	@ (80003d0 <MX_USART2_UART_Init+0x4c>)
 80003bc:	f002 f9dc 	bl	8002778 <HAL_UART_Init>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003c6:	f000 f865 	bl	8000494 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	20000294 	.word	0x20000294
 80003d4:	40004400 	.word	0x40004400

080003d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003de:	4b0c      	ldr	r3, [pc, #48]	@ (8000410 <MX_DMA_Init+0x38>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000410 <MX_DMA_Init+0x38>)
 80003e4:	f043 0301 	orr.w	r3, r3, #1
 80003e8:	6153      	str	r3, [r2, #20]
 80003ea:	4b09      	ldr	r3, [pc, #36]	@ (8000410 <MX_DMA_Init+0x38>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	f003 0301 	and.w	r3, r3, #1
 80003f2:	607b      	str	r3, [r7, #4]
 80003f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2100      	movs	r1, #0
 80003fa:	200b      	movs	r0, #11
 80003fc:	f001 f859 	bl	80014b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000400:	200b      	movs	r0, #11
 8000402:	f001 f872 	bl	80014ea <HAL_NVIC_EnableIRQ>

}
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40021000 	.word	0x40021000

08000414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b086      	sub	sp, #24
 8000418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041a:	f107 0308 	add.w	r3, r7, #8
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000428:	4b18      	ldr	r3, [pc, #96]	@ (800048c <MX_GPIO_Init+0x78>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a17      	ldr	r2, [pc, #92]	@ (800048c <MX_GPIO_Init+0x78>)
 800042e:	f043 0320 	orr.w	r3, r3, #32
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b15      	ldr	r3, [pc, #84]	@ (800048c <MX_GPIO_Init+0x78>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0320 	and.w	r3, r3, #32
 800043c:	607b      	str	r3, [r7, #4]
 800043e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000440:	4b12      	ldr	r3, [pc, #72]	@ (800048c <MX_GPIO_Init+0x78>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a11      	ldr	r2, [pc, #68]	@ (800048c <MX_GPIO_Init+0x78>)
 8000446:	f043 0304 	orr.w	r3, r3, #4
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b0f      	ldr	r3, [pc, #60]	@ (800048c <MX_GPIO_Init+0x78>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f003 0304 	and.w	r3, r3, #4
 8000454:	603b      	str	r3, [r7, #0]
 8000456:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000458:	2200      	movs	r2, #0
 800045a:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 800045e:	480c      	ldr	r0, [pc, #48]	@ (8000490 <MX_GPIO_Init+0x7c>)
 8000460:	f001 fbf6 	bl	8001c50 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000464:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 8000468:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046a:	2301      	movs	r3, #1
 800046c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046e:	2300      	movs	r3, #0
 8000470:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000472:	2302      	movs	r3, #2
 8000474:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000476:	f107 0308 	add.w	r3, r7, #8
 800047a:	4619      	mov	r1, r3
 800047c:	4804      	ldr	r0, [pc, #16]	@ (8000490 <MX_GPIO_Init+0x7c>)
 800047e:	f001 fa63 	bl	8001948 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000482:	bf00      	nop
 8000484:	3718      	adds	r7, #24
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	40021000 	.word	0x40021000
 8000490:	40010800 	.word	0x40010800

08000494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000498:	b672      	cpsid	i
}
 800049a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800049c:	bf00      	nop
 800049e:	e7fd      	b.n	800049c <Error_Handler+0x8>

080004a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004a6:	4b15      	ldr	r3, [pc, #84]	@ (80004fc <HAL_MspInit+0x5c>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	4a14      	ldr	r2, [pc, #80]	@ (80004fc <HAL_MspInit+0x5c>)
 80004ac:	f043 0301 	orr.w	r3, r3, #1
 80004b0:	6193      	str	r3, [r2, #24]
 80004b2:	4b12      	ldr	r3, [pc, #72]	@ (80004fc <HAL_MspInit+0x5c>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	60bb      	str	r3, [r7, #8]
 80004bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004be:	4b0f      	ldr	r3, [pc, #60]	@ (80004fc <HAL_MspInit+0x5c>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	4a0e      	ldr	r2, [pc, #56]	@ (80004fc <HAL_MspInit+0x5c>)
 80004c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004c8:	61d3      	str	r3, [r2, #28]
 80004ca:	4b0c      	ldr	r3, [pc, #48]	@ (80004fc <HAL_MspInit+0x5c>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000500 <HAL_MspInit+0x60>)
 80004d8:	685b      	ldr	r3, [r3, #4]
 80004da:	60fb      	str	r3, [r7, #12]
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	4a04      	ldr	r2, [pc, #16]	@ (8000500 <HAL_MspInit+0x60>)
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr
 80004fc:	40021000 	.word	0x40021000
 8000500:	40010000 	.word	0x40010000

08000504 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050c:	f107 0310 	add.w	r3, r7, #16
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a28      	ldr	r2, [pc, #160]	@ (80005c0 <HAL_ADC_MspInit+0xbc>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d149      	bne.n	80005b8 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000524:	4b27      	ldr	r3, [pc, #156]	@ (80005c4 <HAL_ADC_MspInit+0xc0>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	4a26      	ldr	r2, [pc, #152]	@ (80005c4 <HAL_ADC_MspInit+0xc0>)
 800052a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800052e:	6193      	str	r3, [r2, #24]
 8000530:	4b24      	ldr	r3, [pc, #144]	@ (80005c4 <HAL_ADC_MspInit+0xc0>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800053c:	4b21      	ldr	r3, [pc, #132]	@ (80005c4 <HAL_ADC_MspInit+0xc0>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	4a20      	ldr	r2, [pc, #128]	@ (80005c4 <HAL_ADC_MspInit+0xc0>)
 8000542:	f043 0304 	orr.w	r3, r3, #4
 8000546:	6193      	str	r3, [r2, #24]
 8000548:	4b1e      	ldr	r3, [pc, #120]	@ (80005c4 <HAL_ADC_MspInit+0xc0>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	f003 0304 	and.w	r3, r3, #4
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000554:	2303      	movs	r3, #3
 8000556:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000558:	2303      	movs	r3, #3
 800055a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055c:	f107 0310 	add.w	r3, r7, #16
 8000560:	4619      	mov	r1, r3
 8000562:	4819      	ldr	r0, [pc, #100]	@ (80005c8 <HAL_ADC_MspInit+0xc4>)
 8000564:	f001 f9f0 	bl	8001948 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000568:	4b18      	ldr	r3, [pc, #96]	@ (80005cc <HAL_ADC_MspInit+0xc8>)
 800056a:	4a19      	ldr	r2, [pc, #100]	@ (80005d0 <HAL_ADC_MspInit+0xcc>)
 800056c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800056e:	4b17      	ldr	r3, [pc, #92]	@ (80005cc <HAL_ADC_MspInit+0xc8>)
 8000570:	2200      	movs	r2, #0
 8000572:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000574:	4b15      	ldr	r3, [pc, #84]	@ (80005cc <HAL_ADC_MspInit+0xc8>)
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800057a:	4b14      	ldr	r3, [pc, #80]	@ (80005cc <HAL_ADC_MspInit+0xc8>)
 800057c:	2280      	movs	r2, #128	@ 0x80
 800057e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000580:	4b12      	ldr	r3, [pc, #72]	@ (80005cc <HAL_ADC_MspInit+0xc8>)
 8000582:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000586:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000588:	4b10      	ldr	r3, [pc, #64]	@ (80005cc <HAL_ADC_MspInit+0xc8>)
 800058a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800058e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000590:	4b0e      	ldr	r3, [pc, #56]	@ (80005cc <HAL_ADC_MspInit+0xc8>)
 8000592:	2220      	movs	r2, #32
 8000594:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000596:	4b0d      	ldr	r3, [pc, #52]	@ (80005cc <HAL_ADC_MspInit+0xc8>)
 8000598:	2200      	movs	r2, #0
 800059a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800059c:	480b      	ldr	r0, [pc, #44]	@ (80005cc <HAL_ADC_MspInit+0xc8>)
 800059e:	f000 ffbf 	bl	8001520 <HAL_DMA_Init>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80005a8:	f7ff ff74 	bl	8000494 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4a07      	ldr	r2, [pc, #28]	@ (80005cc <HAL_ADC_MspInit+0xc8>)
 80005b0:	621a      	str	r2, [r3, #32]
 80005b2:	4a06      	ldr	r2, [pc, #24]	@ (80005cc <HAL_ADC_MspInit+0xc8>)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005b8:	bf00      	nop
 80005ba:	3720      	adds	r7, #32
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40012400 	.word	0x40012400
 80005c4:	40021000 	.word	0x40021000
 80005c8:	40010800 	.word	0x40010800
 80005cc:	20000208 	.word	0x20000208
 80005d0:	40020008 	.word	0x40020008

080005d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	@ 0x28
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	f107 0318 	add.w	r3, r7, #24
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a3b      	ldr	r2, [pc, #236]	@ (80006dc <HAL_UART_MspInit+0x108>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d13a      	bne.n	800066a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005f4:	4b3a      	ldr	r3, [pc, #232]	@ (80006e0 <HAL_UART_MspInit+0x10c>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a39      	ldr	r2, [pc, #228]	@ (80006e0 <HAL_UART_MspInit+0x10c>)
 80005fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b37      	ldr	r3, [pc, #220]	@ (80006e0 <HAL_UART_MspInit+0x10c>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000608:	617b      	str	r3, [r7, #20]
 800060a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800060c:	4b34      	ldr	r3, [pc, #208]	@ (80006e0 <HAL_UART_MspInit+0x10c>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	4a33      	ldr	r2, [pc, #204]	@ (80006e0 <HAL_UART_MspInit+0x10c>)
 8000612:	f043 0304 	orr.w	r3, r3, #4
 8000616:	6193      	str	r3, [r2, #24]
 8000618:	4b31      	ldr	r3, [pc, #196]	@ (80006e0 <HAL_UART_MspInit+0x10c>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	f003 0304 	and.w	r3, r3, #4
 8000620:	613b      	str	r3, [r7, #16]
 8000622:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000624:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062a:	2302      	movs	r3, #2
 800062c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800062e:	2303      	movs	r3, #3
 8000630:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000632:	f107 0318 	add.w	r3, r7, #24
 8000636:	4619      	mov	r1, r3
 8000638:	482a      	ldr	r0, [pc, #168]	@ (80006e4 <HAL_UART_MspInit+0x110>)
 800063a:	f001 f985 	bl	8001948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800063e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064c:	f107 0318 	add.w	r3, r7, #24
 8000650:	4619      	mov	r1, r3
 8000652:	4824      	ldr	r0, [pc, #144]	@ (80006e4 <HAL_UART_MspInit+0x110>)
 8000654:	f001 f978 	bl	8001948 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000658:	2200      	movs	r2, #0
 800065a:	2101      	movs	r1, #1
 800065c:	2025      	movs	r0, #37	@ 0x25
 800065e:	f000 ff28 	bl	80014b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000662:	2025      	movs	r0, #37	@ 0x25
 8000664:	f000 ff41 	bl	80014ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000668:	e034      	b.n	80006d4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a1e      	ldr	r2, [pc, #120]	@ (80006e8 <HAL_UART_MspInit+0x114>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d12f      	bne.n	80006d4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000674:	4b1a      	ldr	r3, [pc, #104]	@ (80006e0 <HAL_UART_MspInit+0x10c>)
 8000676:	69db      	ldr	r3, [r3, #28]
 8000678:	4a19      	ldr	r2, [pc, #100]	@ (80006e0 <HAL_UART_MspInit+0x10c>)
 800067a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800067e:	61d3      	str	r3, [r2, #28]
 8000680:	4b17      	ldr	r3, [pc, #92]	@ (80006e0 <HAL_UART_MspInit+0x10c>)
 8000682:	69db      	ldr	r3, [r3, #28]
 8000684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068c:	4b14      	ldr	r3, [pc, #80]	@ (80006e0 <HAL_UART_MspInit+0x10c>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a13      	ldr	r2, [pc, #76]	@ (80006e0 <HAL_UART_MspInit+0x10c>)
 8000692:	f043 0304 	orr.w	r3, r3, #4
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <HAL_UART_MspInit+0x10c>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0304 	and.w	r3, r3, #4
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006a4:	2304      	movs	r3, #4
 80006a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a8:	2302      	movs	r3, #2
 80006aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ac:	2303      	movs	r3, #3
 80006ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b0:	f107 0318 	add.w	r3, r7, #24
 80006b4:	4619      	mov	r1, r3
 80006b6:	480b      	ldr	r0, [pc, #44]	@ (80006e4 <HAL_UART_MspInit+0x110>)
 80006b8:	f001 f946 	bl	8001948 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006bc:	2308      	movs	r3, #8
 80006be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c8:	f107 0318 	add.w	r3, r7, #24
 80006cc:	4619      	mov	r1, r3
 80006ce:	4805      	ldr	r0, [pc, #20]	@ (80006e4 <HAL_UART_MspInit+0x110>)
 80006d0:	f001 f93a 	bl	8001948 <HAL_GPIO_Init>
}
 80006d4:	bf00      	nop
 80006d6:	3728      	adds	r7, #40	@ 0x28
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40013800 	.word	0x40013800
 80006e0:	40021000 	.word	0x40021000
 80006e4:	40010800 	.word	0x40010800
 80006e8:	40004400 	.word	0x40004400

080006ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006f0:	bf00      	nop
 80006f2:	e7fd      	b.n	80006f0 <NMI_Handler+0x4>

080006f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006f8:	bf00      	nop
 80006fa:	e7fd      	b.n	80006f8 <HardFault_Handler+0x4>

080006fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000700:	bf00      	nop
 8000702:	e7fd      	b.n	8000700 <MemManage_Handler+0x4>

08000704 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000708:	bf00      	nop
 800070a:	e7fd      	b.n	8000708 <BusFault_Handler+0x4>

0800070c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000710:	bf00      	nop
 8000712:	e7fd      	b.n	8000710 <UsageFault_Handler+0x4>

08000714 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr

08000720 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr

0800072c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800073c:	f000 f94a 	bl	80009d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}

08000744 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000748:	4802      	ldr	r0, [pc, #8]	@ (8000754 <DMA1_Channel1_IRQHandler+0x10>)
 800074a:	f000 fff7 	bl	800173c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000208 	.word	0x20000208

08000758 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&uart1.huart);
 800075c:	4802      	ldr	r0, [pc, #8]	@ (8000768 <USART1_IRQHandler+0x10>)
 800075e:	f002 f903 	bl	8002968 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	2000001c 	.word	0x2000001c

0800076c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  return 1;
 8000770:	2301      	movs	r3, #1
}
 8000772:	4618      	mov	r0, r3
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr

0800077a <_kill>:

int _kill(int pid, int sig)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
 8000782:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000784:	f003 fda2 	bl	80042cc <__errno>
 8000788:	4603      	mov	r3, r0
 800078a:	2216      	movs	r2, #22
 800078c:	601a      	str	r2, [r3, #0]
  return -1;
 800078e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000792:	4618      	mov	r0, r3
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <_exit>:

void _exit (int status)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80007a2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f7ff ffe7 	bl	800077a <_kill>
  while (1) {}    /* Make sure we hang here */
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <_exit+0x12>

080007b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
 80007c0:	e00a      	b.n	80007d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007c2:	f3af 8000 	nop.w
 80007c6:	4601      	mov	r1, r0
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	1c5a      	adds	r2, r3, #1
 80007cc:	60ba      	str	r2, [r7, #8]
 80007ce:	b2ca      	uxtb	r2, r1
 80007d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	3301      	adds	r3, #1
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	697a      	ldr	r2, [r7, #20]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	429a      	cmp	r2, r3
 80007de:	dbf0      	blt.n	80007c2 <_read+0x12>
  }

  return len;
 80007e0:	687b      	ldr	r3, [r7, #4]
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b086      	sub	sp, #24
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	60f8      	str	r0, [r7, #12]
 80007f2:	60b9      	str	r1, [r7, #8]
 80007f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	e009      	b.n	8000810 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	1c5a      	adds	r2, r3, #1
 8000800:	60ba      	str	r2, [r7, #8]
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	4618      	mov	r0, r3
 8000806:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	3301      	adds	r3, #1
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697a      	ldr	r2, [r7, #20]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	429a      	cmp	r2, r3
 8000816:	dbf1      	blt.n	80007fc <_write+0x12>
  }
  return len;
 8000818:	687b      	ldr	r3, [r7, #4]
}
 800081a:	4618      	mov	r0, r3
 800081c:	3718      	adds	r7, #24
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <_close>:

int _close(int file)
{
 8000822:	b480      	push	{r7}
 8000824:	b083      	sub	sp, #12
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800082a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800082e:	4618      	mov	r0, r3
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr

08000838 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000848:	605a      	str	r2, [r3, #4]
  return 0;
 800084a:	2300      	movs	r3, #0
}
 800084c:	4618      	mov	r0, r3
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr

08000856 <_isatty>:

int _isatty(int file)
{
 8000856:	b480      	push	{r7}
 8000858:	b083      	sub	sp, #12
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800085e:	2301      	movs	r3, #1
}
 8000860:	4618      	mov	r0, r3
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr

0800086a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800086a:	b480      	push	{r7}
 800086c:	b085      	sub	sp, #20
 800086e:	af00      	add	r7, sp, #0
 8000870:	60f8      	str	r0, [r7, #12]
 8000872:	60b9      	str	r1, [r7, #8]
 8000874:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000876:	2300      	movs	r3, #0
}
 8000878:	4618      	mov	r0, r3
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr
	...

08000884 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800088c:	4a14      	ldr	r2, [pc, #80]	@ (80008e0 <_sbrk+0x5c>)
 800088e:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <_sbrk+0x60>)
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000898:	4b13      	ldr	r3, [pc, #76]	@ (80008e8 <_sbrk+0x64>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d102      	bne.n	80008a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008a0:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <_sbrk+0x64>)
 80008a2:	4a12      	ldr	r2, [pc, #72]	@ (80008ec <_sbrk+0x68>)
 80008a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008a6:	4b10      	ldr	r3, [pc, #64]	@ (80008e8 <_sbrk+0x64>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4413      	add	r3, r2
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d207      	bcs.n	80008c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008b4:	f003 fd0a 	bl	80042cc <__errno>
 80008b8:	4603      	mov	r3, r0
 80008ba:	220c      	movs	r2, #12
 80008bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008c2:	e009      	b.n	80008d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008c4:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <_sbrk+0x64>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ca:	4b07      	ldr	r3, [pc, #28]	@ (80008e8 <_sbrk+0x64>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4413      	add	r3, r2
 80008d2:	4a05      	ldr	r2, [pc, #20]	@ (80008e8 <_sbrk+0x64>)
 80008d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008d6:	68fb      	ldr	r3, [r7, #12]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20005000 	.word	0x20005000
 80008e4:	00000400 	.word	0x00000400
 80008e8:	200002dc 	.word	0x200002dc
 80008ec:	20000648 	.word	0x20000648

080008f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr

080008fc <Reset_Handler>:
Reset_Handler:

/* Call the clock system initialization function.*/


    bl  SystemInit
 80008fc:	f7ff fff8 	bl	80008f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000900:	480b      	ldr	r0, [pc, #44]	@ (8000930 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000902:	490c      	ldr	r1, [pc, #48]	@ (8000934 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000904:	4a0c      	ldr	r2, [pc, #48]	@ (8000938 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000908:	e002      	b.n	8000910 <LoopCopyDataInit>

0800090a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800090c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090e:	3304      	adds	r3, #4

08000910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000914:	d3f9      	bcc.n	800090a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000916:	4a09      	ldr	r2, [pc, #36]	@ (800093c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000918:	4c09      	ldr	r4, [pc, #36]	@ (8000940 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800091c:	e001      	b.n	8000922 <LoopFillZerobss>

0800091e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000920:	3204      	adds	r2, #4

08000922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000924:	d3fb      	bcc.n	800091e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000926:	f003 fcd7 	bl	80042d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800092a:	f7ff fc4d 	bl	80001c8 <main>
  bx lr
 800092e:	4770      	bx	lr
  ldr r0, =_sdata
 8000930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000934:	200001bc 	.word	0x200001bc
  ldr r2, =_sidata
 8000938:	080056d0 	.word	0x080056d0
  ldr r2, =_sbss
 800093c:	200001bc 	.word	0x200001bc
  ldr r4, =_ebss
 8000940:	20000644 	.word	0x20000644

08000944 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000944:	e7fe      	b.n	8000944 <ADC1_2_IRQHandler>
	...

08000948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800094c:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <HAL_Init+0x28>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a07      	ldr	r2, [pc, #28]	@ (8000970 <HAL_Init+0x28>)
 8000952:	f043 0310 	orr.w	r3, r3, #16
 8000956:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000958:	2003      	movs	r0, #3
 800095a:	f000 fd9f 	bl	800149c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800095e:	200f      	movs	r0, #15
 8000960:	f000 f808 	bl	8000974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000964:	f7ff fd9c 	bl	80004a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40022000 	.word	0x40022000

08000974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800097c:	4b12      	ldr	r3, [pc, #72]	@ (80009c8 <HAL_InitTick+0x54>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b12      	ldr	r3, [pc, #72]	@ (80009cc <HAL_InitTick+0x58>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	4619      	mov	r1, r3
 8000986:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800098a:	fbb3 f3f1 	udiv	r3, r3, r1
 800098e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000992:	4618      	mov	r0, r3
 8000994:	f000 fdb7 	bl	8001506 <HAL_SYSTICK_Config>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	e00e      	b.n	80009c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b0f      	cmp	r3, #15
 80009a6:	d80a      	bhi.n	80009be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a8:	2200      	movs	r2, #0
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009b0:	f000 fd7f 	bl	80014b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b4:	4a06      	ldr	r2, [pc, #24]	@ (80009d0 <HAL_InitTick+0x5c>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
 80009bc:	e000      	b.n	80009c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000010 	.word	0x20000010
 80009cc:	20000018 	.word	0x20000018
 80009d0:	20000014 	.word	0x20000014

080009d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d8:	4b05      	ldr	r3, [pc, #20]	@ (80009f0 <HAL_IncTick+0x1c>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	4b05      	ldr	r3, [pc, #20]	@ (80009f4 <HAL_IncTick+0x20>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	4a03      	ldr	r2, [pc, #12]	@ (80009f4 <HAL_IncTick+0x20>)
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	20000018 	.word	0x20000018
 80009f4:	200002e0 	.word	0x200002e0

080009f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return uwTick;
 80009fc:	4b02      	ldr	r3, [pc, #8]	@ (8000a08 <HAL_GetTick+0x10>)
 80009fe:	681b      	ldr	r3, [r3, #0]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	200002e0 	.word	0x200002e0

08000a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a14:	f7ff fff0 	bl	80009f8 <HAL_GetTick>
 8000a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000a24:	d005      	beq.n	8000a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a26:	4b0a      	ldr	r3, [pc, #40]	@ (8000a50 <HAL_Delay+0x44>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	4413      	add	r3, r2
 8000a30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a32:	bf00      	nop
 8000a34:	f7ff ffe0 	bl	80009f8 <HAL_GetTick>
 8000a38:	4602      	mov	r2, r0
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d8f7      	bhi.n	8000a34 <HAL_Delay+0x28>
  {
  }
}
 8000a44:	bf00      	nop
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000018 	.word	0x20000018

08000a54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a60:	2300      	movs	r3, #0
 8000a62:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d101      	bne.n	8000a76 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e0be      	b.n	8000bf4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d109      	bne.n	8000a98 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2200      	movs	r2, #0
 8000a88:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff fd36 	bl	8000504 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f000 fbf1 	bl	8001280 <ADC_ConversionStop_Disable>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000aa6:	f003 0310 	and.w	r3, r3, #16
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	f040 8099 	bne.w	8000be2 <HAL_ADC_Init+0x18e>
 8000ab0:	7dfb      	ldrb	r3, [r7, #23]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	f040 8095 	bne.w	8000be2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000abc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ac0:	f023 0302 	bic.w	r3, r3, #2
 8000ac4:	f043 0202 	orr.w	r2, r3, #2
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ad4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	7b1b      	ldrb	r3, [r3, #12]
 8000ada:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000adc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000aec:	d003      	beq.n	8000af6 <HAL_ADC_Init+0xa2>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d102      	bne.n	8000afc <HAL_ADC_Init+0xa8>
 8000af6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000afa:	e000      	b.n	8000afe <HAL_ADC_Init+0xaa>
 8000afc:	2300      	movs	r3, #0
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	7d1b      	ldrb	r3, [r3, #20]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d119      	bne.n	8000b40 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	7b1b      	ldrb	r3, [r3, #12]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d109      	bne.n	8000b28 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	035a      	lsls	r2, r3, #13
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	e00b      	b.n	8000b40 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b2c:	f043 0220 	orr.w	r2, r3, #32
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b38:	f043 0201 	orr.w	r2, r3, #1
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	430a      	orrs	r2, r1
 8000b52:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	689a      	ldr	r2, [r3, #8]
 8000b5a:	4b28      	ldr	r3, [pc, #160]	@ (8000bfc <HAL_ADC_Init+0x1a8>)
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	6812      	ldr	r2, [r2, #0]
 8000b62:	68b9      	ldr	r1, [r7, #8]
 8000b64:	430b      	orrs	r3, r1
 8000b66:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b70:	d003      	beq.n	8000b7a <HAL_ADC_Init+0x126>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d104      	bne.n	8000b84 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	691b      	ldr	r3, [r3, #16]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	051b      	lsls	r3, r3, #20
 8000b82:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b8a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	430a      	orrs	r2, r1
 8000b96:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	689a      	ldr	r2, [r3, #8]
 8000b9e:	4b18      	ldr	r3, [pc, #96]	@ (8000c00 <HAL_ADC_Init+0x1ac>)
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d10b      	bne.n	8000bc0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2200      	movs	r2, #0
 8000bac:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bb2:	f023 0303 	bic.w	r3, r3, #3
 8000bb6:	f043 0201 	orr.w	r2, r3, #1
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bbe:	e018      	b.n	8000bf2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bc4:	f023 0312 	bic.w	r3, r3, #18
 8000bc8:	f043 0210 	orr.w	r2, r3, #16
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bd4:	f043 0201 	orr.w	r2, r3, #1
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000be0:	e007      	b.n	8000bf2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000be6:	f043 0210 	orr.w	r2, r3, #16
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	ffe1f7fd 	.word	0xffe1f7fd
 8000c00:	ff1f0efe 	.word	0xff1f0efe

08000c04 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d101      	bne.n	8000c1e <HAL_ADC_Start+0x1a>
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	e098      	b.n	8000d50 <HAL_ADC_Start+0x14c>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2201      	movs	r2, #1
 8000c22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f000 fad0 	bl	80011cc <ADC_Enable>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8087 	bne.w	8000d46 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000c40:	f023 0301 	bic.w	r3, r3, #1
 8000c44:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a41      	ldr	r2, [pc, #260]	@ (8000d58 <HAL_ADC_Start+0x154>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d105      	bne.n	8000c62 <HAL_ADC_Start+0x5e>
 8000c56:	4b41      	ldr	r3, [pc, #260]	@ (8000d5c <HAL_ADC_Start+0x158>)
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d115      	bne.n	8000c8e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c66:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d026      	beq.n	8000cca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c80:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000c84:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c8c:	e01d      	b.n	8000cca <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c92:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a2f      	ldr	r2, [pc, #188]	@ (8000d5c <HAL_ADC_Start+0x158>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d004      	beq.n	8000cae <HAL_ADC_Start+0xaa>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a2b      	ldr	r2, [pc, #172]	@ (8000d58 <HAL_ADC_Start+0x154>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d10d      	bne.n	8000cca <HAL_ADC_Start+0xc6>
 8000cae:	4b2b      	ldr	r3, [pc, #172]	@ (8000d5c <HAL_ADC_Start+0x158>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d007      	beq.n	8000cca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cbe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000cc2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d006      	beq.n	8000ce4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cda:	f023 0206 	bic.w	r2, r3, #6
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ce2:	e002      	b.n	8000cea <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f06f 0202 	mvn.w	r2, #2
 8000cfa:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000d06:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000d0a:	d113      	bne.n	8000d34 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d10:	4a11      	ldr	r2, [pc, #68]	@ (8000d58 <HAL_ADC_Start+0x154>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d105      	bne.n	8000d22 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d16:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <HAL_ADC_Start+0x158>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d108      	bne.n	8000d34 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	e00c      	b.n	8000d4e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	689a      	ldr	r2, [r3, #8]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	e003      	b.n	8000d4e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40012800 	.word	0x40012800
 8000d5c:	40012400 	.word	0x40012400

08000d60 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d101      	bne.n	8000d7a <HAL_ADC_Stop+0x1a>
 8000d76:	2302      	movs	r3, #2
 8000d78:	e01a      	b.n	8000db0 <HAL_ADC_Stop+0x50>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f000 fa7c 	bl	8001280 <ADC_ConversionStop_Disable>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d109      	bne.n	8000da6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d96:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000d9a:	f023 0301 	bic.w	r3, r3, #1
 8000d9e:	f043 0201 	orr.w	r2, r3, #1
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000db8:	b590      	push	{r4, r7, lr}
 8000dba:	b087      	sub	sp, #28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000dce:	f7ff fe13 	bl	80009f8 <HAL_GetTick>
 8000dd2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d00b      	beq.n	8000dfa <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000de6:	f043 0220 	orr.w	r2, r3, #32
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e0d3      	b.n	8000fa2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d131      	bne.n	8000e6c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e0e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d12a      	bne.n	8000e6c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e16:	e021      	b.n	8000e5c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e1e:	d01d      	beq.n	8000e5c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d007      	beq.n	8000e36 <HAL_ADC_PollForConversion+0x7e>
 8000e26:	f7ff fde7 	bl	80009f8 <HAL_GetTick>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	683a      	ldr	r2, [r7, #0]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d212      	bcs.n	8000e5c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f003 0302 	and.w	r3, r3, #2
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d10b      	bne.n	8000e5c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e48:	f043 0204 	orr.w	r2, r3, #4
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	e0a2      	b.n	8000fa2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d0d6      	beq.n	8000e18 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e6a:	e070      	b.n	8000f4e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000e6c:	4b4f      	ldr	r3, [pc, #316]	@ (8000fac <HAL_ADC_PollForConversion+0x1f4>)
 8000e6e:	681c      	ldr	r4, [r3, #0]
 8000e70:	2002      	movs	r0, #2
 8000e72:	f001 fbcb 	bl	800260c <HAL_RCCEx_GetPeriphCLKFreq>
 8000e76:	4603      	mov	r3, r0
 8000e78:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	6919      	ldr	r1, [r3, #16]
 8000e82:	4b4b      	ldr	r3, [pc, #300]	@ (8000fb0 <HAL_ADC_PollForConversion+0x1f8>)
 8000e84:	400b      	ands	r3, r1
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d118      	bne.n	8000ebc <HAL_ADC_PollForConversion+0x104>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	68d9      	ldr	r1, [r3, #12]
 8000e90:	4b48      	ldr	r3, [pc, #288]	@ (8000fb4 <HAL_ADC_PollForConversion+0x1fc>)
 8000e92:	400b      	ands	r3, r1
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d111      	bne.n	8000ebc <HAL_ADC_PollForConversion+0x104>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	6919      	ldr	r1, [r3, #16]
 8000e9e:	4b46      	ldr	r3, [pc, #280]	@ (8000fb8 <HAL_ADC_PollForConversion+0x200>)
 8000ea0:	400b      	ands	r3, r1
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d108      	bne.n	8000eb8 <HAL_ADC_PollForConversion+0x100>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	68d9      	ldr	r1, [r3, #12]
 8000eac:	4b43      	ldr	r3, [pc, #268]	@ (8000fbc <HAL_ADC_PollForConversion+0x204>)
 8000eae:	400b      	ands	r3, r1
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d101      	bne.n	8000eb8 <HAL_ADC_PollForConversion+0x100>
 8000eb4:	2314      	movs	r3, #20
 8000eb6:	e020      	b.n	8000efa <HAL_ADC_PollForConversion+0x142>
 8000eb8:	2329      	movs	r3, #41	@ 0x29
 8000eba:	e01e      	b.n	8000efa <HAL_ADC_PollForConversion+0x142>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	6919      	ldr	r1, [r3, #16]
 8000ec2:	4b3d      	ldr	r3, [pc, #244]	@ (8000fb8 <HAL_ADC_PollForConversion+0x200>)
 8000ec4:	400b      	ands	r3, r1
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d106      	bne.n	8000ed8 <HAL_ADC_PollForConversion+0x120>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	68d9      	ldr	r1, [r3, #12]
 8000ed0:	4b3a      	ldr	r3, [pc, #232]	@ (8000fbc <HAL_ADC_PollForConversion+0x204>)
 8000ed2:	400b      	ands	r3, r1
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d00d      	beq.n	8000ef4 <HAL_ADC_PollForConversion+0x13c>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	6919      	ldr	r1, [r3, #16]
 8000ede:	4b38      	ldr	r3, [pc, #224]	@ (8000fc0 <HAL_ADC_PollForConversion+0x208>)
 8000ee0:	400b      	ands	r3, r1
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d108      	bne.n	8000ef8 <HAL_ADC_PollForConversion+0x140>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	68d9      	ldr	r1, [r3, #12]
 8000eec:	4b34      	ldr	r3, [pc, #208]	@ (8000fc0 <HAL_ADC_PollForConversion+0x208>)
 8000eee:	400b      	ands	r3, r1
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d101      	bne.n	8000ef8 <HAL_ADC_PollForConversion+0x140>
 8000ef4:	2354      	movs	r3, #84	@ 0x54
 8000ef6:	e000      	b.n	8000efa <HAL_ADC_PollForConversion+0x142>
 8000ef8:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000efa:	fb02 f303 	mul.w	r3, r2, r3
 8000efe:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f00:	e021      	b.n	8000f46 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f08:	d01a      	beq.n	8000f40 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d007      	beq.n	8000f20 <HAL_ADC_PollForConversion+0x168>
 8000f10:	f7ff fd72 	bl	80009f8 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	683a      	ldr	r2, [r7, #0]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d20f      	bcs.n	8000f40 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d90b      	bls.n	8000f40 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f2c:	f043 0204 	orr.w	r2, r3, #4
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e030      	b.n	8000fa2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	3301      	adds	r3, #1
 8000f44:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d8d9      	bhi.n	8000f02 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f06f 0212 	mvn.w	r2, #18
 8000f56:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f5c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000f6e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000f72:	d115      	bne.n	8000fa0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d111      	bne.n	8000fa0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d105      	bne.n	8000fa0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f98:	f043 0201 	orr.w	r2, r3, #1
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	371c      	adds	r7, #28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd90      	pop	{r4, r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000010 	.word	0x20000010
 8000fb0:	24924924 	.word	0x24924924
 8000fb4:	00924924 	.word	0x00924924
 8000fb8:	12492492 	.word	0x12492492
 8000fbc:	00492492 	.word	0x00492492
 8000fc0:	00249249 	.word	0x00249249

08000fc4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr

08000fdc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d101      	bne.n	8000ffc <HAL_ADC_ConfigChannel+0x20>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	e0dc      	b.n	80011b6 <HAL_ADC_ConfigChannel+0x1da>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2201      	movs	r2, #1
 8001000:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	2b06      	cmp	r3, #6
 800100a:	d81c      	bhi.n	8001046 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	4613      	mov	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	3b05      	subs	r3, #5
 800101e:	221f      	movs	r2, #31
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	4019      	ands	r1, r3
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	6818      	ldr	r0, [r3, #0]
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685a      	ldr	r2, [r3, #4]
 8001030:	4613      	mov	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	3b05      	subs	r3, #5
 8001038:	fa00 f203 	lsl.w	r2, r0, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	430a      	orrs	r2, r1
 8001042:	635a      	str	r2, [r3, #52]	@ 0x34
 8001044:	e03c      	b.n	80010c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	2b0c      	cmp	r3, #12
 800104c:	d81c      	bhi.n	8001088 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	4613      	mov	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	3b23      	subs	r3, #35	@ 0x23
 8001060:	221f      	movs	r2, #31
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	4019      	ands	r1, r3
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	6818      	ldr	r0, [r3, #0]
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	4613      	mov	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	3b23      	subs	r3, #35	@ 0x23
 800107a:	fa00 f203 	lsl.w	r2, r0, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	430a      	orrs	r2, r1
 8001084:	631a      	str	r2, [r3, #48]	@ 0x30
 8001086:	e01b      	b.n	80010c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	3b41      	subs	r3, #65	@ 0x41
 800109a:	221f      	movs	r2, #31
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	4019      	ands	r1, r3
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	6818      	ldr	r0, [r3, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	4613      	mov	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	4413      	add	r3, r2
 80010b2:	3b41      	subs	r3, #65	@ 0x41
 80010b4:	fa00 f203 	lsl.w	r2, r0, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	430a      	orrs	r2, r1
 80010be:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b09      	cmp	r3, #9
 80010c6:	d91c      	bls.n	8001102 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68d9      	ldr	r1, [r3, #12]
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	4613      	mov	r3, r2
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	4413      	add	r3, r2
 80010d8:	3b1e      	subs	r3, #30
 80010da:	2207      	movs	r2, #7
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	4019      	ands	r1, r3
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	6898      	ldr	r0, [r3, #8]
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4613      	mov	r3, r2
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	4413      	add	r3, r2
 80010f2:	3b1e      	subs	r3, #30
 80010f4:	fa00 f203 	lsl.w	r2, r0, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	430a      	orrs	r2, r1
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	e019      	b.n	8001136 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6919      	ldr	r1, [r3, #16]
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4613      	mov	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4413      	add	r3, r2
 8001112:	2207      	movs	r2, #7
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	4019      	ands	r1, r3
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	6898      	ldr	r0, [r3, #8]
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4613      	mov	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4413      	add	r3, r2
 800112a:	fa00 f203 	lsl.w	r2, r0, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	430a      	orrs	r2, r1
 8001134:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b10      	cmp	r3, #16
 800113c:	d003      	beq.n	8001146 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001142:	2b11      	cmp	r3, #17
 8001144:	d132      	bne.n	80011ac <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a1d      	ldr	r2, [pc, #116]	@ (80011c0 <HAL_ADC_ConfigChannel+0x1e4>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d125      	bne.n	800119c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d126      	bne.n	80011ac <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800116c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b10      	cmp	r3, #16
 8001174:	d11a      	bne.n	80011ac <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001176:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a13      	ldr	r2, [pc, #76]	@ (80011c8 <HAL_ADC_ConfigChannel+0x1ec>)
 800117c:	fba2 2303 	umull	r2, r3, r2, r3
 8001180:	0c9a      	lsrs	r2, r3, #18
 8001182:	4613      	mov	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800118c:	e002      	b.n	8001194 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	3b01      	subs	r3, #1
 8001192:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f9      	bne.n	800118e <HAL_ADC_ConfigChannel+0x1b2>
 800119a:	e007      	b.n	80011ac <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011a0:	f043 0220 	orr.w	r2, r3, #32
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	40012400 	.word	0x40012400
 80011c4:	20000010 	.word	0x20000010
 80011c8:	431bde83 	.word	0x431bde83

080011cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80011d8:	2300      	movs	r3, #0
 80011da:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d040      	beq.n	800126c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f042 0201 	orr.w	r2, r2, #1
 80011f8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001278 <ADC_Enable+0xac>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a1f      	ldr	r2, [pc, #124]	@ (800127c <ADC_Enable+0xb0>)
 8001200:	fba2 2303 	umull	r2, r3, r2, r3
 8001204:	0c9b      	lsrs	r3, r3, #18
 8001206:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001208:	e002      	b.n	8001210 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	3b01      	subs	r3, #1
 800120e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1f9      	bne.n	800120a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001216:	f7ff fbef 	bl	80009f8 <HAL_GetTick>
 800121a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800121c:	e01f      	b.n	800125e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800121e:	f7ff fbeb 	bl	80009f8 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d918      	bls.n	800125e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	2b01      	cmp	r3, #1
 8001238:	d011      	beq.n	800125e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800123e:	f043 0210 	orr.w	r2, r3, #16
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800124a:	f043 0201 	orr.w	r2, r3, #1
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e007      	b.n	800126e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	2b01      	cmp	r3, #1
 800126a:	d1d8      	bne.n	800121e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000010 	.word	0x20000010
 800127c:	431bde83 	.word	0x431bde83

08001280 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b01      	cmp	r3, #1
 8001298:	d12e      	bne.n	80012f8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f022 0201 	bic.w	r2, r2, #1
 80012a8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012aa:	f7ff fba5 	bl	80009f8 <HAL_GetTick>
 80012ae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012b0:	e01b      	b.n	80012ea <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80012b2:	f7ff fba1 	bl	80009f8 <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d914      	bls.n	80012ea <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d10d      	bne.n	80012ea <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012d2:	f043 0210 	orr.w	r2, r3, #16
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012de:	f043 0201 	orr.w	r2, r3, #1
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e007      	b.n	80012fa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d0dc      	beq.n	80012b2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001314:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001320:	4013      	ands	r3, r2
 8001322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800132c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001330:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001336:	4a04      	ldr	r2, [pc, #16]	@ (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	60d3      	str	r3, [r2, #12]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001350:	4b04      	ldr	r3, [pc, #16]	@ (8001364 <__NVIC_GetPriorityGrouping+0x18>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	0a1b      	lsrs	r3, r3, #8
 8001356:	f003 0307 	and.w	r3, r3, #7
}
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	2b00      	cmp	r3, #0
 8001378:	db0b      	blt.n	8001392 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	f003 021f 	and.w	r2, r3, #31
 8001380:	4906      	ldr	r1, [pc, #24]	@ (800139c <__NVIC_EnableIRQ+0x34>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	095b      	lsrs	r3, r3, #5
 8001388:	2001      	movs	r0, #1
 800138a:	fa00 f202 	lsl.w	r2, r0, r2
 800138e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	e000e100 	.word	0xe000e100

080013a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	6039      	str	r1, [r7, #0]
 80013aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	db0a      	blt.n	80013ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	490c      	ldr	r1, [pc, #48]	@ (80013ec <__NVIC_SetPriority+0x4c>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	0112      	lsls	r2, r2, #4
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	440b      	add	r3, r1
 80013c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c8:	e00a      	b.n	80013e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4908      	ldr	r1, [pc, #32]	@ (80013f0 <__NVIC_SetPriority+0x50>)
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	3b04      	subs	r3, #4
 80013d8:	0112      	lsls	r2, r2, #4
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	440b      	add	r3, r1
 80013de:	761a      	strb	r2, [r3, #24]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000e100 	.word	0xe000e100
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b089      	sub	sp, #36	@ 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f1c3 0307 	rsb	r3, r3, #7
 800140e:	2b04      	cmp	r3, #4
 8001410:	bf28      	it	cs
 8001412:	2304      	movcs	r3, #4
 8001414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3304      	adds	r3, #4
 800141a:	2b06      	cmp	r3, #6
 800141c:	d902      	bls.n	8001424 <NVIC_EncodePriority+0x30>
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3b03      	subs	r3, #3
 8001422:	e000      	b.n	8001426 <NVIC_EncodePriority+0x32>
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43da      	mvns	r2, r3
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	401a      	ands	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800143c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	fa01 f303 	lsl.w	r3, r1, r3
 8001446:	43d9      	mvns	r1, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	4313      	orrs	r3, r2
         );
}
 800144e:	4618      	mov	r0, r3
 8001450:	3724      	adds	r7, #36	@ 0x24
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001468:	d301      	bcc.n	800146e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800146a:	2301      	movs	r3, #1
 800146c:	e00f      	b.n	800148e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146e:	4a0a      	ldr	r2, [pc, #40]	@ (8001498 <SysTick_Config+0x40>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001476:	210f      	movs	r1, #15
 8001478:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800147c:	f7ff ff90 	bl	80013a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001480:	4b05      	ldr	r3, [pc, #20]	@ (8001498 <SysTick_Config+0x40>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001486:	4b04      	ldr	r3, [pc, #16]	@ (8001498 <SysTick_Config+0x40>)
 8001488:	2207      	movs	r2, #7
 800148a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	e000e010 	.word	0xe000e010

0800149c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff ff2d 	bl	8001304 <__NVIC_SetPriorityGrouping>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b086      	sub	sp, #24
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
 80014be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c4:	f7ff ff42 	bl	800134c <__NVIC_GetPriorityGrouping>
 80014c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	68b9      	ldr	r1, [r7, #8]
 80014ce:	6978      	ldr	r0, [r7, #20]
 80014d0:	f7ff ff90 	bl	80013f4 <NVIC_EncodePriority>
 80014d4:	4602      	mov	r2, r0
 80014d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014da:	4611      	mov	r1, r2
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff5f 	bl	80013a0 <__NVIC_SetPriority>
}
 80014e2:	bf00      	nop
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff35 	bl	8001368 <__NVIC_EnableIRQ>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ffa2 	bl	8001458 <SysTick_Config>
 8001514:	4603      	mov	r3, r0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001528:	2300      	movs	r3, #0
 800152a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e043      	b.n	80015be <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	4b22      	ldr	r3, [pc, #136]	@ (80015c8 <HAL_DMA_Init+0xa8>)
 800153e:	4413      	add	r3, r2
 8001540:	4a22      	ldr	r2, [pc, #136]	@ (80015cc <HAL_DMA_Init+0xac>)
 8001542:	fba2 2303 	umull	r2, r3, r2, r3
 8001546:	091b      	lsrs	r3, r3, #4
 8001548:	009a      	lsls	r2, r3, #2
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a1f      	ldr	r2, [pc, #124]	@ (80015d0 <HAL_DMA_Init+0xb0>)
 8001552:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2202      	movs	r2, #2
 8001558:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800156a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800156e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001578:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001584:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001590:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	4313      	orrs	r3, r2
 800159c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr
 80015c8:	bffdfff8 	.word	0xbffdfff8
 80015cc:	cccccccd 	.word	0xcccccccd
 80015d0:	40020000 	.word	0x40020000

080015d4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015dc:	2300      	movs	r3, #0
 80015de:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d008      	beq.n	80015fe <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2204      	movs	r2, #4
 80015f0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e020      	b.n	8001640 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 020e 	bic.w	r2, r2, #14
 800160c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0201 	bic.w	r2, r2, #1
 800161c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001626:	2101      	movs	r1, #1
 8001628:	fa01 f202 	lsl.w	r2, r1, r2
 800162c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800163e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
	...

0800164c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001654:	2300      	movs	r3, #0
 8001656:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d005      	beq.n	8001670 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2204      	movs	r2, #4
 8001668:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	73fb      	strb	r3, [r7, #15]
 800166e:	e051      	b.n	8001714 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f022 020e 	bic.w	r2, r2, #14
 800167e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0201 	bic.w	r2, r2, #1
 800168e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a22      	ldr	r2, [pc, #136]	@ (8001720 <HAL_DMA_Abort_IT+0xd4>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d029      	beq.n	80016ee <HAL_DMA_Abort_IT+0xa2>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a21      	ldr	r2, [pc, #132]	@ (8001724 <HAL_DMA_Abort_IT+0xd8>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d022      	beq.n	80016ea <HAL_DMA_Abort_IT+0x9e>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001728 <HAL_DMA_Abort_IT+0xdc>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d01a      	beq.n	80016e4 <HAL_DMA_Abort_IT+0x98>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a1e      	ldr	r2, [pc, #120]	@ (800172c <HAL_DMA_Abort_IT+0xe0>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d012      	beq.n	80016de <HAL_DMA_Abort_IT+0x92>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a1c      	ldr	r2, [pc, #112]	@ (8001730 <HAL_DMA_Abort_IT+0xe4>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d00a      	beq.n	80016d8 <HAL_DMA_Abort_IT+0x8c>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a1b      	ldr	r2, [pc, #108]	@ (8001734 <HAL_DMA_Abort_IT+0xe8>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d102      	bne.n	80016d2 <HAL_DMA_Abort_IT+0x86>
 80016cc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80016d0:	e00e      	b.n	80016f0 <HAL_DMA_Abort_IT+0xa4>
 80016d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016d6:	e00b      	b.n	80016f0 <HAL_DMA_Abort_IT+0xa4>
 80016d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016dc:	e008      	b.n	80016f0 <HAL_DMA_Abort_IT+0xa4>
 80016de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016e2:	e005      	b.n	80016f0 <HAL_DMA_Abort_IT+0xa4>
 80016e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016e8:	e002      	b.n	80016f0 <HAL_DMA_Abort_IT+0xa4>
 80016ea:	2310      	movs	r3, #16
 80016ec:	e000      	b.n	80016f0 <HAL_DMA_Abort_IT+0xa4>
 80016ee:	2301      	movs	r3, #1
 80016f0:	4a11      	ldr	r2, [pc, #68]	@ (8001738 <HAL_DMA_Abort_IT+0xec>)
 80016f2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001708:	2b00      	cmp	r3, #0
 800170a:	d003      	beq.n	8001714 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	4798      	blx	r3
    } 
  }
  return status;
 8001714:	7bfb      	ldrb	r3, [r7, #15]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40020008 	.word	0x40020008
 8001724:	4002001c 	.word	0x4002001c
 8001728:	40020030 	.word	0x40020030
 800172c:	40020044 	.word	0x40020044
 8001730:	40020058 	.word	0x40020058
 8001734:	4002006c 	.word	0x4002006c
 8001738:	40020000 	.word	0x40020000

0800173c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001758:	2204      	movs	r2, #4
 800175a:	409a      	lsls	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4013      	ands	r3, r2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d04f      	beq.n	8001804 <HAL_DMA_IRQHandler+0xc8>
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	f003 0304 	and.w	r3, r3, #4
 800176a:	2b00      	cmp	r3, #0
 800176c:	d04a      	beq.n	8001804 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0320 	and.w	r3, r3, #32
 8001778:	2b00      	cmp	r3, #0
 800177a:	d107      	bne.n	800178c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 0204 	bic.w	r2, r2, #4
 800178a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a66      	ldr	r2, [pc, #408]	@ (800192c <HAL_DMA_IRQHandler+0x1f0>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d029      	beq.n	80017ea <HAL_DMA_IRQHandler+0xae>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a65      	ldr	r2, [pc, #404]	@ (8001930 <HAL_DMA_IRQHandler+0x1f4>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d022      	beq.n	80017e6 <HAL_DMA_IRQHandler+0xaa>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a63      	ldr	r2, [pc, #396]	@ (8001934 <HAL_DMA_IRQHandler+0x1f8>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d01a      	beq.n	80017e0 <HAL_DMA_IRQHandler+0xa4>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a62      	ldr	r2, [pc, #392]	@ (8001938 <HAL_DMA_IRQHandler+0x1fc>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d012      	beq.n	80017da <HAL_DMA_IRQHandler+0x9e>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a60      	ldr	r2, [pc, #384]	@ (800193c <HAL_DMA_IRQHandler+0x200>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d00a      	beq.n	80017d4 <HAL_DMA_IRQHandler+0x98>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a5f      	ldr	r2, [pc, #380]	@ (8001940 <HAL_DMA_IRQHandler+0x204>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d102      	bne.n	80017ce <HAL_DMA_IRQHandler+0x92>
 80017c8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017cc:	e00e      	b.n	80017ec <HAL_DMA_IRQHandler+0xb0>
 80017ce:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80017d2:	e00b      	b.n	80017ec <HAL_DMA_IRQHandler+0xb0>
 80017d4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80017d8:	e008      	b.n	80017ec <HAL_DMA_IRQHandler+0xb0>
 80017da:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017de:	e005      	b.n	80017ec <HAL_DMA_IRQHandler+0xb0>
 80017e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017e4:	e002      	b.n	80017ec <HAL_DMA_IRQHandler+0xb0>
 80017e6:	2340      	movs	r3, #64	@ 0x40
 80017e8:	e000      	b.n	80017ec <HAL_DMA_IRQHandler+0xb0>
 80017ea:	2304      	movs	r3, #4
 80017ec:	4a55      	ldr	r2, [pc, #340]	@ (8001944 <HAL_DMA_IRQHandler+0x208>)
 80017ee:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 8094 	beq.w	8001922 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001802:	e08e      	b.n	8001922 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001808:	2202      	movs	r2, #2
 800180a:	409a      	lsls	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4013      	ands	r3, r2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d056      	beq.n	80018c2 <HAL_DMA_IRQHandler+0x186>
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d051      	beq.n	80018c2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0320 	and.w	r3, r3, #32
 8001828:	2b00      	cmp	r3, #0
 800182a:	d10b      	bne.n	8001844 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 020a 	bic.w	r2, r2, #10
 800183a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a38      	ldr	r2, [pc, #224]	@ (800192c <HAL_DMA_IRQHandler+0x1f0>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d029      	beq.n	80018a2 <HAL_DMA_IRQHandler+0x166>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a37      	ldr	r2, [pc, #220]	@ (8001930 <HAL_DMA_IRQHandler+0x1f4>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d022      	beq.n	800189e <HAL_DMA_IRQHandler+0x162>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a35      	ldr	r2, [pc, #212]	@ (8001934 <HAL_DMA_IRQHandler+0x1f8>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d01a      	beq.n	8001898 <HAL_DMA_IRQHandler+0x15c>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a34      	ldr	r2, [pc, #208]	@ (8001938 <HAL_DMA_IRQHandler+0x1fc>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d012      	beq.n	8001892 <HAL_DMA_IRQHandler+0x156>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a32      	ldr	r2, [pc, #200]	@ (800193c <HAL_DMA_IRQHandler+0x200>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d00a      	beq.n	800188c <HAL_DMA_IRQHandler+0x150>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a31      	ldr	r2, [pc, #196]	@ (8001940 <HAL_DMA_IRQHandler+0x204>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d102      	bne.n	8001886 <HAL_DMA_IRQHandler+0x14a>
 8001880:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001884:	e00e      	b.n	80018a4 <HAL_DMA_IRQHandler+0x168>
 8001886:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800188a:	e00b      	b.n	80018a4 <HAL_DMA_IRQHandler+0x168>
 800188c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001890:	e008      	b.n	80018a4 <HAL_DMA_IRQHandler+0x168>
 8001892:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001896:	e005      	b.n	80018a4 <HAL_DMA_IRQHandler+0x168>
 8001898:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800189c:	e002      	b.n	80018a4 <HAL_DMA_IRQHandler+0x168>
 800189e:	2320      	movs	r3, #32
 80018a0:	e000      	b.n	80018a4 <HAL_DMA_IRQHandler+0x168>
 80018a2:	2302      	movs	r3, #2
 80018a4:	4a27      	ldr	r2, [pc, #156]	@ (8001944 <HAL_DMA_IRQHandler+0x208>)
 80018a6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d034      	beq.n	8001922 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80018c0:	e02f      	b.n	8001922 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c6:	2208      	movs	r2, #8
 80018c8:	409a      	lsls	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	4013      	ands	r3, r2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d028      	beq.n	8001924 <HAL_DMA_IRQHandler+0x1e8>
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	f003 0308 	and.w	r3, r3, #8
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d023      	beq.n	8001924 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f022 020e 	bic.w	r2, r2, #14
 80018ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018f4:	2101      	movs	r1, #1
 80018f6:	fa01 f202 	lsl.w	r2, r1, r2
 80018fa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	2b00      	cmp	r3, #0
 8001918:	d004      	beq.n	8001924 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	4798      	blx	r3
    }
  }
  return;
 8001922:	bf00      	nop
 8001924:	bf00      	nop
}
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40020008 	.word	0x40020008
 8001930:	4002001c 	.word	0x4002001c
 8001934:	40020030 	.word	0x40020030
 8001938:	40020044 	.word	0x40020044
 800193c:	40020058 	.word	0x40020058
 8001940:	4002006c 	.word	0x4002006c
 8001944:	40020000 	.word	0x40020000

08001948 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001948:	b480      	push	{r7}
 800194a:	b08b      	sub	sp, #44	@ 0x2c
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001952:	2300      	movs	r3, #0
 8001954:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001956:	2300      	movs	r3, #0
 8001958:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800195a:	e169      	b.n	8001c30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800195c:	2201      	movs	r2, #1
 800195e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	69fa      	ldr	r2, [r7, #28]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	429a      	cmp	r2, r3
 8001976:	f040 8158 	bne.w	8001c2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	4a9a      	ldr	r2, [pc, #616]	@ (8001be8 <HAL_GPIO_Init+0x2a0>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d05e      	beq.n	8001a42 <HAL_GPIO_Init+0xfa>
 8001984:	4a98      	ldr	r2, [pc, #608]	@ (8001be8 <HAL_GPIO_Init+0x2a0>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d875      	bhi.n	8001a76 <HAL_GPIO_Init+0x12e>
 800198a:	4a98      	ldr	r2, [pc, #608]	@ (8001bec <HAL_GPIO_Init+0x2a4>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d058      	beq.n	8001a42 <HAL_GPIO_Init+0xfa>
 8001990:	4a96      	ldr	r2, [pc, #600]	@ (8001bec <HAL_GPIO_Init+0x2a4>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d86f      	bhi.n	8001a76 <HAL_GPIO_Init+0x12e>
 8001996:	4a96      	ldr	r2, [pc, #600]	@ (8001bf0 <HAL_GPIO_Init+0x2a8>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d052      	beq.n	8001a42 <HAL_GPIO_Init+0xfa>
 800199c:	4a94      	ldr	r2, [pc, #592]	@ (8001bf0 <HAL_GPIO_Init+0x2a8>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d869      	bhi.n	8001a76 <HAL_GPIO_Init+0x12e>
 80019a2:	4a94      	ldr	r2, [pc, #592]	@ (8001bf4 <HAL_GPIO_Init+0x2ac>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d04c      	beq.n	8001a42 <HAL_GPIO_Init+0xfa>
 80019a8:	4a92      	ldr	r2, [pc, #584]	@ (8001bf4 <HAL_GPIO_Init+0x2ac>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d863      	bhi.n	8001a76 <HAL_GPIO_Init+0x12e>
 80019ae:	4a92      	ldr	r2, [pc, #584]	@ (8001bf8 <HAL_GPIO_Init+0x2b0>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d046      	beq.n	8001a42 <HAL_GPIO_Init+0xfa>
 80019b4:	4a90      	ldr	r2, [pc, #576]	@ (8001bf8 <HAL_GPIO_Init+0x2b0>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d85d      	bhi.n	8001a76 <HAL_GPIO_Init+0x12e>
 80019ba:	2b12      	cmp	r3, #18
 80019bc:	d82a      	bhi.n	8001a14 <HAL_GPIO_Init+0xcc>
 80019be:	2b12      	cmp	r3, #18
 80019c0:	d859      	bhi.n	8001a76 <HAL_GPIO_Init+0x12e>
 80019c2:	a201      	add	r2, pc, #4	@ (adr r2, 80019c8 <HAL_GPIO_Init+0x80>)
 80019c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c8:	08001a43 	.word	0x08001a43
 80019cc:	08001a1d 	.word	0x08001a1d
 80019d0:	08001a2f 	.word	0x08001a2f
 80019d4:	08001a71 	.word	0x08001a71
 80019d8:	08001a77 	.word	0x08001a77
 80019dc:	08001a77 	.word	0x08001a77
 80019e0:	08001a77 	.word	0x08001a77
 80019e4:	08001a77 	.word	0x08001a77
 80019e8:	08001a77 	.word	0x08001a77
 80019ec:	08001a77 	.word	0x08001a77
 80019f0:	08001a77 	.word	0x08001a77
 80019f4:	08001a77 	.word	0x08001a77
 80019f8:	08001a77 	.word	0x08001a77
 80019fc:	08001a77 	.word	0x08001a77
 8001a00:	08001a77 	.word	0x08001a77
 8001a04:	08001a77 	.word	0x08001a77
 8001a08:	08001a77 	.word	0x08001a77
 8001a0c:	08001a25 	.word	0x08001a25
 8001a10:	08001a39 	.word	0x08001a39
 8001a14:	4a79      	ldr	r2, [pc, #484]	@ (8001bfc <HAL_GPIO_Init+0x2b4>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d013      	beq.n	8001a42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a1a:	e02c      	b.n	8001a76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	623b      	str	r3, [r7, #32]
          break;
 8001a22:	e029      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	623b      	str	r3, [r7, #32]
          break;
 8001a2c:	e024      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	3308      	adds	r3, #8
 8001a34:	623b      	str	r3, [r7, #32]
          break;
 8001a36:	e01f      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	330c      	adds	r3, #12
 8001a3e:	623b      	str	r3, [r7, #32]
          break;
 8001a40:	e01a      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d102      	bne.n	8001a50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a4a:	2304      	movs	r3, #4
 8001a4c:	623b      	str	r3, [r7, #32]
          break;
 8001a4e:	e013      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d105      	bne.n	8001a64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a58:	2308      	movs	r3, #8
 8001a5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69fa      	ldr	r2, [r7, #28]
 8001a60:	611a      	str	r2, [r3, #16]
          break;
 8001a62:	e009      	b.n	8001a78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a64:	2308      	movs	r3, #8
 8001a66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69fa      	ldr	r2, [r7, #28]
 8001a6c:	615a      	str	r2, [r3, #20]
          break;
 8001a6e:	e003      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a70:	2300      	movs	r3, #0
 8001a72:	623b      	str	r3, [r7, #32]
          break;
 8001a74:	e000      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          break;
 8001a76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	2bff      	cmp	r3, #255	@ 0xff
 8001a7c:	d801      	bhi.n	8001a82 <HAL_GPIO_Init+0x13a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	e001      	b.n	8001a86 <HAL_GPIO_Init+0x13e>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3304      	adds	r3, #4
 8001a86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	2bff      	cmp	r3, #255	@ 0xff
 8001a8c:	d802      	bhi.n	8001a94 <HAL_GPIO_Init+0x14c>
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	e002      	b.n	8001a9a <HAL_GPIO_Init+0x152>
 8001a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a96:	3b08      	subs	r3, #8
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	210f      	movs	r1, #15
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	401a      	ands	r2, r3
 8001aac:	6a39      	ldr	r1, [r7, #32]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 80b1 	beq.w	8001c2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ac8:	4b4d      	ldr	r3, [pc, #308]	@ (8001c00 <HAL_GPIO_Init+0x2b8>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	4a4c      	ldr	r2, [pc, #304]	@ (8001c00 <HAL_GPIO_Init+0x2b8>)
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	6193      	str	r3, [r2, #24]
 8001ad4:	4b4a      	ldr	r3, [pc, #296]	@ (8001c00 <HAL_GPIO_Init+0x2b8>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ae0:	4a48      	ldr	r2, [pc, #288]	@ (8001c04 <HAL_GPIO_Init+0x2bc>)
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae4:	089b      	lsrs	r3, r3, #2
 8001ae6:	3302      	adds	r3, #2
 8001ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	220f      	movs	r2, #15
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	4013      	ands	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a40      	ldr	r2, [pc, #256]	@ (8001c08 <HAL_GPIO_Init+0x2c0>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d013      	beq.n	8001b34 <HAL_GPIO_Init+0x1ec>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a3f      	ldr	r2, [pc, #252]	@ (8001c0c <HAL_GPIO_Init+0x2c4>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d00d      	beq.n	8001b30 <HAL_GPIO_Init+0x1e8>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a3e      	ldr	r2, [pc, #248]	@ (8001c10 <HAL_GPIO_Init+0x2c8>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d007      	beq.n	8001b2c <HAL_GPIO_Init+0x1e4>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a3d      	ldr	r2, [pc, #244]	@ (8001c14 <HAL_GPIO_Init+0x2cc>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d101      	bne.n	8001b28 <HAL_GPIO_Init+0x1e0>
 8001b24:	2303      	movs	r3, #3
 8001b26:	e006      	b.n	8001b36 <HAL_GPIO_Init+0x1ee>
 8001b28:	2304      	movs	r3, #4
 8001b2a:	e004      	b.n	8001b36 <HAL_GPIO_Init+0x1ee>
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	e002      	b.n	8001b36 <HAL_GPIO_Init+0x1ee>
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <HAL_GPIO_Init+0x1ee>
 8001b34:	2300      	movs	r3, #0
 8001b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b38:	f002 0203 	and.w	r2, r2, #3
 8001b3c:	0092      	lsls	r2, r2, #2
 8001b3e:	4093      	lsls	r3, r2
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b46:	492f      	ldr	r1, [pc, #188]	@ (8001c04 <HAL_GPIO_Init+0x2bc>)
 8001b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4a:	089b      	lsrs	r3, r3, #2
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d006      	beq.n	8001b6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b60:	4b2d      	ldr	r3, [pc, #180]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	492c      	ldr	r1, [pc, #176]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	608b      	str	r3, [r1, #8]
 8001b6c:	e006      	b.n	8001b7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	4928      	ldr	r1, [pc, #160]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d006      	beq.n	8001b96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b88:	4b23      	ldr	r3, [pc, #140]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	4922      	ldr	r1, [pc, #136]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	60cb      	str	r3, [r1, #12]
 8001b94:	e006      	b.n	8001ba4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b96:	4b20      	ldr	r3, [pc, #128]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	491e      	ldr	r1, [pc, #120]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d006      	beq.n	8001bbe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bb0:	4b19      	ldr	r3, [pc, #100]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	4918      	ldr	r1, [pc, #96]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	604b      	str	r3, [r1, #4]
 8001bbc:	e006      	b.n	8001bcc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bbe:	4b16      	ldr	r3, [pc, #88]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	4914      	ldr	r1, [pc, #80]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001bc8:	4013      	ands	r3, r2
 8001bca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d021      	beq.n	8001c1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	490e      	ldr	r1, [pc, #56]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	600b      	str	r3, [r1, #0]
 8001be4:	e021      	b.n	8001c2a <HAL_GPIO_Init+0x2e2>
 8001be6:	bf00      	nop
 8001be8:	10320000 	.word	0x10320000
 8001bec:	10310000 	.word	0x10310000
 8001bf0:	10220000 	.word	0x10220000
 8001bf4:	10210000 	.word	0x10210000
 8001bf8:	10120000 	.word	0x10120000
 8001bfc:	10110000 	.word	0x10110000
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40010000 	.word	0x40010000
 8001c08:	40010800 	.word	0x40010800
 8001c0c:	40010c00 	.word	0x40010c00
 8001c10:	40011000 	.word	0x40011000
 8001c14:	40011400 	.word	0x40011400
 8001c18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c4c <HAL_GPIO_Init+0x304>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	4909      	ldr	r1, [pc, #36]	@ (8001c4c <HAL_GPIO_Init+0x304>)
 8001c26:	4013      	ands	r3, r2
 8001c28:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c36:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f47f ae8e 	bne.w	800195c <HAL_GPIO_Init+0x14>
  }
}
 8001c40:	bf00      	nop
 8001c42:	bf00      	nop
 8001c44:	372c      	adds	r7, #44	@ 0x2c
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	40010400 	.word	0x40010400

08001c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	807b      	strh	r3, [r7, #2]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c60:	787b      	ldrb	r3, [r7, #1]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c66:	887a      	ldrh	r2, [r7, #2]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c6c:	e003      	b.n	8001c76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c6e:	887b      	ldrh	r3, [r7, #2]
 8001c70:	041a      	lsls	r2, r3, #16
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	611a      	str	r2, [r3, #16]
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e272      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 8087 	beq.w	8001dae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ca0:	4b92      	ldr	r3, [pc, #584]	@ (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 030c 	and.w	r3, r3, #12
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d00c      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cac:	4b8f      	ldr	r3, [pc, #572]	@ (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 030c 	and.w	r3, r3, #12
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d112      	bne.n	8001cde <HAL_RCC_OscConfig+0x5e>
 8001cb8:	4b8c      	ldr	r3, [pc, #560]	@ (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cc4:	d10b      	bne.n	8001cde <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc6:	4b89      	ldr	r3, [pc, #548]	@ (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d06c      	beq.n	8001dac <HAL_RCC_OscConfig+0x12c>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d168      	bne.n	8001dac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e24c      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ce6:	d106      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x76>
 8001ce8:	4b80      	ldr	r3, [pc, #512]	@ (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a7f      	ldr	r2, [pc, #508]	@ (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001cee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	e02e      	b.n	8001d54 <HAL_RCC_OscConfig+0xd4>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10c      	bne.n	8001d18 <HAL_RCC_OscConfig+0x98>
 8001cfe:	4b7b      	ldr	r3, [pc, #492]	@ (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a7a      	ldr	r2, [pc, #488]	@ (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	4b78      	ldr	r3, [pc, #480]	@ (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a77      	ldr	r2, [pc, #476]	@ (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	e01d      	b.n	8001d54 <HAL_RCC_OscConfig+0xd4>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d20:	d10c      	bne.n	8001d3c <HAL_RCC_OscConfig+0xbc>
 8001d22:	4b72      	ldr	r3, [pc, #456]	@ (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a71      	ldr	r2, [pc, #452]	@ (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	4b6f      	ldr	r3, [pc, #444]	@ (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a6e      	ldr	r2, [pc, #440]	@ (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	e00b      	b.n	8001d54 <HAL_RCC_OscConfig+0xd4>
 8001d3c:	4b6b      	ldr	r3, [pc, #428]	@ (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a6a      	ldr	r2, [pc, #424]	@ (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	4b68      	ldr	r3, [pc, #416]	@ (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a67      	ldr	r2, [pc, #412]	@ (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d013      	beq.n	8001d84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5c:	f7fe fe4c 	bl	80009f8 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d64:	f7fe fe48 	bl	80009f8 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b64      	cmp	r3, #100	@ 0x64
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e200      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d76:	4b5d      	ldr	r3, [pc, #372]	@ (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCC_OscConfig+0xe4>
 8001d82:	e014      	b.n	8001dae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d84:	f7fe fe38 	bl	80009f8 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d8c:	f7fe fe34 	bl	80009f8 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b64      	cmp	r3, #100	@ 0x64
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e1ec      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d9e:	4b53      	ldr	r3, [pc, #332]	@ (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f0      	bne.n	8001d8c <HAL_RCC_OscConfig+0x10c>
 8001daa:	e000      	b.n	8001dae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d063      	beq.n	8001e82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dba:	4b4c      	ldr	r3, [pc, #304]	@ (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00b      	beq.n	8001dde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dc6:	4b49      	ldr	r3, [pc, #292]	@ (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	2b08      	cmp	r3, #8
 8001dd0:	d11c      	bne.n	8001e0c <HAL_RCC_OscConfig+0x18c>
 8001dd2:	4b46      	ldr	r3, [pc, #280]	@ (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d116      	bne.n	8001e0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dde:	4b43      	ldr	r3, [pc, #268]	@ (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d005      	beq.n	8001df6 <HAL_RCC_OscConfig+0x176>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d001      	beq.n	8001df6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e1c0      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df6:	4b3d      	ldr	r3, [pc, #244]	@ (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	4939      	ldr	r1, [pc, #228]	@ (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0a:	e03a      	b.n	8001e82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d020      	beq.n	8001e56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e14:	4b36      	ldr	r3, [pc, #216]	@ (8001ef0 <HAL_RCC_OscConfig+0x270>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1a:	f7fe fded 	bl	80009f8 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e22:	f7fe fde9 	bl	80009f8 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e1a1      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e34:	4b2d      	ldr	r3, [pc, #180]	@ (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0f0      	beq.n	8001e22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e40:	4b2a      	ldr	r3, [pc, #168]	@ (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	4927      	ldr	r1, [pc, #156]	@ (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	600b      	str	r3, [r1, #0]
 8001e54:	e015      	b.n	8001e82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e56:	4b26      	ldr	r3, [pc, #152]	@ (8001ef0 <HAL_RCC_OscConfig+0x270>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5c:	f7fe fdcc 	bl	80009f8 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e64:	f7fe fdc8 	bl	80009f8 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e180      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e76:	4b1d      	ldr	r3, [pc, #116]	@ (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f0      	bne.n	8001e64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d03a      	beq.n	8001f04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d019      	beq.n	8001eca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e96:	4b17      	ldr	r3, [pc, #92]	@ (8001ef4 <HAL_RCC_OscConfig+0x274>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9c:	f7fe fdac 	bl	80009f8 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea4:	f7fe fda8 	bl	80009f8 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e160      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001eec <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ec2:	2001      	movs	r0, #1
 8001ec4:	f000 face 	bl	8002464 <RCC_Delay>
 8001ec8:	e01c      	b.n	8001f04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef4 <HAL_RCC_OscConfig+0x274>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed0:	f7fe fd92 	bl	80009f8 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed6:	e00f      	b.n	8001ef8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed8:	f7fe fd8e 	bl	80009f8 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d908      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e146      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	42420000 	.word	0x42420000
 8001ef4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef8:	4b92      	ldr	r3, [pc, #584]	@ (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1e9      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 80a6 	beq.w	800205e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f12:	2300      	movs	r3, #0
 8001f14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f16:	4b8b      	ldr	r3, [pc, #556]	@ (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10d      	bne.n	8001f3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f22:	4b88      	ldr	r3, [pc, #544]	@ (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	4a87      	ldr	r2, [pc, #540]	@ (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001f28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f2c:	61d3      	str	r3, [r2, #28]
 8001f2e:	4b85      	ldr	r3, [pc, #532]	@ (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f36:	60bb      	str	r3, [r7, #8]
 8001f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3e:	4b82      	ldr	r3, [pc, #520]	@ (8002148 <HAL_RCC_OscConfig+0x4c8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d118      	bne.n	8001f7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f4a:	4b7f      	ldr	r3, [pc, #508]	@ (8002148 <HAL_RCC_OscConfig+0x4c8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a7e      	ldr	r2, [pc, #504]	@ (8002148 <HAL_RCC_OscConfig+0x4c8>)
 8001f50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f56:	f7fe fd4f 	bl	80009f8 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f5e:	f7fe fd4b 	bl	80009f8 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b64      	cmp	r3, #100	@ 0x64
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e103      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f70:	4b75      	ldr	r3, [pc, #468]	@ (8002148 <HAL_RCC_OscConfig+0x4c8>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0f0      	beq.n	8001f5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d106      	bne.n	8001f92 <HAL_RCC_OscConfig+0x312>
 8001f84:	4b6f      	ldr	r3, [pc, #444]	@ (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	4a6e      	ldr	r2, [pc, #440]	@ (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	6213      	str	r3, [r2, #32]
 8001f90:	e02d      	b.n	8001fee <HAL_RCC_OscConfig+0x36e>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10c      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x334>
 8001f9a:	4b6a      	ldr	r3, [pc, #424]	@ (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	4a69      	ldr	r2, [pc, #420]	@ (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001fa0:	f023 0301 	bic.w	r3, r3, #1
 8001fa4:	6213      	str	r3, [r2, #32]
 8001fa6:	4b67      	ldr	r3, [pc, #412]	@ (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	4a66      	ldr	r2, [pc, #408]	@ (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001fac:	f023 0304 	bic.w	r3, r3, #4
 8001fb0:	6213      	str	r3, [r2, #32]
 8001fb2:	e01c      	b.n	8001fee <HAL_RCC_OscConfig+0x36e>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	2b05      	cmp	r3, #5
 8001fba:	d10c      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x356>
 8001fbc:	4b61      	ldr	r3, [pc, #388]	@ (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	4a60      	ldr	r2, [pc, #384]	@ (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001fc2:	f043 0304 	orr.w	r3, r3, #4
 8001fc6:	6213      	str	r3, [r2, #32]
 8001fc8:	4b5e      	ldr	r3, [pc, #376]	@ (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	4a5d      	ldr	r2, [pc, #372]	@ (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6213      	str	r3, [r2, #32]
 8001fd4:	e00b      	b.n	8001fee <HAL_RCC_OscConfig+0x36e>
 8001fd6:	4b5b      	ldr	r3, [pc, #364]	@ (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	4a5a      	ldr	r2, [pc, #360]	@ (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	f023 0301 	bic.w	r3, r3, #1
 8001fe0:	6213      	str	r3, [r2, #32]
 8001fe2:	4b58      	ldr	r3, [pc, #352]	@ (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	4a57      	ldr	r2, [pc, #348]	@ (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	f023 0304 	bic.w	r3, r3, #4
 8001fec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d015      	beq.n	8002022 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff6:	f7fe fcff 	bl	80009f8 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ffc:	e00a      	b.n	8002014 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffe:	f7fe fcfb 	bl	80009f8 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	f241 3288 	movw	r2, #5000	@ 0x1388
 800200c:	4293      	cmp	r3, r2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e0b1      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002014:	4b4b      	ldr	r3, [pc, #300]	@ (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0ee      	beq.n	8001ffe <HAL_RCC_OscConfig+0x37e>
 8002020:	e014      	b.n	800204c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002022:	f7fe fce9 	bl	80009f8 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002028:	e00a      	b.n	8002040 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202a:	f7fe fce5 	bl	80009f8 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002038:	4293      	cmp	r3, r2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e09b      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002040:	4b40      	ldr	r3, [pc, #256]	@ (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1ee      	bne.n	800202a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800204c:	7dfb      	ldrb	r3, [r7, #23]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d105      	bne.n	800205e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002052:	4b3c      	ldr	r3, [pc, #240]	@ (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	4a3b      	ldr	r2, [pc, #236]	@ (8002144 <HAL_RCC_OscConfig+0x4c4>)
 8002058:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800205c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 8087 	beq.w	8002176 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002068:	4b36      	ldr	r3, [pc, #216]	@ (8002144 <HAL_RCC_OscConfig+0x4c4>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 030c 	and.w	r3, r3, #12
 8002070:	2b08      	cmp	r3, #8
 8002072:	d061      	beq.n	8002138 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	2b02      	cmp	r3, #2
 800207a:	d146      	bne.n	800210a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207c:	4b33      	ldr	r3, [pc, #204]	@ (800214c <HAL_RCC_OscConfig+0x4cc>)
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002082:	f7fe fcb9 	bl	80009f8 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208a:	f7fe fcb5 	bl	80009f8 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e06d      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209c:	4b29      	ldr	r3, [pc, #164]	@ (8002144 <HAL_RCC_OscConfig+0x4c4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1f0      	bne.n	800208a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020b0:	d108      	bne.n	80020c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020b2:	4b24      	ldr	r3, [pc, #144]	@ (8002144 <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	4921      	ldr	r1, [pc, #132]	@ (8002144 <HAL_RCC_OscConfig+0x4c4>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002144 <HAL_RCC_OscConfig+0x4c4>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a19      	ldr	r1, [r3, #32]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d4:	430b      	orrs	r3, r1
 80020d6:	491b      	ldr	r1, [pc, #108]	@ (8002144 <HAL_RCC_OscConfig+0x4c4>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020dc:	4b1b      	ldr	r3, [pc, #108]	@ (800214c <HAL_RCC_OscConfig+0x4cc>)
 80020de:	2201      	movs	r2, #1
 80020e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e2:	f7fe fc89 	bl	80009f8 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ea:	f7fe fc85 	bl	80009f8 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e03d      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020fc:	4b11      	ldr	r3, [pc, #68]	@ (8002144 <HAL_RCC_OscConfig+0x4c4>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0f0      	beq.n	80020ea <HAL_RCC_OscConfig+0x46a>
 8002108:	e035      	b.n	8002176 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210a:	4b10      	ldr	r3, [pc, #64]	@ (800214c <HAL_RCC_OscConfig+0x4cc>)
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002110:	f7fe fc72 	bl	80009f8 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002118:	f7fe fc6e 	bl	80009f8 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e026      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800212a:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <HAL_RCC_OscConfig+0x4c4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0x498>
 8002136:	e01e      	b.n	8002176 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d107      	bne.n	8002150 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e019      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
 8002144:	40021000 	.word	0x40021000
 8002148:	40007000 	.word	0x40007000
 800214c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002150:	4b0b      	ldr	r3, [pc, #44]	@ (8002180 <HAL_RCC_OscConfig+0x500>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	429a      	cmp	r2, r3
 8002162:	d106      	bne.n	8002172 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216e:	429a      	cmp	r2, r3
 8002170:	d001      	beq.n	8002176 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40021000 	.word	0x40021000

08002184 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e0d0      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002198:	4b6a      	ldr	r3, [pc, #424]	@ (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d910      	bls.n	80021c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a6:	4b67      	ldr	r3, [pc, #412]	@ (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f023 0207 	bic.w	r2, r3, #7
 80021ae:	4965      	ldr	r1, [pc, #404]	@ (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b6:	4b63      	ldr	r3, [pc, #396]	@ (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d001      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0b8      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d020      	beq.n	8002216 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021e0:	4b59      	ldr	r3, [pc, #356]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	4a58      	ldr	r2, [pc, #352]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80021ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021f8:	4b53      	ldr	r3, [pc, #332]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4a52      	ldr	r2, [pc, #328]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002202:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002204:	4b50      	ldr	r3, [pc, #320]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	494d      	ldr	r1, [pc, #308]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002212:	4313      	orrs	r3, r2
 8002214:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d040      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d107      	bne.n	800223a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222a:	4b47      	ldr	r3, [pc, #284]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d115      	bne.n	8002262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e07f      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b02      	cmp	r3, #2
 8002240:	d107      	bne.n	8002252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002242:	4b41      	ldr	r3, [pc, #260]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d109      	bne.n	8002262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e073      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002252:	4b3d      	ldr	r3, [pc, #244]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e06b      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002262:	4b39      	ldr	r3, [pc, #228]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f023 0203 	bic.w	r2, r3, #3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	4936      	ldr	r1, [pc, #216]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002270:	4313      	orrs	r3, r2
 8002272:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002274:	f7fe fbc0 	bl	80009f8 <HAL_GetTick>
 8002278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227a:	e00a      	b.n	8002292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800227c:	f7fe fbbc 	bl	80009f8 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800228a:	4293      	cmp	r3, r2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e053      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002292:	4b2d      	ldr	r3, [pc, #180]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 020c 	and.w	r2, r3, #12
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d1eb      	bne.n	800227c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022a4:	4b27      	ldr	r3, [pc, #156]	@ (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d210      	bcs.n	80022d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b2:	4b24      	ldr	r3, [pc, #144]	@ (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 0207 	bic.w	r2, r3, #7
 80022ba:	4922      	ldr	r1, [pc, #136]	@ (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	4313      	orrs	r3, r2
 80022c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c2:	4b20      	ldr	r3, [pc, #128]	@ (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d001      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e032      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d008      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e0:	4b19      	ldr	r3, [pc, #100]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	4916      	ldr	r1, [pc, #88]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d009      	beq.n	8002312 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022fe:	4b12      	ldr	r3, [pc, #72]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	490e      	ldr	r1, [pc, #56]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 800230e:	4313      	orrs	r3, r2
 8002310:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002312:	f000 f821 	bl	8002358 <HAL_RCC_GetSysClockFreq>
 8002316:	4602      	mov	r2, r0
 8002318:	4b0b      	ldr	r3, [pc, #44]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	490a      	ldr	r1, [pc, #40]	@ (800234c <HAL_RCC_ClockConfig+0x1c8>)
 8002324:	5ccb      	ldrb	r3, [r1, r3]
 8002326:	fa22 f303 	lsr.w	r3, r2, r3
 800232a:	4a09      	ldr	r2, [pc, #36]	@ (8002350 <HAL_RCC_ClockConfig+0x1cc>)
 800232c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800232e:	4b09      	ldr	r3, [pc, #36]	@ (8002354 <HAL_RCC_ClockConfig+0x1d0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe fb1e 	bl	8000974 <HAL_InitTick>

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40022000 	.word	0x40022000
 8002348:	40021000 	.word	0x40021000
 800234c:	080054a0 	.word	0x080054a0
 8002350:	20000010 	.word	0x20000010
 8002354:	20000014 	.word	0x20000014

08002358 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002358:	b480      	push	{r7}
 800235a:	b087      	sub	sp, #28
 800235c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	2300      	movs	r3, #0
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	2300      	movs	r3, #0
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	2300      	movs	r3, #0
 800236c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002372:	4b1e      	ldr	r3, [pc, #120]	@ (80023ec <HAL_RCC_GetSysClockFreq+0x94>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f003 030c 	and.w	r3, r3, #12
 800237e:	2b04      	cmp	r3, #4
 8002380:	d002      	beq.n	8002388 <HAL_RCC_GetSysClockFreq+0x30>
 8002382:	2b08      	cmp	r3, #8
 8002384:	d003      	beq.n	800238e <HAL_RCC_GetSysClockFreq+0x36>
 8002386:	e027      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002388:	4b19      	ldr	r3, [pc, #100]	@ (80023f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800238a:	613b      	str	r3, [r7, #16]
      break;
 800238c:	e027      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	0c9b      	lsrs	r3, r3, #18
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	4a17      	ldr	r2, [pc, #92]	@ (80023f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002398:	5cd3      	ldrb	r3, [r2, r3]
 800239a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d010      	beq.n	80023c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023a6:	4b11      	ldr	r3, [pc, #68]	@ (80023ec <HAL_RCC_GetSysClockFreq+0x94>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	0c5b      	lsrs	r3, r3, #17
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	4a11      	ldr	r2, [pc, #68]	@ (80023f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023b2:	5cd3      	ldrb	r3, [r2, r3]
 80023b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a0d      	ldr	r2, [pc, #52]	@ (80023f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ba:	fb03 f202 	mul.w	r2, r3, r2
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	e004      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a0c      	ldr	r2, [pc, #48]	@ (80023fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80023cc:	fb02 f303 	mul.w	r3, r2, r3
 80023d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	613b      	str	r3, [r7, #16]
      break;
 80023d6:	e002      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023d8:	4b05      	ldr	r3, [pc, #20]	@ (80023f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80023da:	613b      	str	r3, [r7, #16]
      break;
 80023dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023de:	693b      	ldr	r3, [r7, #16]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	371c      	adds	r7, #28
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40021000 	.word	0x40021000
 80023f0:	007a1200 	.word	0x007a1200
 80023f4:	080054b8 	.word	0x080054b8
 80023f8:	080054c8 	.word	0x080054c8
 80023fc:	003d0900 	.word	0x003d0900

08002400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002404:	4b02      	ldr	r3, [pc, #8]	@ (8002410 <HAL_RCC_GetHCLKFreq+0x10>)
 8002406:	681b      	ldr	r3, [r3, #0]
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr
 8002410:	20000010 	.word	0x20000010

08002414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002418:	f7ff fff2 	bl	8002400 <HAL_RCC_GetHCLKFreq>
 800241c:	4602      	mov	r2, r0
 800241e:	4b05      	ldr	r3, [pc, #20]	@ (8002434 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	0a1b      	lsrs	r3, r3, #8
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	4903      	ldr	r1, [pc, #12]	@ (8002438 <HAL_RCC_GetPCLK1Freq+0x24>)
 800242a:	5ccb      	ldrb	r3, [r1, r3]
 800242c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002430:	4618      	mov	r0, r3
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40021000 	.word	0x40021000
 8002438:	080054b0 	.word	0x080054b0

0800243c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002440:	f7ff ffde 	bl	8002400 <HAL_RCC_GetHCLKFreq>
 8002444:	4602      	mov	r2, r0
 8002446:	4b05      	ldr	r3, [pc, #20]	@ (800245c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	0adb      	lsrs	r3, r3, #11
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	4903      	ldr	r1, [pc, #12]	@ (8002460 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002452:	5ccb      	ldrb	r3, [r1, r3]
 8002454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002458:	4618      	mov	r0, r3
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40021000 	.word	0x40021000
 8002460:	080054b0 	.word	0x080054b0

08002464 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800246c:	4b0a      	ldr	r3, [pc, #40]	@ (8002498 <RCC_Delay+0x34>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a0a      	ldr	r2, [pc, #40]	@ (800249c <RCC_Delay+0x38>)
 8002472:	fba2 2303 	umull	r2, r3, r2, r3
 8002476:	0a5b      	lsrs	r3, r3, #9
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	fb02 f303 	mul.w	r3, r2, r3
 800247e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002480:	bf00      	nop
  }
  while (Delay --);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1e5a      	subs	r2, r3, #1
 8002486:	60fa      	str	r2, [r7, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1f9      	bne.n	8002480 <RCC_Delay+0x1c>
}
 800248c:	bf00      	nop
 800248e:	bf00      	nop
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr
 8002498:	20000010 	.word	0x20000010
 800249c:	10624dd3 	.word	0x10624dd3

080024a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	2300      	movs	r3, #0
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d07d      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80024bc:	2300      	movs	r3, #0
 80024be:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024c0:	4b4f      	ldr	r3, [pc, #316]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10d      	bne.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024cc:	4b4c      	ldr	r3, [pc, #304]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	4a4b      	ldr	r2, [pc, #300]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024d6:	61d3      	str	r3, [r2, #28]
 80024d8:	4b49      	ldr	r3, [pc, #292]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024e4:	2301      	movs	r3, #1
 80024e6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e8:	4b46      	ldr	r3, [pc, #280]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d118      	bne.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024f4:	4b43      	ldr	r3, [pc, #268]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a42      	ldr	r2, [pc, #264]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002500:	f7fe fa7a 	bl	80009f8 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002506:	e008      	b.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002508:	f7fe fa76 	bl	80009f8 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b64      	cmp	r3, #100	@ 0x64
 8002514:	d901      	bls.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e06d      	b.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800251a:	4b3a      	ldr	r3, [pc, #232]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0f0      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002526:	4b36      	ldr	r3, [pc, #216]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800252e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d02e      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	429a      	cmp	r2, r3
 8002542:	d027      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002544:	4b2e      	ldr	r3, [pc, #184]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800254c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800254e:	4b2e      	ldr	r3, [pc, #184]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002550:	2201      	movs	r2, #1
 8002552:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002554:	4b2c      	ldr	r3, [pc, #176]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800255a:	4a29      	ldr	r2, [pc, #164]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d014      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256a:	f7fe fa45 	bl	80009f8 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002570:	e00a      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002572:	f7fe fa41 	bl	80009f8 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002580:	4293      	cmp	r3, r2
 8002582:	d901      	bls.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e036      	b.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002588:	4b1d      	ldr	r3, [pc, #116]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0ee      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002594:	4b1a      	ldr	r3, [pc, #104]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	4917      	ldr	r1, [pc, #92]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025a6:	7dfb      	ldrb	r3, [r7, #23]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d105      	bne.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ac:	4b14      	ldr	r3, [pc, #80]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	4a13      	ldr	r2, [pc, #76]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d008      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	490b      	ldr	r1, [pc, #44]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0310 	and.w	r3, r3, #16
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d008      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025e2:	4b07      	ldr	r3, [pc, #28]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	4904      	ldr	r1, [pc, #16]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000
 8002604:	40007000 	.word	0x40007000
 8002608:	42420440 	.word	0x42420440

0800260c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	2300      	movs	r3, #0
 800261a:	61fb      	str	r3, [r7, #28]
 800261c:	2300      	movs	r3, #0
 800261e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	2300      	movs	r3, #0
 8002626:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b10      	cmp	r3, #16
 800262c:	d00a      	beq.n	8002644 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b10      	cmp	r3, #16
 8002632:	f200 808a 	bhi.w	800274a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d045      	beq.n	80026c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d075      	beq.n	800272e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002642:	e082      	b.n	800274a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002644:	4b46      	ldr	r3, [pc, #280]	@ (8002760 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800264a:	4b45      	ldr	r3, [pc, #276]	@ (8002760 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d07b      	beq.n	800274e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	0c9b      	lsrs	r3, r3, #18
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	4a41      	ldr	r2, [pc, #260]	@ (8002764 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002660:	5cd3      	ldrb	r3, [r2, r3]
 8002662:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d015      	beq.n	800269a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800266e:	4b3c      	ldr	r3, [pc, #240]	@ (8002760 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	0c5b      	lsrs	r3, r3, #17
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	4a3b      	ldr	r2, [pc, #236]	@ (8002768 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800267a:	5cd3      	ldrb	r3, [r2, r3]
 800267c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00d      	beq.n	80026a4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002688:	4a38      	ldr	r2, [pc, #224]	@ (800276c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	fb02 f303 	mul.w	r3, r2, r3
 8002696:	61fb      	str	r3, [r7, #28]
 8002698:	e004      	b.n	80026a4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4a34      	ldr	r2, [pc, #208]	@ (8002770 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800269e:	fb02 f303 	mul.w	r3, r2, r3
 80026a2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80026a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002760 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026b0:	d102      	bne.n	80026b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	61bb      	str	r3, [r7, #24]
      break;
 80026b6:	e04a      	b.n	800274e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002774 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80026be:	fba2 2303 	umull	r2, r3, r2, r3
 80026c2:	085b      	lsrs	r3, r3, #1
 80026c4:	61bb      	str	r3, [r7, #24]
      break;
 80026c6:	e042      	b.n	800274e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80026c8:	4b25      	ldr	r3, [pc, #148]	@ (8002760 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026d8:	d108      	bne.n	80026ec <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80026e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	e01f      	b.n	800272c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026f6:	d109      	bne.n	800270c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80026f8:	4b19      	ldr	r3, [pc, #100]	@ (8002760 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80026fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002704:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	e00f      	b.n	800272c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002712:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002716:	d11c      	bne.n	8002752 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002718:	4b11      	ldr	r3, [pc, #68]	@ (8002760 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d016      	beq.n	8002752 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002724:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002728:	61bb      	str	r3, [r7, #24]
      break;
 800272a:	e012      	b.n	8002752 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800272c:	e011      	b.n	8002752 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800272e:	f7ff fe85 	bl	800243c <HAL_RCC_GetPCLK2Freq>
 8002732:	4602      	mov	r2, r0
 8002734:	4b0a      	ldr	r3, [pc, #40]	@ (8002760 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	0b9b      	lsrs	r3, r3, #14
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	3301      	adds	r3, #1
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	fbb2 f3f3 	udiv	r3, r2, r3
 8002746:	61bb      	str	r3, [r7, #24]
      break;
 8002748:	e004      	b.n	8002754 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800274a:	bf00      	nop
 800274c:	e002      	b.n	8002754 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800274e:	bf00      	nop
 8002750:	e000      	b.n	8002754 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002752:	bf00      	nop
    }
  }
  return (frequency);
 8002754:	69bb      	ldr	r3, [r7, #24]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3720      	adds	r7, #32
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40021000 	.word	0x40021000
 8002764:	080054cc 	.word	0x080054cc
 8002768:	080054dc 	.word	0x080054dc
 800276c:	007a1200 	.word	0x007a1200
 8002770:	003d0900 	.word	0x003d0900
 8002774:	aaaaaaab 	.word	0xaaaaaaab

08002778 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e042      	b.n	8002810 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d106      	bne.n	80027a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7fd ff18 	bl	80005d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2224      	movs	r2, #36	@ 0x24
 80027a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 fdc5 	bl	800334c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	691a      	ldr	r2, [r3, #16]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	695a      	ldr	r2, [r3, #20]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68da      	ldr	r2, [r3, #12]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2220      	movs	r2, #32
 80027fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08a      	sub	sp, #40	@ 0x28
 800281c:	af02      	add	r7, sp, #8
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	603b      	str	r3, [r7, #0]
 8002824:	4613      	mov	r3, r2
 8002826:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b20      	cmp	r3, #32
 8002836:	d16d      	bne.n	8002914 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <HAL_UART_Transmit+0x2c>
 800283e:	88fb      	ldrh	r3, [r7, #6]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e066      	b.n	8002916 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2221      	movs	r2, #33	@ 0x21
 8002852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002856:	f7fe f8cf 	bl	80009f8 <HAL_GetTick>
 800285a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	88fa      	ldrh	r2, [r7, #6]
 8002860:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	88fa      	ldrh	r2, [r7, #6]
 8002866:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002870:	d108      	bne.n	8002884 <HAL_UART_Transmit+0x6c>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d104      	bne.n	8002884 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800287a:	2300      	movs	r3, #0
 800287c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	61bb      	str	r3, [r7, #24]
 8002882:	e003      	b.n	800288c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002888:	2300      	movs	r3, #0
 800288a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800288c:	e02a      	b.n	80028e4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	2200      	movs	r2, #0
 8002896:	2180      	movs	r1, #128	@ 0x80
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 fb14 	bl	8002ec6 <UART_WaitOnFlagUntilTimeout>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e036      	b.n	8002916 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10b      	bne.n	80028c6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	461a      	mov	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	3302      	adds	r3, #2
 80028c2:	61bb      	str	r3, [r7, #24]
 80028c4:	e007      	b.n	80028d6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	781a      	ldrb	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	3301      	adds	r3, #1
 80028d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028da:	b29b      	uxth	r3, r3
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29a      	uxth	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1cf      	bne.n	800288e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2200      	movs	r2, #0
 80028f6:	2140      	movs	r1, #64	@ 0x40
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 fae4 	bl	8002ec6 <UART_WaitOnFlagUntilTimeout>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e006      	b.n	8002916 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	e000      	b.n	8002916 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002914:	2302      	movs	r3, #2
  }
}
 8002916:	4618      	mov	r0, r3
 8002918:	3720      	adds	r7, #32
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b084      	sub	sp, #16
 8002922:	af00      	add	r7, sp, #0
 8002924:	60f8      	str	r0, [r7, #12]
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	4613      	mov	r3, r2
 800292a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b20      	cmp	r3, #32
 8002936:	d112      	bne.n	800295e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d002      	beq.n	8002944 <HAL_UART_Receive_IT+0x26>
 800293e:	88fb      	ldrh	r3, [r7, #6]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e00b      	b.n	8002960 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800294e:	88fb      	ldrh	r3, [r7, #6]
 8002950:	461a      	mov	r2, r3
 8002952:	68b9      	ldr	r1, [r7, #8]
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 fb24 	bl	8002fa2 <UART_Start_Receive_IT>
 800295a:	4603      	mov	r3, r0
 800295c:	e000      	b.n	8002960 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800295e:	2302      	movs	r3, #2
  }
}
 8002960:	4618      	mov	r0, r3
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b0ba      	sub	sp, #232	@ 0xe8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800298e:	2300      	movs	r3, #0
 8002990:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002994:	2300      	movs	r3, #0
 8002996:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800299a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80029a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10f      	bne.n	80029ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029b2:	f003 0320 	and.w	r3, r3, #32
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d009      	beq.n	80029ce <HAL_UART_IRQHandler+0x66>
 80029ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029be:	f003 0320 	and.w	r3, r3, #32
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fc01 	bl	80031ce <UART_Receive_IT>
      return;
 80029cc:	e25b      	b.n	8002e86 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80029ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 80de 	beq.w	8002b94 <HAL_UART_IRQHandler+0x22c>
 80029d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d106      	bne.n	80029f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029e8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 80d1 	beq.w	8002b94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00b      	beq.n	8002a16 <HAL_UART_IRQHandler+0xae>
 80029fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d005      	beq.n	8002a16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0e:	f043 0201 	orr.w	r2, r3, #1
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00b      	beq.n	8002a3a <HAL_UART_IRQHandler+0xd2>
 8002a22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d005      	beq.n	8002a3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a32:	f043 0202 	orr.w	r2, r3, #2
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00b      	beq.n	8002a5e <HAL_UART_IRQHandler+0xf6>
 8002a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d005      	beq.n	8002a5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a56:	f043 0204 	orr.w	r2, r3, #4
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d011      	beq.n	8002a8e <HAL_UART_IRQHandler+0x126>
 8002a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a6e:	f003 0320 	and.w	r3, r3, #32
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d105      	bne.n	8002a82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d005      	beq.n	8002a8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a86:	f043 0208 	orr.w	r2, r3, #8
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 81f2 	beq.w	8002e7c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d008      	beq.n	8002ab6 <HAL_UART_IRQHandler+0x14e>
 8002aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002aa8:	f003 0320 	and.w	r3, r3, #32
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 fb8c 	bl	80031ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	bf14      	ite	ne
 8002ac4:	2301      	movne	r3, #1
 8002ac6:	2300      	moveq	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d103      	bne.n	8002ae2 <HAL_UART_IRQHandler+0x17a>
 8002ada:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d04f      	beq.n	8002b82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 fa96 	bl	8003014 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d041      	beq.n	8002b7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	3314      	adds	r3, #20
 8002afc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b04:	e853 3f00 	ldrex	r3, [r3]
 8002b08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002b0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	3314      	adds	r3, #20
 8002b1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002b22:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002b26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002b2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002b32:	e841 2300 	strex	r3, r2, [r1]
 8002b36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002b3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1d9      	bne.n	8002af6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d013      	beq.n	8002b72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b4e:	4a7e      	ldr	r2, [pc, #504]	@ (8002d48 <HAL_UART_IRQHandler+0x3e0>)
 8002b50:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fe fd78 	bl	800164c <HAL_DMA_Abort_IT>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d016      	beq.n	8002b90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b70:	e00e      	b.n	8002b90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f993 	bl	8002e9e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b78:	e00a      	b.n	8002b90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f98f 	bl	8002e9e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b80:	e006      	b.n	8002b90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f98b 	bl	8002e9e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002b8e:	e175      	b.n	8002e7c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b90:	bf00      	nop
    return;
 8002b92:	e173      	b.n	8002e7c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	f040 814f 	bne.w	8002e3c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ba2:	f003 0310 	and.w	r3, r3, #16
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 8148 	beq.w	8002e3c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 8141 	beq.w	8002e3c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	60bb      	str	r3, [r7, #8]
 8002bce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 80b6 	beq.w	8002d4c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002bec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 8145 	beq.w	8002e80 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002bfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	f080 813e 	bcs.w	8002e80 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c0a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	f000 8088 	beq.w	8002d28 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	330c      	adds	r3, #12
 8002c1e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c22:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c26:	e853 3f00 	ldrex	r3, [r3]
 8002c2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002c2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c32:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c36:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	330c      	adds	r3, #12
 8002c40:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002c44:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c4c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002c50:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002c54:	e841 2300 	strex	r3, r2, [r1]
 8002c58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002c5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1d9      	bne.n	8002c18 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	3314      	adds	r3, #20
 8002c6a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c6e:	e853 3f00 	ldrex	r3, [r3]
 8002c72:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002c74:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c76:	f023 0301 	bic.w	r3, r3, #1
 8002c7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3314      	adds	r3, #20
 8002c84:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c88:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002c8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002c90:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002c94:	e841 2300 	strex	r3, r2, [r1]
 8002c98:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002c9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1e1      	bne.n	8002c64 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3314      	adds	r3, #20
 8002ca6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002caa:	e853 3f00 	ldrex	r3, [r3]
 8002cae:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002cb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	3314      	adds	r3, #20
 8002cc0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002cc4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002cc6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002cca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002ccc:	e841 2300 	strex	r3, r2, [r1]
 8002cd0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002cd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1e3      	bne.n	8002ca0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	330c      	adds	r3, #12
 8002cec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cf0:	e853 3f00 	ldrex	r3, [r3]
 8002cf4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002cf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cf8:	f023 0310 	bic.w	r3, r3, #16
 8002cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	330c      	adds	r3, #12
 8002d06:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002d0a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002d0c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d12:	e841 2300 	strex	r3, r2, [r1]
 8002d16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002d18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1e3      	bne.n	8002ce6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fe fc56 	bl	80015d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f8b6 	bl	8002eb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d44:	e09c      	b.n	8002e80 <HAL_UART_IRQHandler+0x518>
 8002d46:	bf00      	nop
 8002d48:	080030d9 	.word	0x080030d9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 808e 	beq.w	8002e84 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002d68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 8089 	beq.w	8002e84 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	330c      	adds	r3, #12
 8002d78:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d7c:	e853 3f00 	ldrex	r3, [r3]
 8002d80:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	330c      	adds	r3, #12
 8002d92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002d96:	647a      	str	r2, [r7, #68]	@ 0x44
 8002d98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d9e:	e841 2300 	strex	r3, r2, [r1]
 8002da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002da4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1e3      	bne.n	8002d72 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3314      	adds	r3, #20
 8002db0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db4:	e853 3f00 	ldrex	r3, [r3]
 8002db8:	623b      	str	r3, [r7, #32]
   return(result);
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	f023 0301 	bic.w	r3, r3, #1
 8002dc0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	3314      	adds	r3, #20
 8002dca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002dce:	633a      	str	r2, [r7, #48]	@ 0x30
 8002dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002dd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dd6:	e841 2300 	strex	r3, r2, [r1]
 8002dda:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1e3      	bne.n	8002daa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2220      	movs	r2, #32
 8002de6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	330c      	adds	r3, #12
 8002df6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	e853 3f00 	ldrex	r3, [r3]
 8002dfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f023 0310 	bic.w	r3, r3, #16
 8002e06:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	330c      	adds	r3, #12
 8002e10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002e14:	61fa      	str	r2, [r7, #28]
 8002e16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e18:	69b9      	ldr	r1, [r7, #24]
 8002e1a:	69fa      	ldr	r2, [r7, #28]
 8002e1c:	e841 2300 	strex	r3, r2, [r1]
 8002e20:	617b      	str	r3, [r7, #20]
   return(result);
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1e3      	bne.n	8002df0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e32:	4619      	mov	r1, r3
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f83b 	bl	8002eb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e3a:	e023      	b.n	8002e84 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d009      	beq.n	8002e5c <HAL_UART_IRQHandler+0x4f4>
 8002e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f953 	bl	8003100 <UART_Transmit_IT>
    return;
 8002e5a:	e014      	b.n	8002e86 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00e      	beq.n	8002e86 <HAL_UART_IRQHandler+0x51e>
 8002e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f992 	bl	800319e <UART_EndTransmit_IT>
    return;
 8002e7a:	e004      	b.n	8002e86 <HAL_UART_IRQHandler+0x51e>
    return;
 8002e7c:	bf00      	nop
 8002e7e:	e002      	b.n	8002e86 <HAL_UART_IRQHandler+0x51e>
      return;
 8002e80:	bf00      	nop
 8002e82:	e000      	b.n	8002e86 <HAL_UART_IRQHandler+0x51e>
      return;
 8002e84:	bf00      	nop
  }
}
 8002e86:	37e8      	adds	r7, #232	@ 0xe8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr

08002e9e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr

08002eb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr

08002ec6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b090      	sub	sp, #64	@ 0x40
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	603b      	str	r3, [r7, #0]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ed6:	e050      	b.n	8002f7a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002eda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ede:	d04c      	beq.n	8002f7a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ee0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d007      	beq.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ee6:	f7fd fd87 	bl	80009f8 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d241      	bcs.n	8002f7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	330c      	adds	r3, #12
 8002efc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f00:	e853 3f00 	ldrex	r3, [r3]
 8002f04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f08:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8002f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	330c      	adds	r3, #12
 8002f14:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002f16:	637a      	str	r2, [r7, #52]	@ 0x34
 8002f18:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002f1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f1e:	e841 2300 	strex	r3, r2, [r1]
 8002f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1e5      	bne.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	3314      	adds	r3, #20
 8002f30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	e853 3f00 	ldrex	r3, [r3]
 8002f38:	613b      	str	r3, [r7, #16]
   return(result);
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	f023 0301 	bic.w	r3, r3, #1
 8002f40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	3314      	adds	r3, #20
 8002f48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002f4a:	623a      	str	r2, [r7, #32]
 8002f4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f4e:	69f9      	ldr	r1, [r7, #28]
 8002f50:	6a3a      	ldr	r2, [r7, #32]
 8002f52:	e841 2300 	strex	r3, r2, [r1]
 8002f56:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1e5      	bne.n	8002f2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2220      	movs	r2, #32
 8002f62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2220      	movs	r2, #32
 8002f6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e00f      	b.n	8002f9a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	4013      	ands	r3, r2
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	bf0c      	ite	eq
 8002f8a:	2301      	moveq	r3, #1
 8002f8c:	2300      	movne	r3, #0
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	461a      	mov	r2, r3
 8002f92:	79fb      	ldrb	r3, [r7, #7]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d09f      	beq.n	8002ed8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3740      	adds	r7, #64	@ 0x40
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b085      	sub	sp, #20
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	60f8      	str	r0, [r7, #12]
 8002faa:	60b9      	str	r1, [r7, #8]
 8002fac:	4613      	mov	r3, r2
 8002fae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	88fa      	ldrh	r2, [r7, #6]
 8002fba:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	88fa      	ldrh	r2, [r7, #6]
 8002fc0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2222      	movs	r2, #34	@ 0x22
 8002fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d007      	beq.n	8002fe8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fe6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695a      	ldr	r2, [r3, #20]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0201 	orr.w	r2, r2, #1
 8002ff6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0220 	orr.w	r2, r2, #32
 8003006:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr

08003014 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003014:	b480      	push	{r7}
 8003016:	b095      	sub	sp, #84	@ 0x54
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	330c      	adds	r3, #12
 8003022:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003026:	e853 3f00 	ldrex	r3, [r3]
 800302a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800302c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800302e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003032:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	330c      	adds	r3, #12
 800303a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800303c:	643a      	str	r2, [r7, #64]	@ 0x40
 800303e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003040:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003042:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003044:	e841 2300 	strex	r3, r2, [r1]
 8003048:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800304a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1e5      	bne.n	800301c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	3314      	adds	r3, #20
 8003056:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	e853 3f00 	ldrex	r3, [r3]
 800305e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f023 0301 	bic.w	r3, r3, #1
 8003066:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	3314      	adds	r3, #20
 800306e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003070:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003072:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003074:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003076:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003078:	e841 2300 	strex	r3, r2, [r1]
 800307c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800307e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1e5      	bne.n	8003050 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003088:	2b01      	cmp	r3, #1
 800308a:	d119      	bne.n	80030c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	330c      	adds	r3, #12
 8003092:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	e853 3f00 	ldrex	r3, [r3]
 800309a:	60bb      	str	r3, [r7, #8]
   return(result);
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f023 0310 	bic.w	r3, r3, #16
 80030a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	330c      	adds	r3, #12
 80030aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030ac:	61ba      	str	r2, [r7, #24]
 80030ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b0:	6979      	ldr	r1, [r7, #20]
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	e841 2300 	strex	r3, r2, [r1]
 80030b8:	613b      	str	r3, [r7, #16]
   return(result);
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1e5      	bne.n	800308c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80030ce:	bf00      	nop
 80030d0:	3754      	adds	r7, #84	@ 0x54
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bc80      	pop	{r7}
 80030d6:	4770      	bx	lr

080030d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f7ff fed3 	bl	8002e9e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030f8:	bf00      	nop
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b21      	cmp	r3, #33	@ 0x21
 8003112:	d13e      	bne.n	8003192 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800311c:	d114      	bne.n	8003148 <UART_Transmit_IT+0x48>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d110      	bne.n	8003148 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	461a      	mov	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800313a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	1c9a      	adds	r2, r3, #2
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	621a      	str	r2, [r3, #32]
 8003146:	e008      	b.n	800315a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	1c59      	adds	r1, r3, #1
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6211      	str	r1, [r2, #32]
 8003152:	781a      	ldrb	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800315e:	b29b      	uxth	r3, r3
 8003160:	3b01      	subs	r3, #1
 8003162:	b29b      	uxth	r3, r3
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	4619      	mov	r1, r3
 8003168:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10f      	bne.n	800318e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68da      	ldr	r2, [r3, #12]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800317c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800318c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800318e:	2300      	movs	r3, #0
 8003190:	e000      	b.n	8003194 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003192:	2302      	movs	r3, #2
  }
}
 8003194:	4618      	mov	r0, r3
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	bc80      	pop	{r7}
 800319c:	4770      	bx	lr

0800319e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2220      	movs	r2, #32
 80031ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7ff fe64 	bl	8002e8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b08c      	sub	sp, #48	@ 0x30
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b22      	cmp	r3, #34	@ 0x22
 80031e0:	f040 80ae 	bne.w	8003340 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031ec:	d117      	bne.n	800321e <UART_Receive_IT+0x50>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d113      	bne.n	800321e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031fe:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	b29b      	uxth	r3, r3
 8003208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800320c:	b29a      	uxth	r2, r3
 800320e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003210:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003216:	1c9a      	adds	r2, r3, #2
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	629a      	str	r2, [r3, #40]	@ 0x28
 800321c:	e026      	b.n	800326c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003222:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003224:	2300      	movs	r3, #0
 8003226:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003230:	d007      	beq.n	8003242 <UART_Receive_IT+0x74>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10a      	bne.n	8003250 <UART_Receive_IT+0x82>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d106      	bne.n	8003250 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	b2da      	uxtb	r2, r3
 800324a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800324c:	701a      	strb	r2, [r3, #0]
 800324e:	e008      	b.n	8003262 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	b2db      	uxtb	r3, r3
 8003258:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800325c:	b2da      	uxtb	r2, r3
 800325e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003260:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003270:	b29b      	uxth	r3, r3
 8003272:	3b01      	subs	r3, #1
 8003274:	b29b      	uxth	r3, r3
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	4619      	mov	r1, r3
 800327a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800327c:	2b00      	cmp	r3, #0
 800327e:	d15d      	bne.n	800333c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0220 	bic.w	r2, r2, #32
 800328e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800329e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695a      	ldr	r2, [r3, #20]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0201 	bic.w	r2, r2, #1
 80032ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2220      	movs	r2, #32
 80032b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d135      	bne.n	8003332 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	330c      	adds	r3, #12
 80032d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	e853 3f00 	ldrex	r3, [r3]
 80032da:	613b      	str	r3, [r7, #16]
   return(result);
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	f023 0310 	bic.w	r3, r3, #16
 80032e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	330c      	adds	r3, #12
 80032ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032ec:	623a      	str	r2, [r7, #32]
 80032ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f0:	69f9      	ldr	r1, [r7, #28]
 80032f2:	6a3a      	ldr	r2, [r7, #32]
 80032f4:	e841 2300 	strex	r3, r2, [r1]
 80032f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1e5      	bne.n	80032cc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0310 	and.w	r3, r3, #16
 800330a:	2b10      	cmp	r3, #16
 800330c:	d10a      	bne.n	8003324 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800330e:	2300      	movs	r3, #0
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003328:	4619      	mov	r1, r3
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7ff fdc0 	bl	8002eb0 <HAL_UARTEx_RxEventCallback>
 8003330:	e002      	b.n	8003338 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 fa08 	bl	8003748 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003338:	2300      	movs	r3, #0
 800333a:	e002      	b.n	8003342 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800333c:	2300      	movs	r3, #0
 800333e:	e000      	b.n	8003342 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003340:	2302      	movs	r3, #2
  }
}
 8003342:	4618      	mov	r0, r3
 8003344:	3730      	adds	r7, #48	@ 0x30
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
	...

0800334c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689a      	ldr	r2, [r3, #8]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	4313      	orrs	r3, r2
 800337a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003386:	f023 030c 	bic.w	r3, r3, #12
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	6812      	ldr	r2, [r2, #0]
 800338e:	68b9      	ldr	r1, [r7, #8]
 8003390:	430b      	orrs	r3, r1
 8003392:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699a      	ldr	r2, [r3, #24]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a2c      	ldr	r2, [pc, #176]	@ (8003460 <UART_SetConfig+0x114>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d103      	bne.n	80033bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80033b4:	f7ff f842 	bl	800243c <HAL_RCC_GetPCLK2Freq>
 80033b8:	60f8      	str	r0, [r7, #12]
 80033ba:	e002      	b.n	80033c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80033bc:	f7ff f82a 	bl	8002414 <HAL_RCC_GetPCLK1Freq>
 80033c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	4613      	mov	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	009a      	lsls	r2, r3, #2
 80033cc:	441a      	add	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d8:	4a22      	ldr	r2, [pc, #136]	@ (8003464 <UART_SetConfig+0x118>)
 80033da:	fba2 2303 	umull	r2, r3, r2, r3
 80033de:	095b      	lsrs	r3, r3, #5
 80033e0:	0119      	lsls	r1, r3, #4
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	4613      	mov	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4413      	add	r3, r2
 80033ea:	009a      	lsls	r2, r3, #2
 80033ec:	441a      	add	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80033f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003464 <UART_SetConfig+0x118>)
 80033fa:	fba3 0302 	umull	r0, r3, r3, r2
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	2064      	movs	r0, #100	@ 0x64
 8003402:	fb00 f303 	mul.w	r3, r0, r3
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	3332      	adds	r3, #50	@ 0x32
 800340c:	4a15      	ldr	r2, [pc, #84]	@ (8003464 <UART_SetConfig+0x118>)
 800340e:	fba2 2303 	umull	r2, r3, r2, r3
 8003412:	095b      	lsrs	r3, r3, #5
 8003414:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003418:	4419      	add	r1, r3
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	009a      	lsls	r2, r3, #2
 8003424:	441a      	add	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003430:	4b0c      	ldr	r3, [pc, #48]	@ (8003464 <UART_SetConfig+0x118>)
 8003432:	fba3 0302 	umull	r0, r3, r3, r2
 8003436:	095b      	lsrs	r3, r3, #5
 8003438:	2064      	movs	r0, #100	@ 0x64
 800343a:	fb00 f303 	mul.w	r3, r0, r3
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	3332      	adds	r3, #50	@ 0x32
 8003444:	4a07      	ldr	r2, [pc, #28]	@ (8003464 <UART_SetConfig+0x118>)
 8003446:	fba2 2303 	umull	r2, r3, r2, r3
 800344a:	095b      	lsrs	r3, r3, #5
 800344c:	f003 020f 	and.w	r2, r3, #15
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	440a      	add	r2, r1
 8003456:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003458:	bf00      	nop
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40013800 	.word	0x40013800
 8003464:	51eb851f 	.word	0x51eb851f

08003468 <UART_MspInit>:
uint8_t rxbyte;
UART_Driver uart1 = { .huart.Instance = USART1, .isInitialized = 0 };
UART_Driver uart2 = { .huart.Instance = USART2, .isInitialized = 0 };
UART_Driver uart3 = { .huart.Instance = USART3, .isInitialized = 0 };

static void UART_MspInit(UART_HandleTypeDef *huart) {
 8003468:	b580      	push	{r7, lr}
 800346a:	b08c      	sub	sp, #48	@ 0x30
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003470:	f107 0320 	add.w	r3, r7, #32
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	605a      	str	r2, [r3, #4]
 800347a:	609a      	str	r2, [r3, #8]
 800347c:	60da      	str	r2, [r3, #12]

    if (huart->Instance == USART1) {
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a58      	ldr	r2, [pc, #352]	@ (80035e4 <UART_MspInit+0x17c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d135      	bne.n	80034f4 <UART_MspInit+0x8c>
        __HAL_RCC_USART1_CLK_ENABLE();
 8003488:	4b57      	ldr	r3, [pc, #348]	@ (80035e8 <UART_MspInit+0x180>)
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	4a56      	ldr	r2, [pc, #344]	@ (80035e8 <UART_MspInit+0x180>)
 800348e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003492:	6193      	str	r3, [r2, #24]
 8003494:	4b54      	ldr	r3, [pc, #336]	@ (80035e8 <UART_MspInit+0x180>)
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800349c:	61fb      	str	r3, [r7, #28]
 800349e:	69fb      	ldr	r3, [r7, #28]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a0:	4b51      	ldr	r3, [pc, #324]	@ (80035e8 <UART_MspInit+0x180>)
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	4a50      	ldr	r2, [pc, #320]	@ (80035e8 <UART_MspInit+0x180>)
 80034a6:	f043 0304 	orr.w	r3, r3, #4
 80034aa:	6193      	str	r3, [r2, #24]
 80034ac:	4b4e      	ldr	r3, [pc, #312]	@ (80035e8 <UART_MspInit+0x180>)
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	61bb      	str	r3, [r7, #24]
 80034b6:	69bb      	ldr	r3, [r7, #24]

        GPIO_InitStruct.Pin = GPIO_PIN_9 ;
 80034b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80034bc:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034be:	2302      	movs	r3, #2
 80034c0:	627b      	str	r3, [r7, #36]	@ 0x24
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	62bb      	str	r3, [r7, #40]	@ 0x28
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034c6:	2303      	movs	r3, #3
 80034c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ca:	f107 0320 	add.w	r3, r7, #32
 80034ce:	4619      	mov	r1, r3
 80034d0:	4846      	ldr	r0, [pc, #280]	@ (80035ec <UART_MspInit+0x184>)
 80034d2:	f7fe fa39 	bl	8001948 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034da:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT ;
 80034dc:	2300      	movs	r3, #0
 80034de:	627b      	str	r3, [r7, #36]	@ 0x24
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	62bb      	str	r3, [r7, #40]	@ 0x28
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034e4:	2303      	movs	r3, #3
 80034e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e8:	f107 0320 	add.w	r3, r7, #32
 80034ec:	4619      	mov	r1, r3
 80034ee:	483f      	ldr	r0, [pc, #252]	@ (80035ec <UART_MspInit+0x184>)
 80034f0:	f7fe fa2a 	bl	8001948 <HAL_GPIO_Init>
    }
    if (huart->Instance == USART2) {
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a3d      	ldr	r2, [pc, #244]	@ (80035f0 <UART_MspInit+0x188>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d133      	bne.n	8003566 <UART_MspInit+0xfe>
        __HAL_RCC_USART2_CLK_ENABLE();
 80034fe:	4b3a      	ldr	r3, [pc, #232]	@ (80035e8 <UART_MspInit+0x180>)
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	4a39      	ldr	r2, [pc, #228]	@ (80035e8 <UART_MspInit+0x180>)
 8003504:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003508:	61d3      	str	r3, [r2, #28]
 800350a:	4b37      	ldr	r3, [pc, #220]	@ (80035e8 <UART_MspInit+0x180>)
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	697b      	ldr	r3, [r7, #20]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8003516:	4b34      	ldr	r3, [pc, #208]	@ (80035e8 <UART_MspInit+0x180>)
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	4a33      	ldr	r2, [pc, #204]	@ (80035e8 <UART_MspInit+0x180>)
 800351c:	f043 0304 	orr.w	r3, r3, #4
 8003520:	6193      	str	r3, [r2, #24]
 8003522:	4b31      	ldr	r3, [pc, #196]	@ (80035e8 <UART_MspInit+0x180>)
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	613b      	str	r3, [r7, #16]
 800352c:	693b      	ldr	r3, [r7, #16]

        GPIO_InitStruct.Pin = GPIO_PIN_2;
 800352e:	2304      	movs	r3, #4
 8003530:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003532:	2302      	movs	r3, #2
 8003534:	627b      	str	r3, [r7, #36]	@ 0x24
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003536:	2300      	movs	r3, #0
 8003538:	62bb      	str	r3, [r7, #40]	@ 0x28
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800353a:	2303      	movs	r3, #3
 800353c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800353e:	f107 0320 	add.w	r3, r7, #32
 8003542:	4619      	mov	r1, r3
 8003544:	4829      	ldr	r0, [pc, #164]	@ (80035ec <UART_MspInit+0x184>)
 8003546:	f7fe f9ff 	bl	8001948 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_3;
 800354a:	2308      	movs	r3, #8
 800354c:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800354e:	2300      	movs	r3, #0
 8003550:	627b      	str	r3, [r7, #36]	@ 0x24
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003552:	2300      	movs	r3, #0
 8003554:	62bb      	str	r3, [r7, #40]	@ 0x28
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003556:	2303      	movs	r3, #3
 8003558:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800355a:	f107 0320 	add.w	r3, r7, #32
 800355e:	4619      	mov	r1, r3
 8003560:	4822      	ldr	r0, [pc, #136]	@ (80035ec <UART_MspInit+0x184>)
 8003562:	f7fe f9f1 	bl	8001948 <HAL_GPIO_Init>
    }
    if (huart->Instance == USART3) {
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a22      	ldr	r2, [pc, #136]	@ (80035f4 <UART_MspInit+0x18c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d135      	bne.n	80035dc <UART_MspInit+0x174>
        __HAL_RCC_USART3_CLK_ENABLE();
 8003570:	4b1d      	ldr	r3, [pc, #116]	@ (80035e8 <UART_MspInit+0x180>)
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	4a1c      	ldr	r2, [pc, #112]	@ (80035e8 <UART_MspInit+0x180>)
 8003576:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800357a:	61d3      	str	r3, [r2, #28]
 800357c:	4b1a      	ldr	r3, [pc, #104]	@ (80035e8 <UART_MspInit+0x180>)
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	68fb      	ldr	r3, [r7, #12]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8003588:	4b17      	ldr	r3, [pc, #92]	@ (80035e8 <UART_MspInit+0x180>)
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	4a16      	ldr	r2, [pc, #88]	@ (80035e8 <UART_MspInit+0x180>)
 800358e:	f043 0308 	orr.w	r3, r3, #8
 8003592:	6193      	str	r3, [r2, #24]
 8003594:	4b14      	ldr	r3, [pc, #80]	@ (80035e8 <UART_MspInit+0x180>)
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	68bb      	ldr	r3, [r7, #8]

        GPIO_InitStruct.Pin = GPIO_PIN_10;
 80035a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035a4:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a6:	2302      	movs	r3, #2
 80035a8:	627b      	str	r3, [r7, #36]	@ 0x24
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	62bb      	str	r3, [r7, #40]	@ 0x28
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035ae:	2303      	movs	r3, #3
 80035b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035b2:	f107 0320 	add.w	r3, r7, #32
 80035b6:	4619      	mov	r1, r3
 80035b8:	480f      	ldr	r0, [pc, #60]	@ (80035f8 <UART_MspInit+0x190>)
 80035ba:	f7fe f9c5 	bl	8001948 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_11;
 80035be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80035c2:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035c4:	2300      	movs	r3, #0
 80035c6:	627b      	str	r3, [r7, #36]	@ 0x24
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c8:	2300      	movs	r3, #0
 80035ca:	62bb      	str	r3, [r7, #40]	@ 0x28
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035cc:	2303      	movs	r3, #3
 80035ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035d0:	f107 0320 	add.w	r3, r7, #32
 80035d4:	4619      	mov	r1, r3
 80035d6:	4808      	ldr	r0, [pc, #32]	@ (80035f8 <UART_MspInit+0x190>)
 80035d8:	f7fe f9b6 	bl	8001948 <HAL_GPIO_Init>
    }
}
 80035dc:	bf00      	nop
 80035de:	3730      	adds	r7, #48	@ 0x30
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40013800 	.word	0x40013800
 80035e8:	40021000 	.word	0x40021000
 80035ec:	40010800 	.word	0x40010800
 80035f0:	40004400 	.word	0x40004400
 80035f4:	40004800 	.word	0x40004800
 80035f8:	40010c00 	.word	0x40010c00

080035fc <UART_Init>:

int UART_Init(UART_Driver *uart, UART_Config config) {
 80035fc:	b084      	sub	sp, #16
 80035fe:	b590      	push	{r4, r7, lr}
 8003600:	b083      	sub	sp, #12
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
 8003606:	f107 001c 	add.w	r0, r7, #28
 800360a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (uart->isInitialized) {
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <UART_Init+0x22>
        return -1; // UART đã được khởi tạo trước đó
 8003618:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800361c:	e02e      	b.n	800367c <UART_Init+0x80>
    }
    uart->config = config;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f103 0448 	add.w	r4, r3, #72	@ 0x48
 8003624:	f107 031c 	add.w	r3, r7, #28
 8003628:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800362a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    uart->huart.Init.BaudRate = config.baudRate;
 800362e:	69fa      	ldr	r2, [r7, #28]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	605a      	str	r2, [r3, #4]
    uart->huart.Init.WordLength = config.wordLength;
 8003634:	6a3a      	ldr	r2, [r7, #32]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	609a      	str	r2, [r3, #8]
    uart->huart.Init.StopBits = config.stopBits;
 800363a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	60da      	str	r2, [r3, #12]
    uart->huart.Init.Parity = config.parity;
 8003640:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	611a      	str	r2, [r3, #16]
    uart->huart.Init.Mode = UART_MODE_TX_RX;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	220c      	movs	r2, #12
 800364a:	615a      	str	r2, [r3, #20]
    uart->huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	619a      	str	r2, [r3, #24]
    uart->huart.Init.OverSampling = UART_OVERSAMPLING_16;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	61da      	str	r2, [r3, #28]

    UART_MspInit(&uart->huart);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff ff04 	bl	8003468 <UART_MspInit>

    if (HAL_UART_Init(&uart->huart) != HAL_OK) {
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff f888 	bl	8002778 <HAL_UART_Init>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <UART_Init+0x76>
        return 1; // Khởi tạo thất bại
 800366e:	2301      	movs	r3, #1
 8003670:	e004      	b.n	800367c <UART_Init+0x80>
    }
    uart->isInitialized = 1;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    return 0; // Khởi tạo thành công
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003686:	b004      	add	sp, #16
 8003688:	4770      	bx	lr
	...

0800368c <init>:

int init(UART_HandleTypeDef *huart, UART_Config config) {
 800368c:	b084      	sub	sp, #16
 800368e:	b580      	push	{r7, lr}
 8003690:	b084      	sub	sp, #16
 8003692:	af02      	add	r7, sp, #8
 8003694:	6078      	str	r0, [r7, #4]
 8003696:	f107 0014 	add.w	r0, r7, #20
 800369a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (huart->Instance == USART1) {
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a19      	ldr	r2, [pc, #100]	@ (8003708 <init+0x7c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d109      	bne.n	80036bc <init+0x30>
		return UART_Init(&uart1, config);
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	f107 0314 	add.w	r3, r7, #20
 80036b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036b2:	4816      	ldr	r0, [pc, #88]	@ (800370c <init+0x80>)
 80036b4:	f7ff ffa2 	bl	80035fc <UART_Init>
 80036b8:	4603      	mov	r3, r0
 80036ba:	e01e      	b.n	80036fa <init+0x6e>
	} else if (huart->Instance == USART2) {
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a13      	ldr	r2, [pc, #76]	@ (8003710 <init+0x84>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d109      	bne.n	80036da <init+0x4e>
		return UART_Init(&uart2, config);
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	f107 0314 	add.w	r3, r7, #20
 80036ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036d0:	4810      	ldr	r0, [pc, #64]	@ (8003714 <init+0x88>)
 80036d2:	f7ff ff93 	bl	80035fc <UART_Init>
 80036d6:	4603      	mov	r3, r0
 80036d8:	e00f      	b.n	80036fa <init+0x6e>
	} else if (huart->Instance == USART3) {
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a0e      	ldr	r2, [pc, #56]	@ (8003718 <init+0x8c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d109      	bne.n	80036f8 <init+0x6c>
		return UART_Init(&uart3, config);
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	f107 0314 	add.w	r3, r7, #20
 80036ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036ee:	480b      	ldr	r0, [pc, #44]	@ (800371c <init+0x90>)
 80036f0:	f7ff ff84 	bl	80035fc <UART_Init>
 80036f4:	4603      	mov	r3, r0
 80036f6:	e000      	b.n	80036fa <init+0x6e>
    } else {
        return 1; // Không tìm thấy UART phù hợp
 80036f8:	2301      	movs	r3, #1
    }
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003704:	b004      	add	sp, #16
 8003706:	4770      	bx	lr
 8003708:	40013800 	.word	0x40013800
 800370c:	2000001c 	.word	0x2000001c
 8003710:	40004400 	.word	0x40004400
 8003714:	20000078 	.word	0x20000078
 8003718:	40004800 	.word	0x40004800
 800371c:	200000d4 	.word	0x200000d4

08003720 <UART_SendString>:

void UART_SendString(UART_HandleTypeDef *huart, const char *str) {
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 800372a:	6838      	ldr	r0, [r7, #0]
 800372c:	f7fc fd18 	bl	8000160 <strlen>
 8003730:	4603      	mov	r3, r0
 8003732:	b29a      	uxth	r2, r3
 8003734:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003738:	6839      	ldr	r1, [r7, #0]
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7ff f86c 	bl	8002818 <HAL_UART_Transmit>
}
 8003740:	bf00      	nop
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
  if (huart->Instance == USART1) {
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a12      	ldr	r2, [pc, #72]	@ (80037a0 <HAL_UART_RxCpltCallback+0x58>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d11e      	bne.n	8003798 <HAL_UART_RxCpltCallback+0x50>

	  if (stopBlink){
 800375a:	4b12      	ldr	r3, [pc, #72]	@ (80037a4 <HAL_UART_RxCpltCallback+0x5c>)
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00e      	beq.n	8003782 <HAL_UART_RxCpltCallback+0x3a>
		  if (rxbyte == 0x03) {  // Kiểm tra lệnh Ctrl+C
 8003764:	4b10      	ldr	r3, [pc, #64]	@ (80037a8 <HAL_UART_RxCpltCallback+0x60>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b03      	cmp	r3, #3
 800376a:	d103      	bne.n	8003774 <HAL_UART_RxCpltCallback+0x2c>
			  stopBlink = 0;
 800376c:	4b0d      	ldr	r3, [pc, #52]	@ (80037a4 <HAL_UART_RxCpltCallback+0x5c>)
 800376e:	2200      	movs	r2, #0
 8003770:	701a      	strb	r2, [r3, #0]
 8003772:	e006      	b.n	8003782 <HAL_UART_RxCpltCallback+0x3a>
		  }
		  else {
			  HAL_UART_Transmit(&uart1.huart, &rxbyte, 1, HAL_MAX_DELAY);
 8003774:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003778:	2201      	movs	r2, #1
 800377a:	490b      	ldr	r1, [pc, #44]	@ (80037a8 <HAL_UART_RxCpltCallback+0x60>)
 800377c:	480b      	ldr	r0, [pc, #44]	@ (80037ac <HAL_UART_RxCpltCallback+0x64>)
 800377e:	f7ff f84b 	bl	8002818 <HAL_UART_Transmit>
		  }
	  }
	  CircularBuffer_Write(&rxBuffer, rxbyte);
 8003782:	4b09      	ldr	r3, [pc, #36]	@ (80037a8 <HAL_UART_RxCpltCallback+0x60>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	4619      	mov	r1, r3
 8003788:	4809      	ldr	r0, [pc, #36]	@ (80037b0 <HAL_UART_RxCpltCallback+0x68>)
 800378a:	f000 f813 	bl	80037b4 <CircularBuffer_Write>
	  HAL_UART_Receive_IT(&uart1.huart, &rxbyte, 1);
 800378e:	2201      	movs	r2, #1
 8003790:	4905      	ldr	r1, [pc, #20]	@ (80037a8 <HAL_UART_RxCpltCallback+0x60>)
 8003792:	4806      	ldr	r0, [pc, #24]	@ (80037ac <HAL_UART_RxCpltCallback+0x64>)
 8003794:	f7ff f8c3 	bl	800291e <HAL_UART_Receive_IT>
  }
}
 8003798:	bf00      	nop
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40013800 	.word	0x40013800
 80037a4:	200004ec 	.word	0x200004ec
 80037a8:	200002e4 	.word	0x200002e4
 80037ac:	2000001c 	.word	0x2000001c
 80037b0:	200003e8 	.word	0x200003e8

080037b4 <CircularBuffer_Write>:

uint16_t myindex = 0;
char buffer[BUFFER_SIZE];
CircularBuffer rxBuffer = { {0}, 0, 0 };

void CircularBuffer_Write(CircularBuffer *cb, uint8_t data) {
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	460b      	mov	r3, r1
 80037be:	70fb      	strb	r3, [r7, #3]
    uint16_t next = (cb->head + 1) % BUFFER_SIZE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	3301      	adds	r3, #1
 80037ca:	425a      	negs	r2, r3
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	bf58      	it	pl
 80037d2:	4253      	negpl	r3, r2
 80037d4:	81fb      	strh	r3, [r7, #14]
    // bo qua du lieu
	if (next != cb->tail) {
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 80037dc:	b29b      	uxth	r3, r3
 80037de:	89fa      	ldrh	r2, [r7, #14]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d00b      	beq.n	80037fc <CircularBuffer_Write+0x48>
		cb->buffer[cb->head] = data;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	4619      	mov	r1, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	78fa      	ldrb	r2, [r7, #3]
 80037f2:	545a      	strb	r2, [r3, r1]
		cb->head = next;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	89fa      	ldrh	r2, [r7, #14]
 80037f8:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100

	}
}
 80037fc:	bf00      	nop
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	bc80      	pop	{r7}
 8003804:	4770      	bx	lr

08003806 <CircularBuffer_Read>:
int CircularBuffer_Read(CircularBuffer *cb, uint8_t *data) {
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
 800380e:	6039      	str	r1, [r7, #0]
    if (cb->head == cb->tail) {
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8003816:	b29a      	uxth	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 800381e:	b29b      	uxth	r3, r3
 8003820:	429a      	cmp	r2, r3
 8003822:	d101      	bne.n	8003828 <CircularBuffer_Read+0x22>
        return 0; // Buffer empty
 8003824:	2300      	movs	r3, #0
 8003826:	e017      	b.n	8003858 <CircularBuffer_Read+0x52>
    }
    *data = cb->buffer[cb->tail];
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 800382e:	b29b      	uxth	r3, r3
 8003830:	461a      	mov	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	5c9a      	ldrb	r2, [r3, r2]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	701a      	strb	r2, [r3, #0]
    cb->tail = (cb->tail + 1) % BUFFER_SIZE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8003840:	b29b      	uxth	r3, r3
 8003842:	3301      	adds	r3, #1
 8003844:	425a      	negs	r2, r3
 8003846:	b2db      	uxtb	r3, r3
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	bf58      	it	pl
 800384c:	4253      	negpl	r3, r2
 800384e:	b29a      	uxth	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
    return 1; // Success
 8003856:	2301      	movs	r3, #1
}
 8003858:	4618      	mov	r0, r3
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	bc80      	pop	{r7}
 8003860:	4770      	bx	lr
	...

08003864 <CheckAndPrintReceivedData>:
void CheckAndPrintReceivedData(void) {
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
	uint8_t byte;

	while(CircularBuffer_Read(&rxBuffer, &byte)) {
 800386a:	e02b      	b.n	80038c4 <CheckAndPrintReceivedData+0x60>
		HAL_UART_Transmit(&uart1.huart, &byte, 1, HAL_MAX_DELAY);
 800386c:	1df9      	adds	r1, r7, #7
 800386e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003872:	2201      	movs	r2, #1
 8003874:	481a      	ldr	r0, [pc, #104]	@ (80038e0 <CheckAndPrintReceivedData+0x7c>)
 8003876:	f7fe ffcf 	bl	8002818 <HAL_UART_Transmit>
		checkCtrlC(byte);
 800387a:	79fb      	ldrb	r3, [r7, #7]
 800387c:	4618      	mov	r0, r3
 800387e:	f000 f837 	bl	80038f0 <checkCtrlC>
		if (byte == '\r' || byte == '\n') {
 8003882:	79fb      	ldrb	r3, [r7, #7]
 8003884:	2b0d      	cmp	r3, #13
 8003886:	d002      	beq.n	800388e <CheckAndPrintReceivedData+0x2a>
 8003888:	79fb      	ldrb	r3, [r7, #7]
 800388a:	2b0a      	cmp	r3, #10
 800388c:	d10c      	bne.n	80038a8 <CheckAndPrintReceivedData+0x44>
			buffer[myindex] = '\0';
 800388e:	4b15      	ldr	r3, [pc, #84]	@ (80038e4 <CheckAndPrintReceivedData+0x80>)
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	4b14      	ldr	r3, [pc, #80]	@ (80038e8 <CheckAndPrintReceivedData+0x84>)
 8003896:	2100      	movs	r1, #0
 8003898:	5499      	strb	r1, [r3, r2]
			processCommand(buffer);
 800389a:	4813      	ldr	r0, [pc, #76]	@ (80038e8 <CheckAndPrintReceivedData+0x84>)
 800389c:	f000 f842 	bl	8003924 <processCommand>

			myindex = 0;
 80038a0:	4b10      	ldr	r3, [pc, #64]	@ (80038e4 <CheckAndPrintReceivedData+0x80>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	801a      	strh	r2, [r3, #0]
 80038a6:	e00d      	b.n	80038c4 <CheckAndPrintReceivedData+0x60>
		}else if (myindex < BUFFER_SIZE - 1) {
 80038a8:	4b0e      	ldr	r3, [pc, #56]	@ (80038e4 <CheckAndPrintReceivedData+0x80>)
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	2bfe      	cmp	r3, #254	@ 0xfe
 80038ae:	d809      	bhi.n	80038c4 <CheckAndPrintReceivedData+0x60>
			buffer[myindex++] = byte;
 80038b0:	4b0c      	ldr	r3, [pc, #48]	@ (80038e4 <CheckAndPrintReceivedData+0x80>)
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	1c5a      	adds	r2, r3, #1
 80038b6:	b291      	uxth	r1, r2
 80038b8:	4a0a      	ldr	r2, [pc, #40]	@ (80038e4 <CheckAndPrintReceivedData+0x80>)
 80038ba:	8011      	strh	r1, [r2, #0]
 80038bc:	461a      	mov	r2, r3
 80038be:	79f9      	ldrb	r1, [r7, #7]
 80038c0:	4b09      	ldr	r3, [pc, #36]	@ (80038e8 <CheckAndPrintReceivedData+0x84>)
 80038c2:	5499      	strb	r1, [r3, r2]
	while(CircularBuffer_Read(&rxBuffer, &byte)) {
 80038c4:	1dfb      	adds	r3, r7, #7
 80038c6:	4619      	mov	r1, r3
 80038c8:	4808      	ldr	r0, [pc, #32]	@ (80038ec <CheckAndPrintReceivedData+0x88>)
 80038ca:	f7ff ff9c 	bl	8003806 <CircularBuffer_Read>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1cb      	bne.n	800386c <CheckAndPrintReceivedData+0x8>
		}
	}
}
 80038d4:	bf00      	nop
 80038d6:	bf00      	nop
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	2000001c 	.word	0x2000001c
 80038e4:	200002e6 	.word	0x200002e6
 80038e8:	200002e8 	.word	0x200002e8
 80038ec:	200003e8 	.word	0x200003e8

080038f0 <checkCtrlC>:

void checkCtrlC(uint8_t data){
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	71fb      	strb	r3, [r7, #7]
	if (data == 0x03){
 80038fa:	79fb      	ldrb	r3, [r7, #7]
 80038fc:	2b03      	cmp	r3, #3
 80038fe:	d107      	bne.n	8003910 <checkCtrlC+0x20>
		UART_SendString(&uart1.huart, "^C\n\r");
 8003900:	4905      	ldr	r1, [pc, #20]	@ (8003918 <checkCtrlC+0x28>)
 8003902:	4806      	ldr	r0, [pc, #24]	@ (800391c <checkCtrlC+0x2c>)
 8003904:	f7ff ff0c 	bl	8003720 <UART_SendString>
		UART_SendString(&uart1.huart, PROMPT);
 8003908:	4905      	ldr	r1, [pc, #20]	@ (8003920 <checkCtrlC+0x30>)
 800390a:	4804      	ldr	r0, [pc, #16]	@ (800391c <checkCtrlC+0x2c>)
 800390c:	f7ff ff08 	bl	8003720 <UART_SendString>
	}
}
 8003910:	bf00      	nop
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	0800530c 	.word	0x0800530c
 800391c:	2000001c 	.word	0x2000001c
 8003920:	08005314 	.word	0x08005314

08003924 <processCommand>:
    {"info", handleInfoCommand},
    {NULL, handleInvalidCommand}
};

void processCommand(char *cmd)
{
 8003924:	b590      	push	{r4, r7, lr}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
    char *token = strtok(cmd, " ");
 800392c:	4918      	ldr	r1, [pc, #96]	@ (8003990 <processCommand+0x6c>)
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 fc2a 	bl	8004188 <strtok>
 8003934:	60b8      	str	r0, [r7, #8]
    for (int i = 0; commandMap[i].command != NULL; i++) {
 8003936:	2300      	movs	r3, #0
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	e01c      	b.n	8003976 <processCommand+0x52>
        if (strcmp(token, commandMap[i].command) == 0) {
 800393c:	4a15      	ldr	r2, [pc, #84]	@ (8003994 <processCommand+0x70>)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003944:	4619      	mov	r1, r3
 8003946:	68b8      	ldr	r0, [r7, #8]
 8003948:	f7fc fc00 	bl	800014c <strcmp>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10e      	bne.n	8003970 <processCommand+0x4c>
            commandMap[i].handler(strtok(NULL, ""));	//strtok(NULL, "" chính là phần còn lại sau khi tách lệnh, phần này là phần đối số
 8003952:	4a10      	ldr	r2, [pc, #64]	@ (8003994 <processCommand+0x70>)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	4413      	add	r3, r2
 800395a:	685c      	ldr	r4, [r3, #4]
 800395c:	490e      	ldr	r1, [pc, #56]	@ (8003998 <processCommand+0x74>)
 800395e:	2000      	movs	r0, #0
 8003960:	f000 fc12 	bl	8004188 <strtok>
 8003964:	4603      	mov	r3, r0
 8003966:	4618      	mov	r0, r3
 8003968:	47a0      	blx	r4
            prompt();
 800396a:	f000 fa11 	bl	8003d90 <prompt>
            return;
 800396e:	e00b      	b.n	8003988 <processCommand+0x64>
    for (int i = 0; commandMap[i].command != NULL; i++) {
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	3301      	adds	r3, #1
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	4a07      	ldr	r2, [pc, #28]	@ (8003994 <processCommand+0x70>)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1dc      	bne.n	800393c <processCommand+0x18>
        }
    }
    handleInvalidCommand(NULL);
 8003982:	2000      	movs	r0, #0
 8003984:	f000 f9f2 	bl	8003d6c <handleInvalidCommand>
}
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	bd90      	pop	{r4, r7, pc}
 800398e:	bf00      	nop
 8003990:	08005350 	.word	0x08005350
 8003994:	20000130 	.word	0x20000130
 8003998:	08005354 	.word	0x08005354

0800399c <check_arg>:
int count = 0;
uint8_t pins[3];

int check_arg(char *args) {
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
    char *token = strtok(args, " ");
 80039a4:	491f      	ldr	r1, [pc, #124]	@ (8003a24 <check_arg+0x88>)
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 fbee 	bl	8004188 <strtok>
 80039ac:	60f8      	str	r0, [r7, #12]
    count = 0;
 80039ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003a28 <check_arg+0x8c>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]
    while (token != NULL) {
 80039b4:	e024      	b.n	8003a00 <check_arg+0x64>
        uint8_t pin = atoi(token);
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 f9fc 	bl	8003db4 <atoi>
 80039bc:	4603      	mov	r3, r0
 80039be:	72fb      	strb	r3, [r7, #11]
        if (pin >= 4 && pin <= 8) {
 80039c0:	7afb      	ldrb	r3, [r7, #11]
 80039c2:	2b03      	cmp	r3, #3
 80039c4:	d916      	bls.n	80039f4 <check_arg+0x58>
 80039c6:	7afb      	ldrb	r3, [r7, #11]
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	d813      	bhi.n	80039f4 <check_arg+0x58>
            if (count < 3) {
 80039cc:	4b16      	ldr	r3, [pc, #88]	@ (8003a28 <check_arg+0x8c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	dc04      	bgt.n	80039de <check_arg+0x42>
                pins[count] = pin;
 80039d4:	4b14      	ldr	r3, [pc, #80]	@ (8003a28 <check_arg+0x8c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4914      	ldr	r1, [pc, #80]	@ (8003a2c <check_arg+0x90>)
 80039da:	7afa      	ldrb	r2, [r7, #11]
 80039dc:	54ca      	strb	r2, [r1, r3]
            }
            count++;
 80039de:	4b12      	ldr	r3, [pc, #72]	@ (8003a28 <check_arg+0x8c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3301      	adds	r3, #1
 80039e4:	4a10      	ldr	r2, [pc, #64]	@ (8003a28 <check_arg+0x8c>)
 80039e6:	6013      	str	r3, [r2, #0]
        } else {
            UART_SendString(&uart1.huart, "\r\nError: Invalid pin. Only PA4, PA5, PA6, PA7, and PA8 are allowed.");
            return 0;
        }
        token = strtok(NULL, " ");
 80039e8:	490e      	ldr	r1, [pc, #56]	@ (8003a24 <check_arg+0x88>)
 80039ea:	2000      	movs	r0, #0
 80039ec:	f000 fbcc 	bl	8004188 <strtok>
 80039f0:	60f8      	str	r0, [r7, #12]
 80039f2:	e005      	b.n	8003a00 <check_arg+0x64>
            UART_SendString(&uart1.huart, "\r\nError: Invalid pin. Only PA4, PA5, PA6, PA7, and PA8 are allowed.");
 80039f4:	490e      	ldr	r1, [pc, #56]	@ (8003a30 <check_arg+0x94>)
 80039f6:	480f      	ldr	r0, [pc, #60]	@ (8003a34 <check_arg+0x98>)
 80039f8:	f7ff fe92 	bl	8003720 <UART_SendString>
            return 0;
 80039fc:	2300      	movs	r3, #0
 80039fe:	e00d      	b.n	8003a1c <check_arg+0x80>
    while (token != NULL) {
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1d7      	bne.n	80039b6 <check_arg+0x1a>
    }
    if (count > 3) {
 8003a06:	4b08      	ldr	r3, [pc, #32]	@ (8003a28 <check_arg+0x8c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b03      	cmp	r3, #3
 8003a0c:	dd05      	ble.n	8003a1a <check_arg+0x7e>
        UART_SendString(&uart1.huart, "\r\nError: Too many arguments.");
 8003a0e:	490a      	ldr	r1, [pc, #40]	@ (8003a38 <check_arg+0x9c>)
 8003a10:	4808      	ldr	r0, [pc, #32]	@ (8003a34 <check_arg+0x98>)
 8003a12:	f7ff fe85 	bl	8003720 <UART_SendString>
        return 0;
 8003a16:	2300      	movs	r3, #0
 8003a18:	e000      	b.n	8003a1c <check_arg+0x80>
    }
    return 1;
 8003a1a:	2301      	movs	r3, #1
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	08005350 	.word	0x08005350
 8003a28:	200004f0 	.word	0x200004f0
 8003a2c:	200004f4 	.word	0x200004f4
 8003a30:	08005358 	.word	0x08005358
 8003a34:	2000001c 	.word	0x2000001c
 8003a38:	0800539c 	.word	0x0800539c

08003a3c <handleLedOnCommand>:
void handleLedOnCommand(char *args) {
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
	if(check_arg(args)){
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7ff ffa9 	bl	800399c <check_arg>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d017      	beq.n	8003a80 <handleLedOnCommand+0x44>
		for (int i = 0; i < count; i++) {
 8003a50:	2300      	movs	r3, #0
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	e00f      	b.n	8003a76 <handleLedOnCommand+0x3a>
			HAL_GPIO_WritePin(GPIOA, 1 << pins[i], GPIO_PIN_SET);
 8003a56:	4a0c      	ldr	r2, [pc, #48]	@ (8003a88 <handleLedOnCommand+0x4c>)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	2301      	movs	r3, #1
 8003a62:	4093      	lsls	r3, r2
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2201      	movs	r2, #1
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4808      	ldr	r0, [pc, #32]	@ (8003a8c <handleLedOnCommand+0x50>)
 8003a6c:	f7fe f8f0 	bl	8001c50 <HAL_GPIO_WritePin>
		for (int i = 0; i < count; i++) {
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	3301      	adds	r3, #1
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	4b06      	ldr	r3, [pc, #24]	@ (8003a90 <handleLedOnCommand+0x54>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	dbea      	blt.n	8003a56 <handleLedOnCommand+0x1a>
		}
	}
}
 8003a80:	bf00      	nop
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	200004f4 	.word	0x200004f4
 8003a8c:	40010800 	.word	0x40010800
 8003a90:	200004f0 	.word	0x200004f0

08003a94 <handleLedOffCommand>:

void handleLedOffCommand(char *args) {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
	if(check_arg(args)){
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7ff ff7d 	bl	800399c <check_arg>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d017      	beq.n	8003ad8 <handleLedOffCommand+0x44>
		for (int i = 0; i < count; i++) {
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	e00f      	b.n	8003ace <handleLedOffCommand+0x3a>
			HAL_GPIO_WritePin(GPIOA, 1 << pins[i], GPIO_PIN_RESET);
 8003aae:	4a0c      	ldr	r2, [pc, #48]	@ (8003ae0 <handleLedOffCommand+0x4c>)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	2301      	movs	r3, #1
 8003aba:	4093      	lsls	r3, r2
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	2200      	movs	r2, #0
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4808      	ldr	r0, [pc, #32]	@ (8003ae4 <handleLedOffCommand+0x50>)
 8003ac4:	f7fe f8c4 	bl	8001c50 <HAL_GPIO_WritePin>
		for (int i = 0; i < count; i++) {
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	3301      	adds	r3, #1
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	4b06      	ldr	r3, [pc, #24]	@ (8003ae8 <handleLedOffCommand+0x54>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	dbea      	blt.n	8003aae <handleLedOffCommand+0x1a>
		}
	}
}
 8003ad8:	bf00      	nop
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	200004f4 	.word	0x200004f4
 8003ae4:	40010800 	.word	0x40010800
 8003ae8:	200004f0 	.word	0x200004f0

08003aec <handleLedBlinkCommand>:
void handleLedBlinkCommand(char *args) {
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
	uint8_t pins[3];  // Mảng để lưu trữ các giá trị pin
	int count = 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]
	char *token = strtok(args, " ");
 8003af8:	491f      	ldr	r1, [pc, #124]	@ (8003b78 <handleLedBlinkCommand+0x8c>)
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 fb44 	bl	8004188 <strtok>
 8003b00:	6138      	str	r0, [r7, #16]
	while (token != NULL) {
 8003b02:	e025      	b.n	8003b50 <handleLedBlinkCommand+0x64>
		uint8_t pin = atoi(token);
 8003b04:	6938      	ldr	r0, [r7, #16]
 8003b06:	f000 f955 	bl	8003db4 <atoi>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	73fb      	strb	r3, [r7, #15]
		if (pin >= 4 && pin <= 8) {
 8003b0e:	7bfb      	ldrb	r3, [r7, #15]
 8003b10:	2b03      	cmp	r3, #3
 8003b12:	d90e      	bls.n	8003b32 <handleLedBlinkCommand+0x46>
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d80b      	bhi.n	8003b32 <handleLedBlinkCommand+0x46>
			pins[count++] = pin;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	617a      	str	r2, [r7, #20]
 8003b20:	3318      	adds	r3, #24
 8003b22:	443b      	add	r3, r7
 8003b24:	7bfa      	ldrb	r2, [r7, #15]
 8003b26:	f803 2c0c 	strb.w	r2, [r3, #-12]
		} else {
			UART_SendString(&uart1.huart, "\r\nError: Invalid pin. Only PA4, PA5, PA6, PA7, and PA8 are allowed.");
			return;
		}
		if (count > 3) {
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2b03      	cmp	r3, #3
 8003b2e:	dc05      	bgt.n	8003b3c <handleLedBlinkCommand+0x50>
 8003b30:	e009      	b.n	8003b46 <handleLedBlinkCommand+0x5a>
			UART_SendString(&uart1.huart, "\r\nError: Invalid pin. Only PA4, PA5, PA6, PA7, and PA8 are allowed.");
 8003b32:	4912      	ldr	r1, [pc, #72]	@ (8003b7c <handleLedBlinkCommand+0x90>)
 8003b34:	4812      	ldr	r0, [pc, #72]	@ (8003b80 <handleLedBlinkCommand+0x94>)
 8003b36:	f7ff fdf3 	bl	8003720 <UART_SendString>
			return;
 8003b3a:	e019      	b.n	8003b70 <handleLedBlinkCommand+0x84>
			UART_SendString(&uart1.huart, "\r\nError: Too many arguments");
 8003b3c:	4911      	ldr	r1, [pc, #68]	@ (8003b84 <handleLedBlinkCommand+0x98>)
 8003b3e:	4810      	ldr	r0, [pc, #64]	@ (8003b80 <handleLedBlinkCommand+0x94>)
 8003b40:	f7ff fdee 	bl	8003720 <UART_SendString>
			return;
 8003b44:	e014      	b.n	8003b70 <handleLedBlinkCommand+0x84>
		}
		token = strtok(NULL, " ");
 8003b46:	490c      	ldr	r1, [pc, #48]	@ (8003b78 <handleLedBlinkCommand+0x8c>)
 8003b48:	2000      	movs	r0, #0
 8003b4a:	f000 fb1d 	bl	8004188 <strtok>
 8003b4e:	6138      	str	r0, [r7, #16]
	while (token != NULL) {
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1d6      	bne.n	8003b04 <handleLedBlinkCommand+0x18>
	}
	stopBlink = 1;
 8003b56:	4b0c      	ldr	r3, [pc, #48]	@ (8003b88 <handleLedBlinkCommand+0x9c>)
 8003b58:	2201      	movs	r2, #1
 8003b5a:	701a      	strb	r2, [r3, #0]
	UART_SendString(&uart1.huart, "\r\n");
 8003b5c:	490b      	ldr	r1, [pc, #44]	@ (8003b8c <handleLedBlinkCommand+0xa0>)
 8003b5e:	4808      	ldr	r0, [pc, #32]	@ (8003b80 <handleLedBlinkCommand+0x94>)
 8003b60:	f7ff fdde 	bl	8003720 <UART_SendString>
	startBlinking(pins, count);
 8003b64:	f107 030c 	add.w	r3, r7, #12
 8003b68:	6979      	ldr	r1, [r7, #20]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 f810 	bl	8003b90 <startBlinking>
}
 8003b70:	3718      	adds	r7, #24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	08005350 	.word	0x08005350
 8003b7c:	08005358 	.word	0x08005358
 8003b80:	2000001c 	.word	0x2000001c
 8003b84:	080053bc 	.word	0x080053bc
 8003b88:	200004ec 	.word	0x200004ec
 8003b8c:	080053d8 	.word	0x080053d8

08003b90 <startBlinking>:
void startBlinking(uint8_t *pins, int count) {
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
	while (stopBlink) {
 8003b9a:	e033      	b.n	8003c04 <startBlinking+0x74>
		for (int i = 0; i < count; i++) {
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	e00f      	b.n	8003bc2 <startBlinking+0x32>
			HAL_GPIO_WritePin(GPIOA, 1 << pins[i], GPIO_PIN_SET);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	2301      	movs	r3, #1
 8003bae:	4093      	lsls	r3, r2
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4818      	ldr	r0, [pc, #96]	@ (8003c18 <startBlinking+0x88>)
 8003bb8:	f7fe f84a 	bl	8001c50 <HAL_GPIO_WritePin>
		for (int i = 0; i < count; i++) {
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	dbeb      	blt.n	8003ba2 <startBlinking+0x12>
		}
		HAL_Delay(200);
 8003bca:	20c8      	movs	r0, #200	@ 0xc8
 8003bcc:	f7fc ff1e 	bl	8000a0c <HAL_Delay>
		for (int i = 0; i < count; i++) {
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	60bb      	str	r3, [r7, #8]
 8003bd4:	e00f      	b.n	8003bf6 <startBlinking+0x66>
			HAL_GPIO_WritePin(GPIOA, 1 << pins[i], GPIO_PIN_RESET);
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	4413      	add	r3, r2
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	461a      	mov	r2, r3
 8003be0:	2301      	movs	r3, #1
 8003be2:	4093      	lsls	r3, r2
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2200      	movs	r2, #0
 8003be8:	4619      	mov	r1, r3
 8003bea:	480b      	ldr	r0, [pc, #44]	@ (8003c18 <startBlinking+0x88>)
 8003bec:	f7fe f830 	bl	8001c50 <HAL_GPIO_WritePin>
		for (int i = 0; i < count; i++) {
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	60bb      	str	r3, [r7, #8]
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	dbeb      	blt.n	8003bd6 <startBlinking+0x46>
		}
		HAL_Delay(200);
 8003bfe:	20c8      	movs	r0, #200	@ 0xc8
 8003c00:	f7fc ff04 	bl	8000a0c <HAL_Delay>
	while (stopBlink) {
 8003c04:	4b05      	ldr	r3, [pc, #20]	@ (8003c1c <startBlinking+0x8c>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1c6      	bne.n	8003b9c <startBlinking+0xc>
	}
}
 8003c0e:	bf00      	nop
 8003c10:	bf00      	nop
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40010800 	.word	0x40010800
 8003c1c:	200004ec 	.word	0x200004ec

08003c20 <handleAdcGetCommand>:
void handleAdcGetCommand(char *args) {
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b094      	sub	sp, #80	@ 0x50
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
	uint8_t pin = atoi(args);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f8c3 	bl	8003db4 <atoi>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    ADC_ChannelConfTypeDef sConfig = {0};
 8003c34:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	605a      	str	r2, [r3, #4]
 8003c3e:	609a      	str	r2, [r3, #8]
    if (pin == 0 || pin == 1) {
 8003c40:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <handleAdcGetCommand+0x30>
 8003c48:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d14b      	bne.n	8003ce8 <handleAdcGetCommand+0xc8>
        // Cấu hình kênh ADC tương ứng với chân PA0 hoặc PA1
        sConfig.Channel = (pin == 0) ? ADC_CHANNEL_0 : ADC_CHANNEL_1;
 8003c50:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	bf14      	ite	ne
 8003c58:	2301      	movne	r3, #1
 8003c5a:	2300      	moveq	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        sConfig.Rank = ADC_REGULAR_RANK_1;
 8003c60:	2301      	movs	r3, #1
 8003c62:	643b      	str	r3, [r7, #64]	@ 0x40
        sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8003c64:	2303      	movs	r3, #3
 8003c66:	647b      	str	r3, [r7, #68]	@ 0x44

        if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003c68:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4822      	ldr	r0, [pc, #136]	@ (8003cf8 <handleAdcGetCommand+0xd8>)
 8003c70:	f7fd f9b4 	bl	8000fdc <HAL_ADC_ConfigChannel>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d004      	beq.n	8003c84 <handleAdcGetCommand+0x64>
            UART_SendString(&uart1.huart, "\r\nError: Failed to configure ADC channel.");
 8003c7a:	4920      	ldr	r1, [pc, #128]	@ (8003cfc <handleAdcGetCommand+0xdc>)
 8003c7c:	4820      	ldr	r0, [pc, #128]	@ (8003d00 <handleAdcGetCommand+0xe0>)
 8003c7e:	f7ff fd4f 	bl	8003720 <UART_SendString>
 8003c82:	e035      	b.n	8003cf0 <handleAdcGetCommand+0xd0>
            return;
        }
        stopBlink = 1;
 8003c84:	4b1f      	ldr	r3, [pc, #124]	@ (8003d04 <handleAdcGetCommand+0xe4>)
 8003c86:	2201      	movs	r2, #1
 8003c88:	701a      	strb	r2, [r3, #0]
        while (stopBlink) {
 8003c8a:	e027      	b.n	8003cdc <handleAdcGetCommand+0xbc>
            HAL_ADC_Start(&hadc1);
 8003c8c:	481a      	ldr	r0, [pc, #104]	@ (8003cf8 <handleAdcGetCommand+0xd8>)
 8003c8e:	f7fc ffb9 	bl	8000c04 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc1, 100);
 8003c92:	2164      	movs	r1, #100	@ 0x64
 8003c94:	4818      	ldr	r0, [pc, #96]	@ (8003cf8 <handleAdcGetCommand+0xd8>)
 8003c96:	f7fd f88f 	bl	8000db8 <HAL_ADC_PollForConversion>
            uint32_t value = HAL_ADC_GetValue(&hadc1);
 8003c9a:	4817      	ldr	r0, [pc, #92]	@ (8003cf8 <handleAdcGetCommand+0xd8>)
 8003c9c:	f7fd f992 	bl	8000fc4 <HAL_ADC_GetValue>
 8003ca0:	64b8      	str	r0, [r7, #72]	@ 0x48
            HAL_ADC_Stop(&hadc1);
 8003ca2:	4815      	ldr	r0, [pc, #84]	@ (8003cf8 <handleAdcGetCommand+0xd8>)
 8003ca4:	f7fd f85c 	bl	8000d60 <HAL_ADC_Stop>

            char msg[50];
            sprintf(msg, "\r\nADC Value (PA%d): %lu", pin, value);
 8003ca8:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8003cac:	f107 0008 	add.w	r0, r7, #8
 8003cb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cb2:	4915      	ldr	r1, [pc, #84]	@ (8003d08 <handleAdcGetCommand+0xe8>)
 8003cb4:	f000 f9fc 	bl	80040b0 <siprintf>
            HAL_UART_Transmit(&uart1.huart, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003cb8:	f107 0308 	add.w	r3, r7, #8
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fc fa4f 	bl	8000160 <strlen>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	f107 0108 	add.w	r1, r7, #8
 8003cca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003cce:	480c      	ldr	r0, [pc, #48]	@ (8003d00 <handleAdcGetCommand+0xe0>)
 8003cd0:	f7fe fda2 	bl	8002818 <HAL_UART_Transmit>

            HAL_Delay(1000);
 8003cd4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003cd8:	f7fc fe98 	bl	8000a0c <HAL_Delay>
        while (stopBlink) {
 8003cdc:	4b09      	ldr	r3, [pc, #36]	@ (8003d04 <handleAdcGetCommand+0xe4>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1d2      	bne.n	8003c8c <handleAdcGetCommand+0x6c>
    if (pin == 0 || pin == 1) {
 8003ce6:	e003      	b.n	8003cf0 <handleAdcGetCommand+0xd0>
        }
    } else {
        UART_SendString(&uart1.huart, "\r\nError: Invalid pin. Only PA0 and PA1 are allowed.");
 8003ce8:	4908      	ldr	r1, [pc, #32]	@ (8003d0c <handleAdcGetCommand+0xec>)
 8003cea:	4805      	ldr	r0, [pc, #20]	@ (8003d00 <handleAdcGetCommand+0xe0>)
 8003cec:	f7ff fd18 	bl	8003720 <UART_SendString>
    }
}
 8003cf0:	3750      	adds	r7, #80	@ 0x50
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	200001d8 	.word	0x200001d8
 8003cfc:	080053dc 	.word	0x080053dc
 8003d00:	2000001c 	.word	0x2000001c
 8003d04:	200004ec 	.word	0x200004ec
 8003d08:	08005408 	.word	0x08005408
 8003d0c:	08005420 	.word	0x08005420

08003d10 <handleInfoCommand>:

void handleInfoCommand(char *args) {
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b09c      	sub	sp, #112	@ 0x70
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
	if (args != NULL) {
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d015      	beq.n	8003d4a <handleInfoCommand+0x3a>
		char response[100];
		snprintf(response, sizeof(response), "\r\nSample text: %s", args);
 8003d1e:	f107 000c 	add.w	r0, r7, #12
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a0e      	ldr	r2, [pc, #56]	@ (8003d60 <handleInfoCommand+0x50>)
 8003d26:	2164      	movs	r1, #100	@ 0x64
 8003d28:	f000 f98e 	bl	8004048 <sniprintf>
		HAL_UART_Transmit(&uart1.huart, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
 8003d2c:	f107 030c 	add.w	r3, r7, #12
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fc fa15 	bl	8000160 <strlen>
 8003d36:	4603      	mov	r3, r0
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	f107 010c 	add.w	r1, r7, #12
 8003d3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d42:	4808      	ldr	r0, [pc, #32]	@ (8003d64 <handleInfoCommand+0x54>)
 8003d44:	f7fe fd68 	bl	8002818 <HAL_UART_Transmit>
	} else {
		HAL_UART_Transmit(&uart1.huart, (uint8_t*)"Sample text: \r\n", 15, HAL_MAX_DELAY);
	}
}
 8003d48:	e006      	b.n	8003d58 <handleInfoCommand+0x48>
		HAL_UART_Transmit(&uart1.huart, (uint8_t*)"Sample text: \r\n", 15, HAL_MAX_DELAY);
 8003d4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d4e:	220f      	movs	r2, #15
 8003d50:	4905      	ldr	r1, [pc, #20]	@ (8003d68 <handleInfoCommand+0x58>)
 8003d52:	4804      	ldr	r0, [pc, #16]	@ (8003d64 <handleInfoCommand+0x54>)
 8003d54:	f7fe fd60 	bl	8002818 <HAL_UART_Transmit>
}
 8003d58:	bf00      	nop
 8003d5a:	3770      	adds	r7, #112	@ 0x70
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	08005454 	.word	0x08005454
 8003d64:	2000001c 	.word	0x2000001c
 8003d68:	08005468 	.word	0x08005468

08003d6c <handleInvalidCommand>:
void handleInvalidCommand(char *args) {
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
    UART_SendString(&uart1.huart, "\n\rInvalid Command");
 8003d74:	4904      	ldr	r1, [pc, #16]	@ (8003d88 <handleInvalidCommand+0x1c>)
 8003d76:	4805      	ldr	r0, [pc, #20]	@ (8003d8c <handleInvalidCommand+0x20>)
 8003d78:	f7ff fcd2 	bl	8003720 <UART_SendString>
    prompt();
 8003d7c:	f000 f808 	bl	8003d90 <prompt>

}
 8003d80:	bf00      	nop
 8003d82:	3708      	adds	r7, #8
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	08005478 	.word	0x08005478
 8003d8c:	2000001c 	.word	0x2000001c

08003d90 <prompt>:

void prompt(){
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
	UART_SendString(&uart1.huart, "\n\r");
 8003d94:	4904      	ldr	r1, [pc, #16]	@ (8003da8 <prompt+0x18>)
 8003d96:	4805      	ldr	r0, [pc, #20]	@ (8003dac <prompt+0x1c>)
 8003d98:	f7ff fcc2 	bl	8003720 <UART_SendString>
	UART_SendString(&uart1.huart, PROMPT);
 8003d9c:	4904      	ldr	r1, [pc, #16]	@ (8003db0 <prompt+0x20>)
 8003d9e:	4803      	ldr	r0, [pc, #12]	@ (8003dac <prompt+0x1c>)
 8003da0:	f7ff fcbe 	bl	8003720 <UART_SendString>
}
 8003da4:	bf00      	nop
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	0800548c 	.word	0x0800548c
 8003dac:	2000001c 	.word	0x2000001c
 8003db0:	08005490 	.word	0x08005490

08003db4 <atoi>:
 8003db4:	220a      	movs	r2, #10
 8003db6:	2100      	movs	r1, #0
 8003db8:	f000 b87a 	b.w	8003eb0 <strtol>

08003dbc <_strtol_l.constprop.0>:
 8003dbc:	2b24      	cmp	r3, #36	@ 0x24
 8003dbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dc2:	4686      	mov	lr, r0
 8003dc4:	4690      	mov	r8, r2
 8003dc6:	d801      	bhi.n	8003dcc <_strtol_l.constprop.0+0x10>
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d106      	bne.n	8003dda <_strtol_l.constprop.0+0x1e>
 8003dcc:	f000 fa7e 	bl	80042cc <__errno>
 8003dd0:	2316      	movs	r3, #22
 8003dd2:	6003      	str	r3, [r0, #0]
 8003dd4:	2000      	movs	r0, #0
 8003dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dda:	460d      	mov	r5, r1
 8003ddc:	4833      	ldr	r0, [pc, #204]	@ (8003eac <_strtol_l.constprop.0+0xf0>)
 8003dde:	462a      	mov	r2, r5
 8003de0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003de4:	5d06      	ldrb	r6, [r0, r4]
 8003de6:	f016 0608 	ands.w	r6, r6, #8
 8003dea:	d1f8      	bne.n	8003dde <_strtol_l.constprop.0+0x22>
 8003dec:	2c2d      	cmp	r4, #45	@ 0x2d
 8003dee:	d12d      	bne.n	8003e4c <_strtol_l.constprop.0+0x90>
 8003df0:	2601      	movs	r6, #1
 8003df2:	782c      	ldrb	r4, [r5, #0]
 8003df4:	1c95      	adds	r5, r2, #2
 8003df6:	f033 0210 	bics.w	r2, r3, #16
 8003dfa:	d109      	bne.n	8003e10 <_strtol_l.constprop.0+0x54>
 8003dfc:	2c30      	cmp	r4, #48	@ 0x30
 8003dfe:	d12a      	bne.n	8003e56 <_strtol_l.constprop.0+0x9a>
 8003e00:	782a      	ldrb	r2, [r5, #0]
 8003e02:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003e06:	2a58      	cmp	r2, #88	@ 0x58
 8003e08:	d125      	bne.n	8003e56 <_strtol_l.constprop.0+0x9a>
 8003e0a:	2310      	movs	r3, #16
 8003e0c:	786c      	ldrb	r4, [r5, #1]
 8003e0e:	3502      	adds	r5, #2
 8003e10:	2200      	movs	r2, #0
 8003e12:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003e16:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8003e1a:	fbbc f9f3 	udiv	r9, ip, r3
 8003e1e:	4610      	mov	r0, r2
 8003e20:	fb03 ca19 	mls	sl, r3, r9, ip
 8003e24:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003e28:	2f09      	cmp	r7, #9
 8003e2a:	d81b      	bhi.n	8003e64 <_strtol_l.constprop.0+0xa8>
 8003e2c:	463c      	mov	r4, r7
 8003e2e:	42a3      	cmp	r3, r4
 8003e30:	dd27      	ble.n	8003e82 <_strtol_l.constprop.0+0xc6>
 8003e32:	1c57      	adds	r7, r2, #1
 8003e34:	d007      	beq.n	8003e46 <_strtol_l.constprop.0+0x8a>
 8003e36:	4581      	cmp	r9, r0
 8003e38:	d320      	bcc.n	8003e7c <_strtol_l.constprop.0+0xc0>
 8003e3a:	d101      	bne.n	8003e40 <_strtol_l.constprop.0+0x84>
 8003e3c:	45a2      	cmp	sl, r4
 8003e3e:	db1d      	blt.n	8003e7c <_strtol_l.constprop.0+0xc0>
 8003e40:	2201      	movs	r2, #1
 8003e42:	fb00 4003 	mla	r0, r0, r3, r4
 8003e46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003e4a:	e7eb      	b.n	8003e24 <_strtol_l.constprop.0+0x68>
 8003e4c:	2c2b      	cmp	r4, #43	@ 0x2b
 8003e4e:	bf04      	itt	eq
 8003e50:	782c      	ldrbeq	r4, [r5, #0]
 8003e52:	1c95      	addeq	r5, r2, #2
 8003e54:	e7cf      	b.n	8003df6 <_strtol_l.constprop.0+0x3a>
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1da      	bne.n	8003e10 <_strtol_l.constprop.0+0x54>
 8003e5a:	2c30      	cmp	r4, #48	@ 0x30
 8003e5c:	bf0c      	ite	eq
 8003e5e:	2308      	moveq	r3, #8
 8003e60:	230a      	movne	r3, #10
 8003e62:	e7d5      	b.n	8003e10 <_strtol_l.constprop.0+0x54>
 8003e64:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003e68:	2f19      	cmp	r7, #25
 8003e6a:	d801      	bhi.n	8003e70 <_strtol_l.constprop.0+0xb4>
 8003e6c:	3c37      	subs	r4, #55	@ 0x37
 8003e6e:	e7de      	b.n	8003e2e <_strtol_l.constprop.0+0x72>
 8003e70:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003e74:	2f19      	cmp	r7, #25
 8003e76:	d804      	bhi.n	8003e82 <_strtol_l.constprop.0+0xc6>
 8003e78:	3c57      	subs	r4, #87	@ 0x57
 8003e7a:	e7d8      	b.n	8003e2e <_strtol_l.constprop.0+0x72>
 8003e7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e80:	e7e1      	b.n	8003e46 <_strtol_l.constprop.0+0x8a>
 8003e82:	1c53      	adds	r3, r2, #1
 8003e84:	d108      	bne.n	8003e98 <_strtol_l.constprop.0+0xdc>
 8003e86:	2322      	movs	r3, #34	@ 0x22
 8003e88:	4660      	mov	r0, ip
 8003e8a:	f8ce 3000 	str.w	r3, [lr]
 8003e8e:	f1b8 0f00 	cmp.w	r8, #0
 8003e92:	d0a0      	beq.n	8003dd6 <_strtol_l.constprop.0+0x1a>
 8003e94:	1e69      	subs	r1, r5, #1
 8003e96:	e006      	b.n	8003ea6 <_strtol_l.constprop.0+0xea>
 8003e98:	b106      	cbz	r6, 8003e9c <_strtol_l.constprop.0+0xe0>
 8003e9a:	4240      	negs	r0, r0
 8003e9c:	f1b8 0f00 	cmp.w	r8, #0
 8003ea0:	d099      	beq.n	8003dd6 <_strtol_l.constprop.0+0x1a>
 8003ea2:	2a00      	cmp	r2, #0
 8003ea4:	d1f6      	bne.n	8003e94 <_strtol_l.constprop.0+0xd8>
 8003ea6:	f8c8 1000 	str.w	r1, [r8]
 8003eaa:	e794      	b.n	8003dd6 <_strtol_l.constprop.0+0x1a>
 8003eac:	080054df 	.word	0x080054df

08003eb0 <strtol>:
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	460a      	mov	r2, r1
 8003eb4:	4601      	mov	r1, r0
 8003eb6:	4802      	ldr	r0, [pc, #8]	@ (8003ec0 <strtol+0x10>)
 8003eb8:	6800      	ldr	r0, [r0, #0]
 8003eba:	f7ff bf7f 	b.w	8003dbc <_strtol_l.constprop.0>
 8003ebe:	bf00      	nop
 8003ec0:	2000016c 	.word	0x2000016c

08003ec4 <std>:
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	b510      	push	{r4, lr}
 8003ec8:	4604      	mov	r4, r0
 8003eca:	e9c0 3300 	strd	r3, r3, [r0]
 8003ece:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ed2:	6083      	str	r3, [r0, #8]
 8003ed4:	8181      	strh	r1, [r0, #12]
 8003ed6:	6643      	str	r3, [r0, #100]	@ 0x64
 8003ed8:	81c2      	strh	r2, [r0, #14]
 8003eda:	6183      	str	r3, [r0, #24]
 8003edc:	4619      	mov	r1, r3
 8003ede:	2208      	movs	r2, #8
 8003ee0:	305c      	adds	r0, #92	@ 0x5c
 8003ee2:	f000 f948 	bl	8004176 <memset>
 8003ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8003f1c <std+0x58>)
 8003ee8:	6224      	str	r4, [r4, #32]
 8003eea:	6263      	str	r3, [r4, #36]	@ 0x24
 8003eec:	4b0c      	ldr	r3, [pc, #48]	@ (8003f20 <std+0x5c>)
 8003eee:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8003f24 <std+0x60>)
 8003ef2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8003f28 <std+0x64>)
 8003ef6:	6323      	str	r3, [r4, #48]	@ 0x30
 8003ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8003f2c <std+0x68>)
 8003efa:	429c      	cmp	r4, r3
 8003efc:	d006      	beq.n	8003f0c <std+0x48>
 8003efe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003f02:	4294      	cmp	r4, r2
 8003f04:	d002      	beq.n	8003f0c <std+0x48>
 8003f06:	33d0      	adds	r3, #208	@ 0xd0
 8003f08:	429c      	cmp	r4, r3
 8003f0a:	d105      	bne.n	8003f18 <std+0x54>
 8003f0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f14:	f000 ba04 	b.w	8004320 <__retarget_lock_init_recursive>
 8003f18:	bd10      	pop	{r4, pc}
 8003f1a:	bf00      	nop
 8003f1c:	080040f1 	.word	0x080040f1
 8003f20:	08004113 	.word	0x08004113
 8003f24:	0800414b 	.word	0x0800414b
 8003f28:	0800416f 	.word	0x0800416f
 8003f2c:	200004f8 	.word	0x200004f8

08003f30 <stdio_exit_handler>:
 8003f30:	4a02      	ldr	r2, [pc, #8]	@ (8003f3c <stdio_exit_handler+0xc>)
 8003f32:	4903      	ldr	r1, [pc, #12]	@ (8003f40 <stdio_exit_handler+0x10>)
 8003f34:	4803      	ldr	r0, [pc, #12]	@ (8003f44 <stdio_exit_handler+0x14>)
 8003f36:	f000 b869 	b.w	800400c <_fwalk_sglue>
 8003f3a:	bf00      	nop
 8003f3c:	20000160 	.word	0x20000160
 8003f40:	08004c35 	.word	0x08004c35
 8003f44:	20000170 	.word	0x20000170

08003f48 <cleanup_stdio>:
 8003f48:	6841      	ldr	r1, [r0, #4]
 8003f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8003f7c <cleanup_stdio+0x34>)
 8003f4c:	b510      	push	{r4, lr}
 8003f4e:	4299      	cmp	r1, r3
 8003f50:	4604      	mov	r4, r0
 8003f52:	d001      	beq.n	8003f58 <cleanup_stdio+0x10>
 8003f54:	f000 fe6e 	bl	8004c34 <_fflush_r>
 8003f58:	68a1      	ldr	r1, [r4, #8]
 8003f5a:	4b09      	ldr	r3, [pc, #36]	@ (8003f80 <cleanup_stdio+0x38>)
 8003f5c:	4299      	cmp	r1, r3
 8003f5e:	d002      	beq.n	8003f66 <cleanup_stdio+0x1e>
 8003f60:	4620      	mov	r0, r4
 8003f62:	f000 fe67 	bl	8004c34 <_fflush_r>
 8003f66:	68e1      	ldr	r1, [r4, #12]
 8003f68:	4b06      	ldr	r3, [pc, #24]	@ (8003f84 <cleanup_stdio+0x3c>)
 8003f6a:	4299      	cmp	r1, r3
 8003f6c:	d004      	beq.n	8003f78 <cleanup_stdio+0x30>
 8003f6e:	4620      	mov	r0, r4
 8003f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f74:	f000 be5e 	b.w	8004c34 <_fflush_r>
 8003f78:	bd10      	pop	{r4, pc}
 8003f7a:	bf00      	nop
 8003f7c:	200004f8 	.word	0x200004f8
 8003f80:	20000560 	.word	0x20000560
 8003f84:	200005c8 	.word	0x200005c8

08003f88 <global_stdio_init.part.0>:
 8003f88:	b510      	push	{r4, lr}
 8003f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb8 <global_stdio_init.part.0+0x30>)
 8003f8c:	4c0b      	ldr	r4, [pc, #44]	@ (8003fbc <global_stdio_init.part.0+0x34>)
 8003f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8003fc0 <global_stdio_init.part.0+0x38>)
 8003f90:	4620      	mov	r0, r4
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	2104      	movs	r1, #4
 8003f96:	2200      	movs	r2, #0
 8003f98:	f7ff ff94 	bl	8003ec4 <std>
 8003f9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	2109      	movs	r1, #9
 8003fa4:	f7ff ff8e 	bl	8003ec4 <std>
 8003fa8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003fac:	2202      	movs	r2, #2
 8003fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fb2:	2112      	movs	r1, #18
 8003fb4:	f7ff bf86 	b.w	8003ec4 <std>
 8003fb8:	20000630 	.word	0x20000630
 8003fbc:	200004f8 	.word	0x200004f8
 8003fc0:	08003f31 	.word	0x08003f31

08003fc4 <__sfp_lock_acquire>:
 8003fc4:	4801      	ldr	r0, [pc, #4]	@ (8003fcc <__sfp_lock_acquire+0x8>)
 8003fc6:	f000 b9ac 	b.w	8004322 <__retarget_lock_acquire_recursive>
 8003fca:	bf00      	nop
 8003fcc:	20000639 	.word	0x20000639

08003fd0 <__sfp_lock_release>:
 8003fd0:	4801      	ldr	r0, [pc, #4]	@ (8003fd8 <__sfp_lock_release+0x8>)
 8003fd2:	f000 b9a7 	b.w	8004324 <__retarget_lock_release_recursive>
 8003fd6:	bf00      	nop
 8003fd8:	20000639 	.word	0x20000639

08003fdc <__sinit>:
 8003fdc:	b510      	push	{r4, lr}
 8003fde:	4604      	mov	r4, r0
 8003fe0:	f7ff fff0 	bl	8003fc4 <__sfp_lock_acquire>
 8003fe4:	6a23      	ldr	r3, [r4, #32]
 8003fe6:	b11b      	cbz	r3, 8003ff0 <__sinit+0x14>
 8003fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fec:	f7ff bff0 	b.w	8003fd0 <__sfp_lock_release>
 8003ff0:	4b04      	ldr	r3, [pc, #16]	@ (8004004 <__sinit+0x28>)
 8003ff2:	6223      	str	r3, [r4, #32]
 8003ff4:	4b04      	ldr	r3, [pc, #16]	@ (8004008 <__sinit+0x2c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1f5      	bne.n	8003fe8 <__sinit+0xc>
 8003ffc:	f7ff ffc4 	bl	8003f88 <global_stdio_init.part.0>
 8004000:	e7f2      	b.n	8003fe8 <__sinit+0xc>
 8004002:	bf00      	nop
 8004004:	08003f49 	.word	0x08003f49
 8004008:	20000630 	.word	0x20000630

0800400c <_fwalk_sglue>:
 800400c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004010:	4607      	mov	r7, r0
 8004012:	4688      	mov	r8, r1
 8004014:	4614      	mov	r4, r2
 8004016:	2600      	movs	r6, #0
 8004018:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800401c:	f1b9 0901 	subs.w	r9, r9, #1
 8004020:	d505      	bpl.n	800402e <_fwalk_sglue+0x22>
 8004022:	6824      	ldr	r4, [r4, #0]
 8004024:	2c00      	cmp	r4, #0
 8004026:	d1f7      	bne.n	8004018 <_fwalk_sglue+0xc>
 8004028:	4630      	mov	r0, r6
 800402a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800402e:	89ab      	ldrh	r3, [r5, #12]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d907      	bls.n	8004044 <_fwalk_sglue+0x38>
 8004034:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004038:	3301      	adds	r3, #1
 800403a:	d003      	beq.n	8004044 <_fwalk_sglue+0x38>
 800403c:	4629      	mov	r1, r5
 800403e:	4638      	mov	r0, r7
 8004040:	47c0      	blx	r8
 8004042:	4306      	orrs	r6, r0
 8004044:	3568      	adds	r5, #104	@ 0x68
 8004046:	e7e9      	b.n	800401c <_fwalk_sglue+0x10>

08004048 <sniprintf>:
 8004048:	b40c      	push	{r2, r3}
 800404a:	b530      	push	{r4, r5, lr}
 800404c:	4b17      	ldr	r3, [pc, #92]	@ (80040ac <sniprintf+0x64>)
 800404e:	1e0c      	subs	r4, r1, #0
 8004050:	681d      	ldr	r5, [r3, #0]
 8004052:	b09d      	sub	sp, #116	@ 0x74
 8004054:	da08      	bge.n	8004068 <sniprintf+0x20>
 8004056:	238b      	movs	r3, #139	@ 0x8b
 8004058:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800405c:	602b      	str	r3, [r5, #0]
 800405e:	b01d      	add	sp, #116	@ 0x74
 8004060:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004064:	b002      	add	sp, #8
 8004066:	4770      	bx	lr
 8004068:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800406c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004070:	bf0c      	ite	eq
 8004072:	4623      	moveq	r3, r4
 8004074:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8004078:	9304      	str	r3, [sp, #16]
 800407a:	9307      	str	r3, [sp, #28]
 800407c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004080:	9002      	str	r0, [sp, #8]
 8004082:	9006      	str	r0, [sp, #24]
 8004084:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004088:	4628      	mov	r0, r5
 800408a:	ab21      	add	r3, sp, #132	@ 0x84
 800408c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800408e:	a902      	add	r1, sp, #8
 8004090:	9301      	str	r3, [sp, #4]
 8004092:	f000 fac1 	bl	8004618 <_svfiprintf_r>
 8004096:	1c43      	adds	r3, r0, #1
 8004098:	bfbc      	itt	lt
 800409a:	238b      	movlt	r3, #139	@ 0x8b
 800409c:	602b      	strlt	r3, [r5, #0]
 800409e:	2c00      	cmp	r4, #0
 80040a0:	d0dd      	beq.n	800405e <sniprintf+0x16>
 80040a2:	2200      	movs	r2, #0
 80040a4:	9b02      	ldr	r3, [sp, #8]
 80040a6:	701a      	strb	r2, [r3, #0]
 80040a8:	e7d9      	b.n	800405e <sniprintf+0x16>
 80040aa:	bf00      	nop
 80040ac:	2000016c 	.word	0x2000016c

080040b0 <siprintf>:
 80040b0:	b40e      	push	{r1, r2, r3}
 80040b2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80040b6:	b500      	push	{lr}
 80040b8:	b09c      	sub	sp, #112	@ 0x70
 80040ba:	ab1d      	add	r3, sp, #116	@ 0x74
 80040bc:	9002      	str	r0, [sp, #8]
 80040be:	9006      	str	r0, [sp, #24]
 80040c0:	9107      	str	r1, [sp, #28]
 80040c2:	9104      	str	r1, [sp, #16]
 80040c4:	4808      	ldr	r0, [pc, #32]	@ (80040e8 <siprintf+0x38>)
 80040c6:	4909      	ldr	r1, [pc, #36]	@ (80040ec <siprintf+0x3c>)
 80040c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80040cc:	9105      	str	r1, [sp, #20]
 80040ce:	6800      	ldr	r0, [r0, #0]
 80040d0:	a902      	add	r1, sp, #8
 80040d2:	9301      	str	r3, [sp, #4]
 80040d4:	f000 faa0 	bl	8004618 <_svfiprintf_r>
 80040d8:	2200      	movs	r2, #0
 80040da:	9b02      	ldr	r3, [sp, #8]
 80040dc:	701a      	strb	r2, [r3, #0]
 80040de:	b01c      	add	sp, #112	@ 0x70
 80040e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80040e4:	b003      	add	sp, #12
 80040e6:	4770      	bx	lr
 80040e8:	2000016c 	.word	0x2000016c
 80040ec:	ffff0208 	.word	0xffff0208

080040f0 <__sread>:
 80040f0:	b510      	push	{r4, lr}
 80040f2:	460c      	mov	r4, r1
 80040f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040f8:	f000 f8c4 	bl	8004284 <_read_r>
 80040fc:	2800      	cmp	r0, #0
 80040fe:	bfab      	itete	ge
 8004100:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004102:	89a3      	ldrhlt	r3, [r4, #12]
 8004104:	181b      	addge	r3, r3, r0
 8004106:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800410a:	bfac      	ite	ge
 800410c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800410e:	81a3      	strhlt	r3, [r4, #12]
 8004110:	bd10      	pop	{r4, pc}

08004112 <__swrite>:
 8004112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004116:	461f      	mov	r7, r3
 8004118:	898b      	ldrh	r3, [r1, #12]
 800411a:	4605      	mov	r5, r0
 800411c:	05db      	lsls	r3, r3, #23
 800411e:	460c      	mov	r4, r1
 8004120:	4616      	mov	r6, r2
 8004122:	d505      	bpl.n	8004130 <__swrite+0x1e>
 8004124:	2302      	movs	r3, #2
 8004126:	2200      	movs	r2, #0
 8004128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800412c:	f000 f898 	bl	8004260 <_lseek_r>
 8004130:	89a3      	ldrh	r3, [r4, #12]
 8004132:	4632      	mov	r2, r6
 8004134:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004138:	81a3      	strh	r3, [r4, #12]
 800413a:	4628      	mov	r0, r5
 800413c:	463b      	mov	r3, r7
 800413e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004146:	f000 b8af 	b.w	80042a8 <_write_r>

0800414a <__sseek>:
 800414a:	b510      	push	{r4, lr}
 800414c:	460c      	mov	r4, r1
 800414e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004152:	f000 f885 	bl	8004260 <_lseek_r>
 8004156:	1c43      	adds	r3, r0, #1
 8004158:	89a3      	ldrh	r3, [r4, #12]
 800415a:	bf15      	itete	ne
 800415c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800415e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004162:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004166:	81a3      	strheq	r3, [r4, #12]
 8004168:	bf18      	it	ne
 800416a:	81a3      	strhne	r3, [r4, #12]
 800416c:	bd10      	pop	{r4, pc}

0800416e <__sclose>:
 800416e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004172:	f000 b865 	b.w	8004240 <_close_r>

08004176 <memset>:
 8004176:	4603      	mov	r3, r0
 8004178:	4402      	add	r2, r0
 800417a:	4293      	cmp	r3, r2
 800417c:	d100      	bne.n	8004180 <memset+0xa>
 800417e:	4770      	bx	lr
 8004180:	f803 1b01 	strb.w	r1, [r3], #1
 8004184:	e7f9      	b.n	800417a <memset+0x4>
	...

08004188 <strtok>:
 8004188:	4b16      	ldr	r3, [pc, #88]	@ (80041e4 <strtok+0x5c>)
 800418a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800418e:	681f      	ldr	r7, [r3, #0]
 8004190:	4605      	mov	r5, r0
 8004192:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8004194:	460e      	mov	r6, r1
 8004196:	b9ec      	cbnz	r4, 80041d4 <strtok+0x4c>
 8004198:	2050      	movs	r0, #80	@ 0x50
 800419a:	f000 f92b 	bl	80043f4 <malloc>
 800419e:	4602      	mov	r2, r0
 80041a0:	6478      	str	r0, [r7, #68]	@ 0x44
 80041a2:	b920      	cbnz	r0, 80041ae <strtok+0x26>
 80041a4:	215b      	movs	r1, #91	@ 0x5b
 80041a6:	4b10      	ldr	r3, [pc, #64]	@ (80041e8 <strtok+0x60>)
 80041a8:	4810      	ldr	r0, [pc, #64]	@ (80041ec <strtok+0x64>)
 80041aa:	f000 f8bd 	bl	8004328 <__assert_func>
 80041ae:	e9c0 4400 	strd	r4, r4, [r0]
 80041b2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80041b6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80041ba:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80041be:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80041c2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80041c6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80041ca:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80041ce:	6184      	str	r4, [r0, #24]
 80041d0:	7704      	strb	r4, [r0, #28]
 80041d2:	6244      	str	r4, [r0, #36]	@ 0x24
 80041d4:	4631      	mov	r1, r6
 80041d6:	4628      	mov	r0, r5
 80041d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041da:	2301      	movs	r3, #1
 80041dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041e0:	f000 b806 	b.w	80041f0 <__strtok_r>
 80041e4:	2000016c 	.word	0x2000016c
 80041e8:	080055df 	.word	0x080055df
 80041ec:	080055f6 	.word	0x080055f6

080041f0 <__strtok_r>:
 80041f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041f2:	4604      	mov	r4, r0
 80041f4:	b908      	cbnz	r0, 80041fa <__strtok_r+0xa>
 80041f6:	6814      	ldr	r4, [r2, #0]
 80041f8:	b144      	cbz	r4, 800420c <__strtok_r+0x1c>
 80041fa:	460f      	mov	r7, r1
 80041fc:	4620      	mov	r0, r4
 80041fe:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004202:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004206:	b91e      	cbnz	r6, 8004210 <__strtok_r+0x20>
 8004208:	b965      	cbnz	r5, 8004224 <__strtok_r+0x34>
 800420a:	6015      	str	r5, [r2, #0]
 800420c:	2000      	movs	r0, #0
 800420e:	e005      	b.n	800421c <__strtok_r+0x2c>
 8004210:	42b5      	cmp	r5, r6
 8004212:	d1f6      	bne.n	8004202 <__strtok_r+0x12>
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1f0      	bne.n	80041fa <__strtok_r+0xa>
 8004218:	6014      	str	r4, [r2, #0]
 800421a:	7003      	strb	r3, [r0, #0]
 800421c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800421e:	461c      	mov	r4, r3
 8004220:	e00c      	b.n	800423c <__strtok_r+0x4c>
 8004222:	b915      	cbnz	r5, 800422a <__strtok_r+0x3a>
 8004224:	460e      	mov	r6, r1
 8004226:	f814 3b01 	ldrb.w	r3, [r4], #1
 800422a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800422e:	42ab      	cmp	r3, r5
 8004230:	d1f7      	bne.n	8004222 <__strtok_r+0x32>
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0f3      	beq.n	800421e <__strtok_r+0x2e>
 8004236:	2300      	movs	r3, #0
 8004238:	f804 3c01 	strb.w	r3, [r4, #-1]
 800423c:	6014      	str	r4, [r2, #0]
 800423e:	e7ed      	b.n	800421c <__strtok_r+0x2c>

08004240 <_close_r>:
 8004240:	b538      	push	{r3, r4, r5, lr}
 8004242:	2300      	movs	r3, #0
 8004244:	4d05      	ldr	r5, [pc, #20]	@ (800425c <_close_r+0x1c>)
 8004246:	4604      	mov	r4, r0
 8004248:	4608      	mov	r0, r1
 800424a:	602b      	str	r3, [r5, #0]
 800424c:	f7fc fae9 	bl	8000822 <_close>
 8004250:	1c43      	adds	r3, r0, #1
 8004252:	d102      	bne.n	800425a <_close_r+0x1a>
 8004254:	682b      	ldr	r3, [r5, #0]
 8004256:	b103      	cbz	r3, 800425a <_close_r+0x1a>
 8004258:	6023      	str	r3, [r4, #0]
 800425a:	bd38      	pop	{r3, r4, r5, pc}
 800425c:	20000634 	.word	0x20000634

08004260 <_lseek_r>:
 8004260:	b538      	push	{r3, r4, r5, lr}
 8004262:	4604      	mov	r4, r0
 8004264:	4608      	mov	r0, r1
 8004266:	4611      	mov	r1, r2
 8004268:	2200      	movs	r2, #0
 800426a:	4d05      	ldr	r5, [pc, #20]	@ (8004280 <_lseek_r+0x20>)
 800426c:	602a      	str	r2, [r5, #0]
 800426e:	461a      	mov	r2, r3
 8004270:	f7fc fafb 	bl	800086a <_lseek>
 8004274:	1c43      	adds	r3, r0, #1
 8004276:	d102      	bne.n	800427e <_lseek_r+0x1e>
 8004278:	682b      	ldr	r3, [r5, #0]
 800427a:	b103      	cbz	r3, 800427e <_lseek_r+0x1e>
 800427c:	6023      	str	r3, [r4, #0]
 800427e:	bd38      	pop	{r3, r4, r5, pc}
 8004280:	20000634 	.word	0x20000634

08004284 <_read_r>:
 8004284:	b538      	push	{r3, r4, r5, lr}
 8004286:	4604      	mov	r4, r0
 8004288:	4608      	mov	r0, r1
 800428a:	4611      	mov	r1, r2
 800428c:	2200      	movs	r2, #0
 800428e:	4d05      	ldr	r5, [pc, #20]	@ (80042a4 <_read_r+0x20>)
 8004290:	602a      	str	r2, [r5, #0]
 8004292:	461a      	mov	r2, r3
 8004294:	f7fc fa8c 	bl	80007b0 <_read>
 8004298:	1c43      	adds	r3, r0, #1
 800429a:	d102      	bne.n	80042a2 <_read_r+0x1e>
 800429c:	682b      	ldr	r3, [r5, #0]
 800429e:	b103      	cbz	r3, 80042a2 <_read_r+0x1e>
 80042a0:	6023      	str	r3, [r4, #0]
 80042a2:	bd38      	pop	{r3, r4, r5, pc}
 80042a4:	20000634 	.word	0x20000634

080042a8 <_write_r>:
 80042a8:	b538      	push	{r3, r4, r5, lr}
 80042aa:	4604      	mov	r4, r0
 80042ac:	4608      	mov	r0, r1
 80042ae:	4611      	mov	r1, r2
 80042b0:	2200      	movs	r2, #0
 80042b2:	4d05      	ldr	r5, [pc, #20]	@ (80042c8 <_write_r+0x20>)
 80042b4:	602a      	str	r2, [r5, #0]
 80042b6:	461a      	mov	r2, r3
 80042b8:	f7fc fa97 	bl	80007ea <_write>
 80042bc:	1c43      	adds	r3, r0, #1
 80042be:	d102      	bne.n	80042c6 <_write_r+0x1e>
 80042c0:	682b      	ldr	r3, [r5, #0]
 80042c2:	b103      	cbz	r3, 80042c6 <_write_r+0x1e>
 80042c4:	6023      	str	r3, [r4, #0]
 80042c6:	bd38      	pop	{r3, r4, r5, pc}
 80042c8:	20000634 	.word	0x20000634

080042cc <__errno>:
 80042cc:	4b01      	ldr	r3, [pc, #4]	@ (80042d4 <__errno+0x8>)
 80042ce:	6818      	ldr	r0, [r3, #0]
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	2000016c 	.word	0x2000016c

080042d8 <__libc_init_array>:
 80042d8:	b570      	push	{r4, r5, r6, lr}
 80042da:	2600      	movs	r6, #0
 80042dc:	4d0c      	ldr	r5, [pc, #48]	@ (8004310 <__libc_init_array+0x38>)
 80042de:	4c0d      	ldr	r4, [pc, #52]	@ (8004314 <__libc_init_array+0x3c>)
 80042e0:	1b64      	subs	r4, r4, r5
 80042e2:	10a4      	asrs	r4, r4, #2
 80042e4:	42a6      	cmp	r6, r4
 80042e6:	d109      	bne.n	80042fc <__libc_init_array+0x24>
 80042e8:	f000 fffc 	bl	80052e4 <_init>
 80042ec:	2600      	movs	r6, #0
 80042ee:	4d0a      	ldr	r5, [pc, #40]	@ (8004318 <__libc_init_array+0x40>)
 80042f0:	4c0a      	ldr	r4, [pc, #40]	@ (800431c <__libc_init_array+0x44>)
 80042f2:	1b64      	subs	r4, r4, r5
 80042f4:	10a4      	asrs	r4, r4, #2
 80042f6:	42a6      	cmp	r6, r4
 80042f8:	d105      	bne.n	8004306 <__libc_init_array+0x2e>
 80042fa:	bd70      	pop	{r4, r5, r6, pc}
 80042fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004300:	4798      	blx	r3
 8004302:	3601      	adds	r6, #1
 8004304:	e7ee      	b.n	80042e4 <__libc_init_array+0xc>
 8004306:	f855 3b04 	ldr.w	r3, [r5], #4
 800430a:	4798      	blx	r3
 800430c:	3601      	adds	r6, #1
 800430e:	e7f2      	b.n	80042f6 <__libc_init_array+0x1e>
 8004310:	080056c8 	.word	0x080056c8
 8004314:	080056c8 	.word	0x080056c8
 8004318:	080056c8 	.word	0x080056c8
 800431c:	080056cc 	.word	0x080056cc

08004320 <__retarget_lock_init_recursive>:
 8004320:	4770      	bx	lr

08004322 <__retarget_lock_acquire_recursive>:
 8004322:	4770      	bx	lr

08004324 <__retarget_lock_release_recursive>:
 8004324:	4770      	bx	lr
	...

08004328 <__assert_func>:
 8004328:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800432a:	4614      	mov	r4, r2
 800432c:	461a      	mov	r2, r3
 800432e:	4b09      	ldr	r3, [pc, #36]	@ (8004354 <__assert_func+0x2c>)
 8004330:	4605      	mov	r5, r0
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68d8      	ldr	r0, [r3, #12]
 8004336:	b954      	cbnz	r4, 800434e <__assert_func+0x26>
 8004338:	4b07      	ldr	r3, [pc, #28]	@ (8004358 <__assert_func+0x30>)
 800433a:	461c      	mov	r4, r3
 800433c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004340:	9100      	str	r1, [sp, #0]
 8004342:	462b      	mov	r3, r5
 8004344:	4905      	ldr	r1, [pc, #20]	@ (800435c <__assert_func+0x34>)
 8004346:	f000 fc9d 	bl	8004c84 <fiprintf>
 800434a:	f000 fcf3 	bl	8004d34 <abort>
 800434e:	4b04      	ldr	r3, [pc, #16]	@ (8004360 <__assert_func+0x38>)
 8004350:	e7f4      	b.n	800433c <__assert_func+0x14>
 8004352:	bf00      	nop
 8004354:	2000016c 	.word	0x2000016c
 8004358:	0800568b 	.word	0x0800568b
 800435c:	0800565d 	.word	0x0800565d
 8004360:	08005650 	.word	0x08005650

08004364 <_free_r>:
 8004364:	b538      	push	{r3, r4, r5, lr}
 8004366:	4605      	mov	r5, r0
 8004368:	2900      	cmp	r1, #0
 800436a:	d040      	beq.n	80043ee <_free_r+0x8a>
 800436c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004370:	1f0c      	subs	r4, r1, #4
 8004372:	2b00      	cmp	r3, #0
 8004374:	bfb8      	it	lt
 8004376:	18e4      	addlt	r4, r4, r3
 8004378:	f000 f8e6 	bl	8004548 <__malloc_lock>
 800437c:	4a1c      	ldr	r2, [pc, #112]	@ (80043f0 <_free_r+0x8c>)
 800437e:	6813      	ldr	r3, [r2, #0]
 8004380:	b933      	cbnz	r3, 8004390 <_free_r+0x2c>
 8004382:	6063      	str	r3, [r4, #4]
 8004384:	6014      	str	r4, [r2, #0]
 8004386:	4628      	mov	r0, r5
 8004388:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800438c:	f000 b8e2 	b.w	8004554 <__malloc_unlock>
 8004390:	42a3      	cmp	r3, r4
 8004392:	d908      	bls.n	80043a6 <_free_r+0x42>
 8004394:	6820      	ldr	r0, [r4, #0]
 8004396:	1821      	adds	r1, r4, r0
 8004398:	428b      	cmp	r3, r1
 800439a:	bf01      	itttt	eq
 800439c:	6819      	ldreq	r1, [r3, #0]
 800439e:	685b      	ldreq	r3, [r3, #4]
 80043a0:	1809      	addeq	r1, r1, r0
 80043a2:	6021      	streq	r1, [r4, #0]
 80043a4:	e7ed      	b.n	8004382 <_free_r+0x1e>
 80043a6:	461a      	mov	r2, r3
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	b10b      	cbz	r3, 80043b0 <_free_r+0x4c>
 80043ac:	42a3      	cmp	r3, r4
 80043ae:	d9fa      	bls.n	80043a6 <_free_r+0x42>
 80043b0:	6811      	ldr	r1, [r2, #0]
 80043b2:	1850      	adds	r0, r2, r1
 80043b4:	42a0      	cmp	r0, r4
 80043b6:	d10b      	bne.n	80043d0 <_free_r+0x6c>
 80043b8:	6820      	ldr	r0, [r4, #0]
 80043ba:	4401      	add	r1, r0
 80043bc:	1850      	adds	r0, r2, r1
 80043be:	4283      	cmp	r3, r0
 80043c0:	6011      	str	r1, [r2, #0]
 80043c2:	d1e0      	bne.n	8004386 <_free_r+0x22>
 80043c4:	6818      	ldr	r0, [r3, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	4408      	add	r0, r1
 80043ca:	6010      	str	r0, [r2, #0]
 80043cc:	6053      	str	r3, [r2, #4]
 80043ce:	e7da      	b.n	8004386 <_free_r+0x22>
 80043d0:	d902      	bls.n	80043d8 <_free_r+0x74>
 80043d2:	230c      	movs	r3, #12
 80043d4:	602b      	str	r3, [r5, #0]
 80043d6:	e7d6      	b.n	8004386 <_free_r+0x22>
 80043d8:	6820      	ldr	r0, [r4, #0]
 80043da:	1821      	adds	r1, r4, r0
 80043dc:	428b      	cmp	r3, r1
 80043de:	bf01      	itttt	eq
 80043e0:	6819      	ldreq	r1, [r3, #0]
 80043e2:	685b      	ldreq	r3, [r3, #4]
 80043e4:	1809      	addeq	r1, r1, r0
 80043e6:	6021      	streq	r1, [r4, #0]
 80043e8:	6063      	str	r3, [r4, #4]
 80043ea:	6054      	str	r4, [r2, #4]
 80043ec:	e7cb      	b.n	8004386 <_free_r+0x22>
 80043ee:	bd38      	pop	{r3, r4, r5, pc}
 80043f0:	20000640 	.word	0x20000640

080043f4 <malloc>:
 80043f4:	4b02      	ldr	r3, [pc, #8]	@ (8004400 <malloc+0xc>)
 80043f6:	4601      	mov	r1, r0
 80043f8:	6818      	ldr	r0, [r3, #0]
 80043fa:	f000 b825 	b.w	8004448 <_malloc_r>
 80043fe:	bf00      	nop
 8004400:	2000016c 	.word	0x2000016c

08004404 <sbrk_aligned>:
 8004404:	b570      	push	{r4, r5, r6, lr}
 8004406:	4e0f      	ldr	r6, [pc, #60]	@ (8004444 <sbrk_aligned+0x40>)
 8004408:	460c      	mov	r4, r1
 800440a:	6831      	ldr	r1, [r6, #0]
 800440c:	4605      	mov	r5, r0
 800440e:	b911      	cbnz	r1, 8004416 <sbrk_aligned+0x12>
 8004410:	f000 fc64 	bl	8004cdc <_sbrk_r>
 8004414:	6030      	str	r0, [r6, #0]
 8004416:	4621      	mov	r1, r4
 8004418:	4628      	mov	r0, r5
 800441a:	f000 fc5f 	bl	8004cdc <_sbrk_r>
 800441e:	1c43      	adds	r3, r0, #1
 8004420:	d103      	bne.n	800442a <sbrk_aligned+0x26>
 8004422:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004426:	4620      	mov	r0, r4
 8004428:	bd70      	pop	{r4, r5, r6, pc}
 800442a:	1cc4      	adds	r4, r0, #3
 800442c:	f024 0403 	bic.w	r4, r4, #3
 8004430:	42a0      	cmp	r0, r4
 8004432:	d0f8      	beq.n	8004426 <sbrk_aligned+0x22>
 8004434:	1a21      	subs	r1, r4, r0
 8004436:	4628      	mov	r0, r5
 8004438:	f000 fc50 	bl	8004cdc <_sbrk_r>
 800443c:	3001      	adds	r0, #1
 800443e:	d1f2      	bne.n	8004426 <sbrk_aligned+0x22>
 8004440:	e7ef      	b.n	8004422 <sbrk_aligned+0x1e>
 8004442:	bf00      	nop
 8004444:	2000063c 	.word	0x2000063c

08004448 <_malloc_r>:
 8004448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800444c:	1ccd      	adds	r5, r1, #3
 800444e:	f025 0503 	bic.w	r5, r5, #3
 8004452:	3508      	adds	r5, #8
 8004454:	2d0c      	cmp	r5, #12
 8004456:	bf38      	it	cc
 8004458:	250c      	movcc	r5, #12
 800445a:	2d00      	cmp	r5, #0
 800445c:	4606      	mov	r6, r0
 800445e:	db01      	blt.n	8004464 <_malloc_r+0x1c>
 8004460:	42a9      	cmp	r1, r5
 8004462:	d904      	bls.n	800446e <_malloc_r+0x26>
 8004464:	230c      	movs	r3, #12
 8004466:	6033      	str	r3, [r6, #0]
 8004468:	2000      	movs	r0, #0
 800446a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800446e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004544 <_malloc_r+0xfc>
 8004472:	f000 f869 	bl	8004548 <__malloc_lock>
 8004476:	f8d8 3000 	ldr.w	r3, [r8]
 800447a:	461c      	mov	r4, r3
 800447c:	bb44      	cbnz	r4, 80044d0 <_malloc_r+0x88>
 800447e:	4629      	mov	r1, r5
 8004480:	4630      	mov	r0, r6
 8004482:	f7ff ffbf 	bl	8004404 <sbrk_aligned>
 8004486:	1c43      	adds	r3, r0, #1
 8004488:	4604      	mov	r4, r0
 800448a:	d158      	bne.n	800453e <_malloc_r+0xf6>
 800448c:	f8d8 4000 	ldr.w	r4, [r8]
 8004490:	4627      	mov	r7, r4
 8004492:	2f00      	cmp	r7, #0
 8004494:	d143      	bne.n	800451e <_malloc_r+0xd6>
 8004496:	2c00      	cmp	r4, #0
 8004498:	d04b      	beq.n	8004532 <_malloc_r+0xea>
 800449a:	6823      	ldr	r3, [r4, #0]
 800449c:	4639      	mov	r1, r7
 800449e:	4630      	mov	r0, r6
 80044a0:	eb04 0903 	add.w	r9, r4, r3
 80044a4:	f000 fc1a 	bl	8004cdc <_sbrk_r>
 80044a8:	4581      	cmp	r9, r0
 80044aa:	d142      	bne.n	8004532 <_malloc_r+0xea>
 80044ac:	6821      	ldr	r1, [r4, #0]
 80044ae:	4630      	mov	r0, r6
 80044b0:	1a6d      	subs	r5, r5, r1
 80044b2:	4629      	mov	r1, r5
 80044b4:	f7ff ffa6 	bl	8004404 <sbrk_aligned>
 80044b8:	3001      	adds	r0, #1
 80044ba:	d03a      	beq.n	8004532 <_malloc_r+0xea>
 80044bc:	6823      	ldr	r3, [r4, #0]
 80044be:	442b      	add	r3, r5
 80044c0:	6023      	str	r3, [r4, #0]
 80044c2:	f8d8 3000 	ldr.w	r3, [r8]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	bb62      	cbnz	r2, 8004524 <_malloc_r+0xdc>
 80044ca:	f8c8 7000 	str.w	r7, [r8]
 80044ce:	e00f      	b.n	80044f0 <_malloc_r+0xa8>
 80044d0:	6822      	ldr	r2, [r4, #0]
 80044d2:	1b52      	subs	r2, r2, r5
 80044d4:	d420      	bmi.n	8004518 <_malloc_r+0xd0>
 80044d6:	2a0b      	cmp	r2, #11
 80044d8:	d917      	bls.n	800450a <_malloc_r+0xc2>
 80044da:	1961      	adds	r1, r4, r5
 80044dc:	42a3      	cmp	r3, r4
 80044de:	6025      	str	r5, [r4, #0]
 80044e0:	bf18      	it	ne
 80044e2:	6059      	strne	r1, [r3, #4]
 80044e4:	6863      	ldr	r3, [r4, #4]
 80044e6:	bf08      	it	eq
 80044e8:	f8c8 1000 	streq.w	r1, [r8]
 80044ec:	5162      	str	r2, [r4, r5]
 80044ee:	604b      	str	r3, [r1, #4]
 80044f0:	4630      	mov	r0, r6
 80044f2:	f000 f82f 	bl	8004554 <__malloc_unlock>
 80044f6:	f104 000b 	add.w	r0, r4, #11
 80044fa:	1d23      	adds	r3, r4, #4
 80044fc:	f020 0007 	bic.w	r0, r0, #7
 8004500:	1ac2      	subs	r2, r0, r3
 8004502:	bf1c      	itt	ne
 8004504:	1a1b      	subne	r3, r3, r0
 8004506:	50a3      	strne	r3, [r4, r2]
 8004508:	e7af      	b.n	800446a <_malloc_r+0x22>
 800450a:	6862      	ldr	r2, [r4, #4]
 800450c:	42a3      	cmp	r3, r4
 800450e:	bf0c      	ite	eq
 8004510:	f8c8 2000 	streq.w	r2, [r8]
 8004514:	605a      	strne	r2, [r3, #4]
 8004516:	e7eb      	b.n	80044f0 <_malloc_r+0xa8>
 8004518:	4623      	mov	r3, r4
 800451a:	6864      	ldr	r4, [r4, #4]
 800451c:	e7ae      	b.n	800447c <_malloc_r+0x34>
 800451e:	463c      	mov	r4, r7
 8004520:	687f      	ldr	r7, [r7, #4]
 8004522:	e7b6      	b.n	8004492 <_malloc_r+0x4a>
 8004524:	461a      	mov	r2, r3
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	42a3      	cmp	r3, r4
 800452a:	d1fb      	bne.n	8004524 <_malloc_r+0xdc>
 800452c:	2300      	movs	r3, #0
 800452e:	6053      	str	r3, [r2, #4]
 8004530:	e7de      	b.n	80044f0 <_malloc_r+0xa8>
 8004532:	230c      	movs	r3, #12
 8004534:	4630      	mov	r0, r6
 8004536:	6033      	str	r3, [r6, #0]
 8004538:	f000 f80c 	bl	8004554 <__malloc_unlock>
 800453c:	e794      	b.n	8004468 <_malloc_r+0x20>
 800453e:	6005      	str	r5, [r0, #0]
 8004540:	e7d6      	b.n	80044f0 <_malloc_r+0xa8>
 8004542:	bf00      	nop
 8004544:	20000640 	.word	0x20000640

08004548 <__malloc_lock>:
 8004548:	4801      	ldr	r0, [pc, #4]	@ (8004550 <__malloc_lock+0x8>)
 800454a:	f7ff beea 	b.w	8004322 <__retarget_lock_acquire_recursive>
 800454e:	bf00      	nop
 8004550:	20000638 	.word	0x20000638

08004554 <__malloc_unlock>:
 8004554:	4801      	ldr	r0, [pc, #4]	@ (800455c <__malloc_unlock+0x8>)
 8004556:	f7ff bee5 	b.w	8004324 <__retarget_lock_release_recursive>
 800455a:	bf00      	nop
 800455c:	20000638 	.word	0x20000638

08004560 <__ssputs_r>:
 8004560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004564:	461f      	mov	r7, r3
 8004566:	688e      	ldr	r6, [r1, #8]
 8004568:	4682      	mov	sl, r0
 800456a:	42be      	cmp	r6, r7
 800456c:	460c      	mov	r4, r1
 800456e:	4690      	mov	r8, r2
 8004570:	680b      	ldr	r3, [r1, #0]
 8004572:	d82d      	bhi.n	80045d0 <__ssputs_r+0x70>
 8004574:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004578:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800457c:	d026      	beq.n	80045cc <__ssputs_r+0x6c>
 800457e:	6965      	ldr	r5, [r4, #20]
 8004580:	6909      	ldr	r1, [r1, #16]
 8004582:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004586:	eba3 0901 	sub.w	r9, r3, r1
 800458a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800458e:	1c7b      	adds	r3, r7, #1
 8004590:	444b      	add	r3, r9
 8004592:	106d      	asrs	r5, r5, #1
 8004594:	429d      	cmp	r5, r3
 8004596:	bf38      	it	cc
 8004598:	461d      	movcc	r5, r3
 800459a:	0553      	lsls	r3, r2, #21
 800459c:	d527      	bpl.n	80045ee <__ssputs_r+0x8e>
 800459e:	4629      	mov	r1, r5
 80045a0:	f7ff ff52 	bl	8004448 <_malloc_r>
 80045a4:	4606      	mov	r6, r0
 80045a6:	b360      	cbz	r0, 8004602 <__ssputs_r+0xa2>
 80045a8:	464a      	mov	r2, r9
 80045aa:	6921      	ldr	r1, [r4, #16]
 80045ac:	f000 fbb4 	bl	8004d18 <memcpy>
 80045b0:	89a3      	ldrh	r3, [r4, #12]
 80045b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80045b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045ba:	81a3      	strh	r3, [r4, #12]
 80045bc:	6126      	str	r6, [r4, #16]
 80045be:	444e      	add	r6, r9
 80045c0:	6026      	str	r6, [r4, #0]
 80045c2:	463e      	mov	r6, r7
 80045c4:	6165      	str	r5, [r4, #20]
 80045c6:	eba5 0509 	sub.w	r5, r5, r9
 80045ca:	60a5      	str	r5, [r4, #8]
 80045cc:	42be      	cmp	r6, r7
 80045ce:	d900      	bls.n	80045d2 <__ssputs_r+0x72>
 80045d0:	463e      	mov	r6, r7
 80045d2:	4632      	mov	r2, r6
 80045d4:	4641      	mov	r1, r8
 80045d6:	6820      	ldr	r0, [r4, #0]
 80045d8:	f000 fb66 	bl	8004ca8 <memmove>
 80045dc:	2000      	movs	r0, #0
 80045de:	68a3      	ldr	r3, [r4, #8]
 80045e0:	1b9b      	subs	r3, r3, r6
 80045e2:	60a3      	str	r3, [r4, #8]
 80045e4:	6823      	ldr	r3, [r4, #0]
 80045e6:	4433      	add	r3, r6
 80045e8:	6023      	str	r3, [r4, #0]
 80045ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045ee:	462a      	mov	r2, r5
 80045f0:	f000 fba7 	bl	8004d42 <_realloc_r>
 80045f4:	4606      	mov	r6, r0
 80045f6:	2800      	cmp	r0, #0
 80045f8:	d1e0      	bne.n	80045bc <__ssputs_r+0x5c>
 80045fa:	4650      	mov	r0, sl
 80045fc:	6921      	ldr	r1, [r4, #16]
 80045fe:	f7ff feb1 	bl	8004364 <_free_r>
 8004602:	230c      	movs	r3, #12
 8004604:	f8ca 3000 	str.w	r3, [sl]
 8004608:	89a3      	ldrh	r3, [r4, #12]
 800460a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800460e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004612:	81a3      	strh	r3, [r4, #12]
 8004614:	e7e9      	b.n	80045ea <__ssputs_r+0x8a>
	...

08004618 <_svfiprintf_r>:
 8004618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800461c:	4698      	mov	r8, r3
 800461e:	898b      	ldrh	r3, [r1, #12]
 8004620:	4607      	mov	r7, r0
 8004622:	061b      	lsls	r3, r3, #24
 8004624:	460d      	mov	r5, r1
 8004626:	4614      	mov	r4, r2
 8004628:	b09d      	sub	sp, #116	@ 0x74
 800462a:	d510      	bpl.n	800464e <_svfiprintf_r+0x36>
 800462c:	690b      	ldr	r3, [r1, #16]
 800462e:	b973      	cbnz	r3, 800464e <_svfiprintf_r+0x36>
 8004630:	2140      	movs	r1, #64	@ 0x40
 8004632:	f7ff ff09 	bl	8004448 <_malloc_r>
 8004636:	6028      	str	r0, [r5, #0]
 8004638:	6128      	str	r0, [r5, #16]
 800463a:	b930      	cbnz	r0, 800464a <_svfiprintf_r+0x32>
 800463c:	230c      	movs	r3, #12
 800463e:	603b      	str	r3, [r7, #0]
 8004640:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004644:	b01d      	add	sp, #116	@ 0x74
 8004646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800464a:	2340      	movs	r3, #64	@ 0x40
 800464c:	616b      	str	r3, [r5, #20]
 800464e:	2300      	movs	r3, #0
 8004650:	9309      	str	r3, [sp, #36]	@ 0x24
 8004652:	2320      	movs	r3, #32
 8004654:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004658:	2330      	movs	r3, #48	@ 0x30
 800465a:	f04f 0901 	mov.w	r9, #1
 800465e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004662:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80047fc <_svfiprintf_r+0x1e4>
 8004666:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800466a:	4623      	mov	r3, r4
 800466c:	469a      	mov	sl, r3
 800466e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004672:	b10a      	cbz	r2, 8004678 <_svfiprintf_r+0x60>
 8004674:	2a25      	cmp	r2, #37	@ 0x25
 8004676:	d1f9      	bne.n	800466c <_svfiprintf_r+0x54>
 8004678:	ebba 0b04 	subs.w	fp, sl, r4
 800467c:	d00b      	beq.n	8004696 <_svfiprintf_r+0x7e>
 800467e:	465b      	mov	r3, fp
 8004680:	4622      	mov	r2, r4
 8004682:	4629      	mov	r1, r5
 8004684:	4638      	mov	r0, r7
 8004686:	f7ff ff6b 	bl	8004560 <__ssputs_r>
 800468a:	3001      	adds	r0, #1
 800468c:	f000 80a7 	beq.w	80047de <_svfiprintf_r+0x1c6>
 8004690:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004692:	445a      	add	r2, fp
 8004694:	9209      	str	r2, [sp, #36]	@ 0x24
 8004696:	f89a 3000 	ldrb.w	r3, [sl]
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 809f 	beq.w	80047de <_svfiprintf_r+0x1c6>
 80046a0:	2300      	movs	r3, #0
 80046a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80046a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046aa:	f10a 0a01 	add.w	sl, sl, #1
 80046ae:	9304      	str	r3, [sp, #16]
 80046b0:	9307      	str	r3, [sp, #28]
 80046b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80046b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80046b8:	4654      	mov	r4, sl
 80046ba:	2205      	movs	r2, #5
 80046bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046c0:	484e      	ldr	r0, [pc, #312]	@ (80047fc <_svfiprintf_r+0x1e4>)
 80046c2:	f000 fb1b 	bl	8004cfc <memchr>
 80046c6:	9a04      	ldr	r2, [sp, #16]
 80046c8:	b9d8      	cbnz	r0, 8004702 <_svfiprintf_r+0xea>
 80046ca:	06d0      	lsls	r0, r2, #27
 80046cc:	bf44      	itt	mi
 80046ce:	2320      	movmi	r3, #32
 80046d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046d4:	0711      	lsls	r1, r2, #28
 80046d6:	bf44      	itt	mi
 80046d8:	232b      	movmi	r3, #43	@ 0x2b
 80046da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046de:	f89a 3000 	ldrb.w	r3, [sl]
 80046e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80046e4:	d015      	beq.n	8004712 <_svfiprintf_r+0xfa>
 80046e6:	4654      	mov	r4, sl
 80046e8:	2000      	movs	r0, #0
 80046ea:	f04f 0c0a 	mov.w	ip, #10
 80046ee:	9a07      	ldr	r2, [sp, #28]
 80046f0:	4621      	mov	r1, r4
 80046f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046f6:	3b30      	subs	r3, #48	@ 0x30
 80046f8:	2b09      	cmp	r3, #9
 80046fa:	d94b      	bls.n	8004794 <_svfiprintf_r+0x17c>
 80046fc:	b1b0      	cbz	r0, 800472c <_svfiprintf_r+0x114>
 80046fe:	9207      	str	r2, [sp, #28]
 8004700:	e014      	b.n	800472c <_svfiprintf_r+0x114>
 8004702:	eba0 0308 	sub.w	r3, r0, r8
 8004706:	fa09 f303 	lsl.w	r3, r9, r3
 800470a:	4313      	orrs	r3, r2
 800470c:	46a2      	mov	sl, r4
 800470e:	9304      	str	r3, [sp, #16]
 8004710:	e7d2      	b.n	80046b8 <_svfiprintf_r+0xa0>
 8004712:	9b03      	ldr	r3, [sp, #12]
 8004714:	1d19      	adds	r1, r3, #4
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	9103      	str	r1, [sp, #12]
 800471a:	2b00      	cmp	r3, #0
 800471c:	bfbb      	ittet	lt
 800471e:	425b      	neglt	r3, r3
 8004720:	f042 0202 	orrlt.w	r2, r2, #2
 8004724:	9307      	strge	r3, [sp, #28]
 8004726:	9307      	strlt	r3, [sp, #28]
 8004728:	bfb8      	it	lt
 800472a:	9204      	strlt	r2, [sp, #16]
 800472c:	7823      	ldrb	r3, [r4, #0]
 800472e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004730:	d10a      	bne.n	8004748 <_svfiprintf_r+0x130>
 8004732:	7863      	ldrb	r3, [r4, #1]
 8004734:	2b2a      	cmp	r3, #42	@ 0x2a
 8004736:	d132      	bne.n	800479e <_svfiprintf_r+0x186>
 8004738:	9b03      	ldr	r3, [sp, #12]
 800473a:	3402      	adds	r4, #2
 800473c:	1d1a      	adds	r2, r3, #4
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	9203      	str	r2, [sp, #12]
 8004742:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004746:	9305      	str	r3, [sp, #20]
 8004748:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004800 <_svfiprintf_r+0x1e8>
 800474c:	2203      	movs	r2, #3
 800474e:	4650      	mov	r0, sl
 8004750:	7821      	ldrb	r1, [r4, #0]
 8004752:	f000 fad3 	bl	8004cfc <memchr>
 8004756:	b138      	cbz	r0, 8004768 <_svfiprintf_r+0x150>
 8004758:	2240      	movs	r2, #64	@ 0x40
 800475a:	9b04      	ldr	r3, [sp, #16]
 800475c:	eba0 000a 	sub.w	r0, r0, sl
 8004760:	4082      	lsls	r2, r0
 8004762:	4313      	orrs	r3, r2
 8004764:	3401      	adds	r4, #1
 8004766:	9304      	str	r3, [sp, #16]
 8004768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800476c:	2206      	movs	r2, #6
 800476e:	4825      	ldr	r0, [pc, #148]	@ (8004804 <_svfiprintf_r+0x1ec>)
 8004770:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004774:	f000 fac2 	bl	8004cfc <memchr>
 8004778:	2800      	cmp	r0, #0
 800477a:	d036      	beq.n	80047ea <_svfiprintf_r+0x1d2>
 800477c:	4b22      	ldr	r3, [pc, #136]	@ (8004808 <_svfiprintf_r+0x1f0>)
 800477e:	bb1b      	cbnz	r3, 80047c8 <_svfiprintf_r+0x1b0>
 8004780:	9b03      	ldr	r3, [sp, #12]
 8004782:	3307      	adds	r3, #7
 8004784:	f023 0307 	bic.w	r3, r3, #7
 8004788:	3308      	adds	r3, #8
 800478a:	9303      	str	r3, [sp, #12]
 800478c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800478e:	4433      	add	r3, r6
 8004790:	9309      	str	r3, [sp, #36]	@ 0x24
 8004792:	e76a      	b.n	800466a <_svfiprintf_r+0x52>
 8004794:	460c      	mov	r4, r1
 8004796:	2001      	movs	r0, #1
 8004798:	fb0c 3202 	mla	r2, ip, r2, r3
 800479c:	e7a8      	b.n	80046f0 <_svfiprintf_r+0xd8>
 800479e:	2300      	movs	r3, #0
 80047a0:	f04f 0c0a 	mov.w	ip, #10
 80047a4:	4619      	mov	r1, r3
 80047a6:	3401      	adds	r4, #1
 80047a8:	9305      	str	r3, [sp, #20]
 80047aa:	4620      	mov	r0, r4
 80047ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047b0:	3a30      	subs	r2, #48	@ 0x30
 80047b2:	2a09      	cmp	r2, #9
 80047b4:	d903      	bls.n	80047be <_svfiprintf_r+0x1a6>
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0c6      	beq.n	8004748 <_svfiprintf_r+0x130>
 80047ba:	9105      	str	r1, [sp, #20]
 80047bc:	e7c4      	b.n	8004748 <_svfiprintf_r+0x130>
 80047be:	4604      	mov	r4, r0
 80047c0:	2301      	movs	r3, #1
 80047c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80047c6:	e7f0      	b.n	80047aa <_svfiprintf_r+0x192>
 80047c8:	ab03      	add	r3, sp, #12
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	462a      	mov	r2, r5
 80047ce:	4638      	mov	r0, r7
 80047d0:	4b0e      	ldr	r3, [pc, #56]	@ (800480c <_svfiprintf_r+0x1f4>)
 80047d2:	a904      	add	r1, sp, #16
 80047d4:	f3af 8000 	nop.w
 80047d8:	1c42      	adds	r2, r0, #1
 80047da:	4606      	mov	r6, r0
 80047dc:	d1d6      	bne.n	800478c <_svfiprintf_r+0x174>
 80047de:	89ab      	ldrh	r3, [r5, #12]
 80047e0:	065b      	lsls	r3, r3, #25
 80047e2:	f53f af2d 	bmi.w	8004640 <_svfiprintf_r+0x28>
 80047e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80047e8:	e72c      	b.n	8004644 <_svfiprintf_r+0x2c>
 80047ea:	ab03      	add	r3, sp, #12
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	462a      	mov	r2, r5
 80047f0:	4638      	mov	r0, r7
 80047f2:	4b06      	ldr	r3, [pc, #24]	@ (800480c <_svfiprintf_r+0x1f4>)
 80047f4:	a904      	add	r1, sp, #16
 80047f6:	f000 f87d 	bl	80048f4 <_printf_i>
 80047fa:	e7ed      	b.n	80047d8 <_svfiprintf_r+0x1c0>
 80047fc:	0800568c 	.word	0x0800568c
 8004800:	08005692 	.word	0x08005692
 8004804:	08005696 	.word	0x08005696
 8004808:	00000000 	.word	0x00000000
 800480c:	08004561 	.word	0x08004561

08004810 <_printf_common>:
 8004810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004814:	4616      	mov	r6, r2
 8004816:	4698      	mov	r8, r3
 8004818:	688a      	ldr	r2, [r1, #8]
 800481a:	690b      	ldr	r3, [r1, #16]
 800481c:	4607      	mov	r7, r0
 800481e:	4293      	cmp	r3, r2
 8004820:	bfb8      	it	lt
 8004822:	4613      	movlt	r3, r2
 8004824:	6033      	str	r3, [r6, #0]
 8004826:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800482a:	460c      	mov	r4, r1
 800482c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004830:	b10a      	cbz	r2, 8004836 <_printf_common+0x26>
 8004832:	3301      	adds	r3, #1
 8004834:	6033      	str	r3, [r6, #0]
 8004836:	6823      	ldr	r3, [r4, #0]
 8004838:	0699      	lsls	r1, r3, #26
 800483a:	bf42      	ittt	mi
 800483c:	6833      	ldrmi	r3, [r6, #0]
 800483e:	3302      	addmi	r3, #2
 8004840:	6033      	strmi	r3, [r6, #0]
 8004842:	6825      	ldr	r5, [r4, #0]
 8004844:	f015 0506 	ands.w	r5, r5, #6
 8004848:	d106      	bne.n	8004858 <_printf_common+0x48>
 800484a:	f104 0a19 	add.w	sl, r4, #25
 800484e:	68e3      	ldr	r3, [r4, #12]
 8004850:	6832      	ldr	r2, [r6, #0]
 8004852:	1a9b      	subs	r3, r3, r2
 8004854:	42ab      	cmp	r3, r5
 8004856:	dc2b      	bgt.n	80048b0 <_printf_common+0xa0>
 8004858:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800485c:	6822      	ldr	r2, [r4, #0]
 800485e:	3b00      	subs	r3, #0
 8004860:	bf18      	it	ne
 8004862:	2301      	movne	r3, #1
 8004864:	0692      	lsls	r2, r2, #26
 8004866:	d430      	bmi.n	80048ca <_printf_common+0xba>
 8004868:	4641      	mov	r1, r8
 800486a:	4638      	mov	r0, r7
 800486c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004870:	47c8      	blx	r9
 8004872:	3001      	adds	r0, #1
 8004874:	d023      	beq.n	80048be <_printf_common+0xae>
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	6922      	ldr	r2, [r4, #16]
 800487a:	f003 0306 	and.w	r3, r3, #6
 800487e:	2b04      	cmp	r3, #4
 8004880:	bf14      	ite	ne
 8004882:	2500      	movne	r5, #0
 8004884:	6833      	ldreq	r3, [r6, #0]
 8004886:	f04f 0600 	mov.w	r6, #0
 800488a:	bf08      	it	eq
 800488c:	68e5      	ldreq	r5, [r4, #12]
 800488e:	f104 041a 	add.w	r4, r4, #26
 8004892:	bf08      	it	eq
 8004894:	1aed      	subeq	r5, r5, r3
 8004896:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800489a:	bf08      	it	eq
 800489c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048a0:	4293      	cmp	r3, r2
 80048a2:	bfc4      	itt	gt
 80048a4:	1a9b      	subgt	r3, r3, r2
 80048a6:	18ed      	addgt	r5, r5, r3
 80048a8:	42b5      	cmp	r5, r6
 80048aa:	d11a      	bne.n	80048e2 <_printf_common+0xd2>
 80048ac:	2000      	movs	r0, #0
 80048ae:	e008      	b.n	80048c2 <_printf_common+0xb2>
 80048b0:	2301      	movs	r3, #1
 80048b2:	4652      	mov	r2, sl
 80048b4:	4641      	mov	r1, r8
 80048b6:	4638      	mov	r0, r7
 80048b8:	47c8      	blx	r9
 80048ba:	3001      	adds	r0, #1
 80048bc:	d103      	bne.n	80048c6 <_printf_common+0xb6>
 80048be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80048c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048c6:	3501      	adds	r5, #1
 80048c8:	e7c1      	b.n	800484e <_printf_common+0x3e>
 80048ca:	2030      	movs	r0, #48	@ 0x30
 80048cc:	18e1      	adds	r1, r4, r3
 80048ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80048d2:	1c5a      	adds	r2, r3, #1
 80048d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80048d8:	4422      	add	r2, r4
 80048da:	3302      	adds	r3, #2
 80048dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80048e0:	e7c2      	b.n	8004868 <_printf_common+0x58>
 80048e2:	2301      	movs	r3, #1
 80048e4:	4622      	mov	r2, r4
 80048e6:	4641      	mov	r1, r8
 80048e8:	4638      	mov	r0, r7
 80048ea:	47c8      	blx	r9
 80048ec:	3001      	adds	r0, #1
 80048ee:	d0e6      	beq.n	80048be <_printf_common+0xae>
 80048f0:	3601      	adds	r6, #1
 80048f2:	e7d9      	b.n	80048a8 <_printf_common+0x98>

080048f4 <_printf_i>:
 80048f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048f8:	7e0f      	ldrb	r7, [r1, #24]
 80048fa:	4691      	mov	r9, r2
 80048fc:	2f78      	cmp	r7, #120	@ 0x78
 80048fe:	4680      	mov	r8, r0
 8004900:	460c      	mov	r4, r1
 8004902:	469a      	mov	sl, r3
 8004904:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004906:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800490a:	d807      	bhi.n	800491c <_printf_i+0x28>
 800490c:	2f62      	cmp	r7, #98	@ 0x62
 800490e:	d80a      	bhi.n	8004926 <_printf_i+0x32>
 8004910:	2f00      	cmp	r7, #0
 8004912:	f000 80d3 	beq.w	8004abc <_printf_i+0x1c8>
 8004916:	2f58      	cmp	r7, #88	@ 0x58
 8004918:	f000 80ba 	beq.w	8004a90 <_printf_i+0x19c>
 800491c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004920:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004924:	e03a      	b.n	800499c <_printf_i+0xa8>
 8004926:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800492a:	2b15      	cmp	r3, #21
 800492c:	d8f6      	bhi.n	800491c <_printf_i+0x28>
 800492e:	a101      	add	r1, pc, #4	@ (adr r1, 8004934 <_printf_i+0x40>)
 8004930:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004934:	0800498d 	.word	0x0800498d
 8004938:	080049a1 	.word	0x080049a1
 800493c:	0800491d 	.word	0x0800491d
 8004940:	0800491d 	.word	0x0800491d
 8004944:	0800491d 	.word	0x0800491d
 8004948:	0800491d 	.word	0x0800491d
 800494c:	080049a1 	.word	0x080049a1
 8004950:	0800491d 	.word	0x0800491d
 8004954:	0800491d 	.word	0x0800491d
 8004958:	0800491d 	.word	0x0800491d
 800495c:	0800491d 	.word	0x0800491d
 8004960:	08004aa3 	.word	0x08004aa3
 8004964:	080049cb 	.word	0x080049cb
 8004968:	08004a5d 	.word	0x08004a5d
 800496c:	0800491d 	.word	0x0800491d
 8004970:	0800491d 	.word	0x0800491d
 8004974:	08004ac5 	.word	0x08004ac5
 8004978:	0800491d 	.word	0x0800491d
 800497c:	080049cb 	.word	0x080049cb
 8004980:	0800491d 	.word	0x0800491d
 8004984:	0800491d 	.word	0x0800491d
 8004988:	08004a65 	.word	0x08004a65
 800498c:	6833      	ldr	r3, [r6, #0]
 800498e:	1d1a      	adds	r2, r3, #4
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6032      	str	r2, [r6, #0]
 8004994:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004998:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800499c:	2301      	movs	r3, #1
 800499e:	e09e      	b.n	8004ade <_printf_i+0x1ea>
 80049a0:	6833      	ldr	r3, [r6, #0]
 80049a2:	6820      	ldr	r0, [r4, #0]
 80049a4:	1d19      	adds	r1, r3, #4
 80049a6:	6031      	str	r1, [r6, #0]
 80049a8:	0606      	lsls	r6, r0, #24
 80049aa:	d501      	bpl.n	80049b0 <_printf_i+0xbc>
 80049ac:	681d      	ldr	r5, [r3, #0]
 80049ae:	e003      	b.n	80049b8 <_printf_i+0xc4>
 80049b0:	0645      	lsls	r5, r0, #25
 80049b2:	d5fb      	bpl.n	80049ac <_printf_i+0xb8>
 80049b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80049b8:	2d00      	cmp	r5, #0
 80049ba:	da03      	bge.n	80049c4 <_printf_i+0xd0>
 80049bc:	232d      	movs	r3, #45	@ 0x2d
 80049be:	426d      	negs	r5, r5
 80049c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049c4:	230a      	movs	r3, #10
 80049c6:	4859      	ldr	r0, [pc, #356]	@ (8004b2c <_printf_i+0x238>)
 80049c8:	e011      	b.n	80049ee <_printf_i+0xfa>
 80049ca:	6821      	ldr	r1, [r4, #0]
 80049cc:	6833      	ldr	r3, [r6, #0]
 80049ce:	0608      	lsls	r0, r1, #24
 80049d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80049d4:	d402      	bmi.n	80049dc <_printf_i+0xe8>
 80049d6:	0649      	lsls	r1, r1, #25
 80049d8:	bf48      	it	mi
 80049da:	b2ad      	uxthmi	r5, r5
 80049dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80049de:	6033      	str	r3, [r6, #0]
 80049e0:	bf14      	ite	ne
 80049e2:	230a      	movne	r3, #10
 80049e4:	2308      	moveq	r3, #8
 80049e6:	4851      	ldr	r0, [pc, #324]	@ (8004b2c <_printf_i+0x238>)
 80049e8:	2100      	movs	r1, #0
 80049ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80049ee:	6866      	ldr	r6, [r4, #4]
 80049f0:	2e00      	cmp	r6, #0
 80049f2:	bfa8      	it	ge
 80049f4:	6821      	ldrge	r1, [r4, #0]
 80049f6:	60a6      	str	r6, [r4, #8]
 80049f8:	bfa4      	itt	ge
 80049fa:	f021 0104 	bicge.w	r1, r1, #4
 80049fe:	6021      	strge	r1, [r4, #0]
 8004a00:	b90d      	cbnz	r5, 8004a06 <_printf_i+0x112>
 8004a02:	2e00      	cmp	r6, #0
 8004a04:	d04b      	beq.n	8004a9e <_printf_i+0x1aa>
 8004a06:	4616      	mov	r6, r2
 8004a08:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a0c:	fb03 5711 	mls	r7, r3, r1, r5
 8004a10:	5dc7      	ldrb	r7, [r0, r7]
 8004a12:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a16:	462f      	mov	r7, r5
 8004a18:	42bb      	cmp	r3, r7
 8004a1a:	460d      	mov	r5, r1
 8004a1c:	d9f4      	bls.n	8004a08 <_printf_i+0x114>
 8004a1e:	2b08      	cmp	r3, #8
 8004a20:	d10b      	bne.n	8004a3a <_printf_i+0x146>
 8004a22:	6823      	ldr	r3, [r4, #0]
 8004a24:	07df      	lsls	r7, r3, #31
 8004a26:	d508      	bpl.n	8004a3a <_printf_i+0x146>
 8004a28:	6923      	ldr	r3, [r4, #16]
 8004a2a:	6861      	ldr	r1, [r4, #4]
 8004a2c:	4299      	cmp	r1, r3
 8004a2e:	bfde      	ittt	le
 8004a30:	2330      	movle	r3, #48	@ 0x30
 8004a32:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a36:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004a3a:	1b92      	subs	r2, r2, r6
 8004a3c:	6122      	str	r2, [r4, #16]
 8004a3e:	464b      	mov	r3, r9
 8004a40:	4621      	mov	r1, r4
 8004a42:	4640      	mov	r0, r8
 8004a44:	f8cd a000 	str.w	sl, [sp]
 8004a48:	aa03      	add	r2, sp, #12
 8004a4a:	f7ff fee1 	bl	8004810 <_printf_common>
 8004a4e:	3001      	adds	r0, #1
 8004a50:	d14a      	bne.n	8004ae8 <_printf_i+0x1f4>
 8004a52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a56:	b004      	add	sp, #16
 8004a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	f043 0320 	orr.w	r3, r3, #32
 8004a62:	6023      	str	r3, [r4, #0]
 8004a64:	2778      	movs	r7, #120	@ 0x78
 8004a66:	4832      	ldr	r0, [pc, #200]	@ (8004b30 <_printf_i+0x23c>)
 8004a68:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004a6c:	6823      	ldr	r3, [r4, #0]
 8004a6e:	6831      	ldr	r1, [r6, #0]
 8004a70:	061f      	lsls	r7, r3, #24
 8004a72:	f851 5b04 	ldr.w	r5, [r1], #4
 8004a76:	d402      	bmi.n	8004a7e <_printf_i+0x18a>
 8004a78:	065f      	lsls	r7, r3, #25
 8004a7a:	bf48      	it	mi
 8004a7c:	b2ad      	uxthmi	r5, r5
 8004a7e:	6031      	str	r1, [r6, #0]
 8004a80:	07d9      	lsls	r1, r3, #31
 8004a82:	bf44      	itt	mi
 8004a84:	f043 0320 	orrmi.w	r3, r3, #32
 8004a88:	6023      	strmi	r3, [r4, #0]
 8004a8a:	b11d      	cbz	r5, 8004a94 <_printf_i+0x1a0>
 8004a8c:	2310      	movs	r3, #16
 8004a8e:	e7ab      	b.n	80049e8 <_printf_i+0xf4>
 8004a90:	4826      	ldr	r0, [pc, #152]	@ (8004b2c <_printf_i+0x238>)
 8004a92:	e7e9      	b.n	8004a68 <_printf_i+0x174>
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	f023 0320 	bic.w	r3, r3, #32
 8004a9a:	6023      	str	r3, [r4, #0]
 8004a9c:	e7f6      	b.n	8004a8c <_printf_i+0x198>
 8004a9e:	4616      	mov	r6, r2
 8004aa0:	e7bd      	b.n	8004a1e <_printf_i+0x12a>
 8004aa2:	6833      	ldr	r3, [r6, #0]
 8004aa4:	6825      	ldr	r5, [r4, #0]
 8004aa6:	1d18      	adds	r0, r3, #4
 8004aa8:	6961      	ldr	r1, [r4, #20]
 8004aaa:	6030      	str	r0, [r6, #0]
 8004aac:	062e      	lsls	r6, r5, #24
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	d501      	bpl.n	8004ab6 <_printf_i+0x1c2>
 8004ab2:	6019      	str	r1, [r3, #0]
 8004ab4:	e002      	b.n	8004abc <_printf_i+0x1c8>
 8004ab6:	0668      	lsls	r0, r5, #25
 8004ab8:	d5fb      	bpl.n	8004ab2 <_printf_i+0x1be>
 8004aba:	8019      	strh	r1, [r3, #0]
 8004abc:	2300      	movs	r3, #0
 8004abe:	4616      	mov	r6, r2
 8004ac0:	6123      	str	r3, [r4, #16]
 8004ac2:	e7bc      	b.n	8004a3e <_printf_i+0x14a>
 8004ac4:	6833      	ldr	r3, [r6, #0]
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	1d1a      	adds	r2, r3, #4
 8004aca:	6032      	str	r2, [r6, #0]
 8004acc:	681e      	ldr	r6, [r3, #0]
 8004ace:	6862      	ldr	r2, [r4, #4]
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	f000 f913 	bl	8004cfc <memchr>
 8004ad6:	b108      	cbz	r0, 8004adc <_printf_i+0x1e8>
 8004ad8:	1b80      	subs	r0, r0, r6
 8004ada:	6060      	str	r0, [r4, #4]
 8004adc:	6863      	ldr	r3, [r4, #4]
 8004ade:	6123      	str	r3, [r4, #16]
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ae6:	e7aa      	b.n	8004a3e <_printf_i+0x14a>
 8004ae8:	4632      	mov	r2, r6
 8004aea:	4649      	mov	r1, r9
 8004aec:	4640      	mov	r0, r8
 8004aee:	6923      	ldr	r3, [r4, #16]
 8004af0:	47d0      	blx	sl
 8004af2:	3001      	adds	r0, #1
 8004af4:	d0ad      	beq.n	8004a52 <_printf_i+0x15e>
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	079b      	lsls	r3, r3, #30
 8004afa:	d413      	bmi.n	8004b24 <_printf_i+0x230>
 8004afc:	68e0      	ldr	r0, [r4, #12]
 8004afe:	9b03      	ldr	r3, [sp, #12]
 8004b00:	4298      	cmp	r0, r3
 8004b02:	bfb8      	it	lt
 8004b04:	4618      	movlt	r0, r3
 8004b06:	e7a6      	b.n	8004a56 <_printf_i+0x162>
 8004b08:	2301      	movs	r3, #1
 8004b0a:	4632      	mov	r2, r6
 8004b0c:	4649      	mov	r1, r9
 8004b0e:	4640      	mov	r0, r8
 8004b10:	47d0      	blx	sl
 8004b12:	3001      	adds	r0, #1
 8004b14:	d09d      	beq.n	8004a52 <_printf_i+0x15e>
 8004b16:	3501      	adds	r5, #1
 8004b18:	68e3      	ldr	r3, [r4, #12]
 8004b1a:	9903      	ldr	r1, [sp, #12]
 8004b1c:	1a5b      	subs	r3, r3, r1
 8004b1e:	42ab      	cmp	r3, r5
 8004b20:	dcf2      	bgt.n	8004b08 <_printf_i+0x214>
 8004b22:	e7eb      	b.n	8004afc <_printf_i+0x208>
 8004b24:	2500      	movs	r5, #0
 8004b26:	f104 0619 	add.w	r6, r4, #25
 8004b2a:	e7f5      	b.n	8004b18 <_printf_i+0x224>
 8004b2c:	0800569d 	.word	0x0800569d
 8004b30:	080056ae 	.word	0x080056ae

08004b34 <__sflush_r>:
 8004b34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b3a:	0716      	lsls	r6, r2, #28
 8004b3c:	4605      	mov	r5, r0
 8004b3e:	460c      	mov	r4, r1
 8004b40:	d454      	bmi.n	8004bec <__sflush_r+0xb8>
 8004b42:	684b      	ldr	r3, [r1, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	dc02      	bgt.n	8004b4e <__sflush_r+0x1a>
 8004b48:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	dd48      	ble.n	8004be0 <__sflush_r+0xac>
 8004b4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004b50:	2e00      	cmp	r6, #0
 8004b52:	d045      	beq.n	8004be0 <__sflush_r+0xac>
 8004b54:	2300      	movs	r3, #0
 8004b56:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004b5a:	682f      	ldr	r7, [r5, #0]
 8004b5c:	6a21      	ldr	r1, [r4, #32]
 8004b5e:	602b      	str	r3, [r5, #0]
 8004b60:	d030      	beq.n	8004bc4 <__sflush_r+0x90>
 8004b62:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004b64:	89a3      	ldrh	r3, [r4, #12]
 8004b66:	0759      	lsls	r1, r3, #29
 8004b68:	d505      	bpl.n	8004b76 <__sflush_r+0x42>
 8004b6a:	6863      	ldr	r3, [r4, #4]
 8004b6c:	1ad2      	subs	r2, r2, r3
 8004b6e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004b70:	b10b      	cbz	r3, 8004b76 <__sflush_r+0x42>
 8004b72:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004b74:	1ad2      	subs	r2, r2, r3
 8004b76:	2300      	movs	r3, #0
 8004b78:	4628      	mov	r0, r5
 8004b7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004b7c:	6a21      	ldr	r1, [r4, #32]
 8004b7e:	47b0      	blx	r6
 8004b80:	1c43      	adds	r3, r0, #1
 8004b82:	89a3      	ldrh	r3, [r4, #12]
 8004b84:	d106      	bne.n	8004b94 <__sflush_r+0x60>
 8004b86:	6829      	ldr	r1, [r5, #0]
 8004b88:	291d      	cmp	r1, #29
 8004b8a:	d82b      	bhi.n	8004be4 <__sflush_r+0xb0>
 8004b8c:	4a28      	ldr	r2, [pc, #160]	@ (8004c30 <__sflush_r+0xfc>)
 8004b8e:	410a      	asrs	r2, r1
 8004b90:	07d6      	lsls	r6, r2, #31
 8004b92:	d427      	bmi.n	8004be4 <__sflush_r+0xb0>
 8004b94:	2200      	movs	r2, #0
 8004b96:	6062      	str	r2, [r4, #4]
 8004b98:	6922      	ldr	r2, [r4, #16]
 8004b9a:	04d9      	lsls	r1, r3, #19
 8004b9c:	6022      	str	r2, [r4, #0]
 8004b9e:	d504      	bpl.n	8004baa <__sflush_r+0x76>
 8004ba0:	1c42      	adds	r2, r0, #1
 8004ba2:	d101      	bne.n	8004ba8 <__sflush_r+0x74>
 8004ba4:	682b      	ldr	r3, [r5, #0]
 8004ba6:	b903      	cbnz	r3, 8004baa <__sflush_r+0x76>
 8004ba8:	6560      	str	r0, [r4, #84]	@ 0x54
 8004baa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004bac:	602f      	str	r7, [r5, #0]
 8004bae:	b1b9      	cbz	r1, 8004be0 <__sflush_r+0xac>
 8004bb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004bb4:	4299      	cmp	r1, r3
 8004bb6:	d002      	beq.n	8004bbe <__sflush_r+0x8a>
 8004bb8:	4628      	mov	r0, r5
 8004bba:	f7ff fbd3 	bl	8004364 <_free_r>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	6363      	str	r3, [r4, #52]	@ 0x34
 8004bc2:	e00d      	b.n	8004be0 <__sflush_r+0xac>
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	47b0      	blx	r6
 8004bca:	4602      	mov	r2, r0
 8004bcc:	1c50      	adds	r0, r2, #1
 8004bce:	d1c9      	bne.n	8004b64 <__sflush_r+0x30>
 8004bd0:	682b      	ldr	r3, [r5, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0c6      	beq.n	8004b64 <__sflush_r+0x30>
 8004bd6:	2b1d      	cmp	r3, #29
 8004bd8:	d001      	beq.n	8004bde <__sflush_r+0xaa>
 8004bda:	2b16      	cmp	r3, #22
 8004bdc:	d11d      	bne.n	8004c1a <__sflush_r+0xe6>
 8004bde:	602f      	str	r7, [r5, #0]
 8004be0:	2000      	movs	r0, #0
 8004be2:	e021      	b.n	8004c28 <__sflush_r+0xf4>
 8004be4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004be8:	b21b      	sxth	r3, r3
 8004bea:	e01a      	b.n	8004c22 <__sflush_r+0xee>
 8004bec:	690f      	ldr	r7, [r1, #16]
 8004bee:	2f00      	cmp	r7, #0
 8004bf0:	d0f6      	beq.n	8004be0 <__sflush_r+0xac>
 8004bf2:	0793      	lsls	r3, r2, #30
 8004bf4:	bf18      	it	ne
 8004bf6:	2300      	movne	r3, #0
 8004bf8:	680e      	ldr	r6, [r1, #0]
 8004bfa:	bf08      	it	eq
 8004bfc:	694b      	ldreq	r3, [r1, #20]
 8004bfe:	1bf6      	subs	r6, r6, r7
 8004c00:	600f      	str	r7, [r1, #0]
 8004c02:	608b      	str	r3, [r1, #8]
 8004c04:	2e00      	cmp	r6, #0
 8004c06:	ddeb      	ble.n	8004be0 <__sflush_r+0xac>
 8004c08:	4633      	mov	r3, r6
 8004c0a:	463a      	mov	r2, r7
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	6a21      	ldr	r1, [r4, #32]
 8004c10:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004c14:	47e0      	blx	ip
 8004c16:	2800      	cmp	r0, #0
 8004c18:	dc07      	bgt.n	8004c2a <__sflush_r+0xf6>
 8004c1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c26:	81a3      	strh	r3, [r4, #12]
 8004c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c2a:	4407      	add	r7, r0
 8004c2c:	1a36      	subs	r6, r6, r0
 8004c2e:	e7e9      	b.n	8004c04 <__sflush_r+0xd0>
 8004c30:	dfbffffe 	.word	0xdfbffffe

08004c34 <_fflush_r>:
 8004c34:	b538      	push	{r3, r4, r5, lr}
 8004c36:	690b      	ldr	r3, [r1, #16]
 8004c38:	4605      	mov	r5, r0
 8004c3a:	460c      	mov	r4, r1
 8004c3c:	b913      	cbnz	r3, 8004c44 <_fflush_r+0x10>
 8004c3e:	2500      	movs	r5, #0
 8004c40:	4628      	mov	r0, r5
 8004c42:	bd38      	pop	{r3, r4, r5, pc}
 8004c44:	b118      	cbz	r0, 8004c4e <_fflush_r+0x1a>
 8004c46:	6a03      	ldr	r3, [r0, #32]
 8004c48:	b90b      	cbnz	r3, 8004c4e <_fflush_r+0x1a>
 8004c4a:	f7ff f9c7 	bl	8003fdc <__sinit>
 8004c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0f3      	beq.n	8004c3e <_fflush_r+0xa>
 8004c56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004c58:	07d0      	lsls	r0, r2, #31
 8004c5a:	d404      	bmi.n	8004c66 <_fflush_r+0x32>
 8004c5c:	0599      	lsls	r1, r3, #22
 8004c5e:	d402      	bmi.n	8004c66 <_fflush_r+0x32>
 8004c60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c62:	f7ff fb5e 	bl	8004322 <__retarget_lock_acquire_recursive>
 8004c66:	4628      	mov	r0, r5
 8004c68:	4621      	mov	r1, r4
 8004c6a:	f7ff ff63 	bl	8004b34 <__sflush_r>
 8004c6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c70:	4605      	mov	r5, r0
 8004c72:	07da      	lsls	r2, r3, #31
 8004c74:	d4e4      	bmi.n	8004c40 <_fflush_r+0xc>
 8004c76:	89a3      	ldrh	r3, [r4, #12]
 8004c78:	059b      	lsls	r3, r3, #22
 8004c7a:	d4e1      	bmi.n	8004c40 <_fflush_r+0xc>
 8004c7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c7e:	f7ff fb51 	bl	8004324 <__retarget_lock_release_recursive>
 8004c82:	e7dd      	b.n	8004c40 <_fflush_r+0xc>

08004c84 <fiprintf>:
 8004c84:	b40e      	push	{r1, r2, r3}
 8004c86:	b503      	push	{r0, r1, lr}
 8004c88:	4601      	mov	r1, r0
 8004c8a:	ab03      	add	r3, sp, #12
 8004c8c:	4805      	ldr	r0, [pc, #20]	@ (8004ca4 <fiprintf+0x20>)
 8004c8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c92:	6800      	ldr	r0, [r0, #0]
 8004c94:	9301      	str	r3, [sp, #4]
 8004c96:	f000 f8a9 	bl	8004dec <_vfiprintf_r>
 8004c9a:	b002      	add	sp, #8
 8004c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ca0:	b003      	add	sp, #12
 8004ca2:	4770      	bx	lr
 8004ca4:	2000016c 	.word	0x2000016c

08004ca8 <memmove>:
 8004ca8:	4288      	cmp	r0, r1
 8004caa:	b510      	push	{r4, lr}
 8004cac:	eb01 0402 	add.w	r4, r1, r2
 8004cb0:	d902      	bls.n	8004cb8 <memmove+0x10>
 8004cb2:	4284      	cmp	r4, r0
 8004cb4:	4623      	mov	r3, r4
 8004cb6:	d807      	bhi.n	8004cc8 <memmove+0x20>
 8004cb8:	1e43      	subs	r3, r0, #1
 8004cba:	42a1      	cmp	r1, r4
 8004cbc:	d008      	beq.n	8004cd0 <memmove+0x28>
 8004cbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cc6:	e7f8      	b.n	8004cba <memmove+0x12>
 8004cc8:	4601      	mov	r1, r0
 8004cca:	4402      	add	r2, r0
 8004ccc:	428a      	cmp	r2, r1
 8004cce:	d100      	bne.n	8004cd2 <memmove+0x2a>
 8004cd0:	bd10      	pop	{r4, pc}
 8004cd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cda:	e7f7      	b.n	8004ccc <memmove+0x24>

08004cdc <_sbrk_r>:
 8004cdc:	b538      	push	{r3, r4, r5, lr}
 8004cde:	2300      	movs	r3, #0
 8004ce0:	4d05      	ldr	r5, [pc, #20]	@ (8004cf8 <_sbrk_r+0x1c>)
 8004ce2:	4604      	mov	r4, r0
 8004ce4:	4608      	mov	r0, r1
 8004ce6:	602b      	str	r3, [r5, #0]
 8004ce8:	f7fb fdcc 	bl	8000884 <_sbrk>
 8004cec:	1c43      	adds	r3, r0, #1
 8004cee:	d102      	bne.n	8004cf6 <_sbrk_r+0x1a>
 8004cf0:	682b      	ldr	r3, [r5, #0]
 8004cf2:	b103      	cbz	r3, 8004cf6 <_sbrk_r+0x1a>
 8004cf4:	6023      	str	r3, [r4, #0]
 8004cf6:	bd38      	pop	{r3, r4, r5, pc}
 8004cf8:	20000634 	.word	0x20000634

08004cfc <memchr>:
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	b510      	push	{r4, lr}
 8004d00:	b2c9      	uxtb	r1, r1
 8004d02:	4402      	add	r2, r0
 8004d04:	4293      	cmp	r3, r2
 8004d06:	4618      	mov	r0, r3
 8004d08:	d101      	bne.n	8004d0e <memchr+0x12>
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	e003      	b.n	8004d16 <memchr+0x1a>
 8004d0e:	7804      	ldrb	r4, [r0, #0]
 8004d10:	3301      	adds	r3, #1
 8004d12:	428c      	cmp	r4, r1
 8004d14:	d1f6      	bne.n	8004d04 <memchr+0x8>
 8004d16:	bd10      	pop	{r4, pc}

08004d18 <memcpy>:
 8004d18:	440a      	add	r2, r1
 8004d1a:	4291      	cmp	r1, r2
 8004d1c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004d20:	d100      	bne.n	8004d24 <memcpy+0xc>
 8004d22:	4770      	bx	lr
 8004d24:	b510      	push	{r4, lr}
 8004d26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d2a:	4291      	cmp	r1, r2
 8004d2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d30:	d1f9      	bne.n	8004d26 <memcpy+0xe>
 8004d32:	bd10      	pop	{r4, pc}

08004d34 <abort>:
 8004d34:	2006      	movs	r0, #6
 8004d36:	b508      	push	{r3, lr}
 8004d38:	f000 fa2c 	bl	8005194 <raise>
 8004d3c:	2001      	movs	r0, #1
 8004d3e:	f7fb fd2c 	bl	800079a <_exit>

08004d42 <_realloc_r>:
 8004d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d46:	4680      	mov	r8, r0
 8004d48:	4615      	mov	r5, r2
 8004d4a:	460c      	mov	r4, r1
 8004d4c:	b921      	cbnz	r1, 8004d58 <_realloc_r+0x16>
 8004d4e:	4611      	mov	r1, r2
 8004d50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d54:	f7ff bb78 	b.w	8004448 <_malloc_r>
 8004d58:	b92a      	cbnz	r2, 8004d66 <_realloc_r+0x24>
 8004d5a:	f7ff fb03 	bl	8004364 <_free_r>
 8004d5e:	2400      	movs	r4, #0
 8004d60:	4620      	mov	r0, r4
 8004d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d66:	f000 fa31 	bl	80051cc <_malloc_usable_size_r>
 8004d6a:	4285      	cmp	r5, r0
 8004d6c:	4606      	mov	r6, r0
 8004d6e:	d802      	bhi.n	8004d76 <_realloc_r+0x34>
 8004d70:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004d74:	d8f4      	bhi.n	8004d60 <_realloc_r+0x1e>
 8004d76:	4629      	mov	r1, r5
 8004d78:	4640      	mov	r0, r8
 8004d7a:	f7ff fb65 	bl	8004448 <_malloc_r>
 8004d7e:	4607      	mov	r7, r0
 8004d80:	2800      	cmp	r0, #0
 8004d82:	d0ec      	beq.n	8004d5e <_realloc_r+0x1c>
 8004d84:	42b5      	cmp	r5, r6
 8004d86:	462a      	mov	r2, r5
 8004d88:	4621      	mov	r1, r4
 8004d8a:	bf28      	it	cs
 8004d8c:	4632      	movcs	r2, r6
 8004d8e:	f7ff ffc3 	bl	8004d18 <memcpy>
 8004d92:	4621      	mov	r1, r4
 8004d94:	4640      	mov	r0, r8
 8004d96:	f7ff fae5 	bl	8004364 <_free_r>
 8004d9a:	463c      	mov	r4, r7
 8004d9c:	e7e0      	b.n	8004d60 <_realloc_r+0x1e>

08004d9e <__sfputc_r>:
 8004d9e:	6893      	ldr	r3, [r2, #8]
 8004da0:	b410      	push	{r4}
 8004da2:	3b01      	subs	r3, #1
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	6093      	str	r3, [r2, #8]
 8004da8:	da07      	bge.n	8004dba <__sfputc_r+0x1c>
 8004daa:	6994      	ldr	r4, [r2, #24]
 8004dac:	42a3      	cmp	r3, r4
 8004dae:	db01      	blt.n	8004db4 <__sfputc_r+0x16>
 8004db0:	290a      	cmp	r1, #10
 8004db2:	d102      	bne.n	8004dba <__sfputc_r+0x1c>
 8004db4:	bc10      	pop	{r4}
 8004db6:	f000 b931 	b.w	800501c <__swbuf_r>
 8004dba:	6813      	ldr	r3, [r2, #0]
 8004dbc:	1c58      	adds	r0, r3, #1
 8004dbe:	6010      	str	r0, [r2, #0]
 8004dc0:	7019      	strb	r1, [r3, #0]
 8004dc2:	4608      	mov	r0, r1
 8004dc4:	bc10      	pop	{r4}
 8004dc6:	4770      	bx	lr

08004dc8 <__sfputs_r>:
 8004dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dca:	4606      	mov	r6, r0
 8004dcc:	460f      	mov	r7, r1
 8004dce:	4614      	mov	r4, r2
 8004dd0:	18d5      	adds	r5, r2, r3
 8004dd2:	42ac      	cmp	r4, r5
 8004dd4:	d101      	bne.n	8004dda <__sfputs_r+0x12>
 8004dd6:	2000      	movs	r0, #0
 8004dd8:	e007      	b.n	8004dea <__sfputs_r+0x22>
 8004dda:	463a      	mov	r2, r7
 8004ddc:	4630      	mov	r0, r6
 8004dde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004de2:	f7ff ffdc 	bl	8004d9e <__sfputc_r>
 8004de6:	1c43      	adds	r3, r0, #1
 8004de8:	d1f3      	bne.n	8004dd2 <__sfputs_r+0xa>
 8004dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004dec <_vfiprintf_r>:
 8004dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df0:	460d      	mov	r5, r1
 8004df2:	4614      	mov	r4, r2
 8004df4:	4698      	mov	r8, r3
 8004df6:	4606      	mov	r6, r0
 8004df8:	b09d      	sub	sp, #116	@ 0x74
 8004dfa:	b118      	cbz	r0, 8004e04 <_vfiprintf_r+0x18>
 8004dfc:	6a03      	ldr	r3, [r0, #32]
 8004dfe:	b90b      	cbnz	r3, 8004e04 <_vfiprintf_r+0x18>
 8004e00:	f7ff f8ec 	bl	8003fdc <__sinit>
 8004e04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e06:	07d9      	lsls	r1, r3, #31
 8004e08:	d405      	bmi.n	8004e16 <_vfiprintf_r+0x2a>
 8004e0a:	89ab      	ldrh	r3, [r5, #12]
 8004e0c:	059a      	lsls	r2, r3, #22
 8004e0e:	d402      	bmi.n	8004e16 <_vfiprintf_r+0x2a>
 8004e10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e12:	f7ff fa86 	bl	8004322 <__retarget_lock_acquire_recursive>
 8004e16:	89ab      	ldrh	r3, [r5, #12]
 8004e18:	071b      	lsls	r3, r3, #28
 8004e1a:	d501      	bpl.n	8004e20 <_vfiprintf_r+0x34>
 8004e1c:	692b      	ldr	r3, [r5, #16]
 8004e1e:	b99b      	cbnz	r3, 8004e48 <_vfiprintf_r+0x5c>
 8004e20:	4629      	mov	r1, r5
 8004e22:	4630      	mov	r0, r6
 8004e24:	f000 f938 	bl	8005098 <__swsetup_r>
 8004e28:	b170      	cbz	r0, 8004e48 <_vfiprintf_r+0x5c>
 8004e2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e2c:	07dc      	lsls	r4, r3, #31
 8004e2e:	d504      	bpl.n	8004e3a <_vfiprintf_r+0x4e>
 8004e30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e34:	b01d      	add	sp, #116	@ 0x74
 8004e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e3a:	89ab      	ldrh	r3, [r5, #12]
 8004e3c:	0598      	lsls	r0, r3, #22
 8004e3e:	d4f7      	bmi.n	8004e30 <_vfiprintf_r+0x44>
 8004e40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e42:	f7ff fa6f 	bl	8004324 <__retarget_lock_release_recursive>
 8004e46:	e7f3      	b.n	8004e30 <_vfiprintf_r+0x44>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e4c:	2320      	movs	r3, #32
 8004e4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e52:	2330      	movs	r3, #48	@ 0x30
 8004e54:	f04f 0901 	mov.w	r9, #1
 8004e58:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e5c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005008 <_vfiprintf_r+0x21c>
 8004e60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e64:	4623      	mov	r3, r4
 8004e66:	469a      	mov	sl, r3
 8004e68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e6c:	b10a      	cbz	r2, 8004e72 <_vfiprintf_r+0x86>
 8004e6e:	2a25      	cmp	r2, #37	@ 0x25
 8004e70:	d1f9      	bne.n	8004e66 <_vfiprintf_r+0x7a>
 8004e72:	ebba 0b04 	subs.w	fp, sl, r4
 8004e76:	d00b      	beq.n	8004e90 <_vfiprintf_r+0xa4>
 8004e78:	465b      	mov	r3, fp
 8004e7a:	4622      	mov	r2, r4
 8004e7c:	4629      	mov	r1, r5
 8004e7e:	4630      	mov	r0, r6
 8004e80:	f7ff ffa2 	bl	8004dc8 <__sfputs_r>
 8004e84:	3001      	adds	r0, #1
 8004e86:	f000 80a7 	beq.w	8004fd8 <_vfiprintf_r+0x1ec>
 8004e8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e8c:	445a      	add	r2, fp
 8004e8e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e90:	f89a 3000 	ldrb.w	r3, [sl]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 809f 	beq.w	8004fd8 <_vfiprintf_r+0x1ec>
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004ea0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ea4:	f10a 0a01 	add.w	sl, sl, #1
 8004ea8:	9304      	str	r3, [sp, #16]
 8004eaa:	9307      	str	r3, [sp, #28]
 8004eac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004eb0:	931a      	str	r3, [sp, #104]	@ 0x68
 8004eb2:	4654      	mov	r4, sl
 8004eb4:	2205      	movs	r2, #5
 8004eb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004eba:	4853      	ldr	r0, [pc, #332]	@ (8005008 <_vfiprintf_r+0x21c>)
 8004ebc:	f7ff ff1e 	bl	8004cfc <memchr>
 8004ec0:	9a04      	ldr	r2, [sp, #16]
 8004ec2:	b9d8      	cbnz	r0, 8004efc <_vfiprintf_r+0x110>
 8004ec4:	06d1      	lsls	r1, r2, #27
 8004ec6:	bf44      	itt	mi
 8004ec8:	2320      	movmi	r3, #32
 8004eca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ece:	0713      	lsls	r3, r2, #28
 8004ed0:	bf44      	itt	mi
 8004ed2:	232b      	movmi	r3, #43	@ 0x2b
 8004ed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ed8:	f89a 3000 	ldrb.w	r3, [sl]
 8004edc:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ede:	d015      	beq.n	8004f0c <_vfiprintf_r+0x120>
 8004ee0:	4654      	mov	r4, sl
 8004ee2:	2000      	movs	r0, #0
 8004ee4:	f04f 0c0a 	mov.w	ip, #10
 8004ee8:	9a07      	ldr	r2, [sp, #28]
 8004eea:	4621      	mov	r1, r4
 8004eec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ef0:	3b30      	subs	r3, #48	@ 0x30
 8004ef2:	2b09      	cmp	r3, #9
 8004ef4:	d94b      	bls.n	8004f8e <_vfiprintf_r+0x1a2>
 8004ef6:	b1b0      	cbz	r0, 8004f26 <_vfiprintf_r+0x13a>
 8004ef8:	9207      	str	r2, [sp, #28]
 8004efa:	e014      	b.n	8004f26 <_vfiprintf_r+0x13a>
 8004efc:	eba0 0308 	sub.w	r3, r0, r8
 8004f00:	fa09 f303 	lsl.w	r3, r9, r3
 8004f04:	4313      	orrs	r3, r2
 8004f06:	46a2      	mov	sl, r4
 8004f08:	9304      	str	r3, [sp, #16]
 8004f0a:	e7d2      	b.n	8004eb2 <_vfiprintf_r+0xc6>
 8004f0c:	9b03      	ldr	r3, [sp, #12]
 8004f0e:	1d19      	adds	r1, r3, #4
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	9103      	str	r1, [sp, #12]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	bfbb      	ittet	lt
 8004f18:	425b      	neglt	r3, r3
 8004f1a:	f042 0202 	orrlt.w	r2, r2, #2
 8004f1e:	9307      	strge	r3, [sp, #28]
 8004f20:	9307      	strlt	r3, [sp, #28]
 8004f22:	bfb8      	it	lt
 8004f24:	9204      	strlt	r2, [sp, #16]
 8004f26:	7823      	ldrb	r3, [r4, #0]
 8004f28:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f2a:	d10a      	bne.n	8004f42 <_vfiprintf_r+0x156>
 8004f2c:	7863      	ldrb	r3, [r4, #1]
 8004f2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f30:	d132      	bne.n	8004f98 <_vfiprintf_r+0x1ac>
 8004f32:	9b03      	ldr	r3, [sp, #12]
 8004f34:	3402      	adds	r4, #2
 8004f36:	1d1a      	adds	r2, r3, #4
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	9203      	str	r2, [sp, #12]
 8004f3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f40:	9305      	str	r3, [sp, #20]
 8004f42:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800500c <_vfiprintf_r+0x220>
 8004f46:	2203      	movs	r2, #3
 8004f48:	4650      	mov	r0, sl
 8004f4a:	7821      	ldrb	r1, [r4, #0]
 8004f4c:	f7ff fed6 	bl	8004cfc <memchr>
 8004f50:	b138      	cbz	r0, 8004f62 <_vfiprintf_r+0x176>
 8004f52:	2240      	movs	r2, #64	@ 0x40
 8004f54:	9b04      	ldr	r3, [sp, #16]
 8004f56:	eba0 000a 	sub.w	r0, r0, sl
 8004f5a:	4082      	lsls	r2, r0
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	3401      	adds	r4, #1
 8004f60:	9304      	str	r3, [sp, #16]
 8004f62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f66:	2206      	movs	r2, #6
 8004f68:	4829      	ldr	r0, [pc, #164]	@ (8005010 <_vfiprintf_r+0x224>)
 8004f6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004f6e:	f7ff fec5 	bl	8004cfc <memchr>
 8004f72:	2800      	cmp	r0, #0
 8004f74:	d03f      	beq.n	8004ff6 <_vfiprintf_r+0x20a>
 8004f76:	4b27      	ldr	r3, [pc, #156]	@ (8005014 <_vfiprintf_r+0x228>)
 8004f78:	bb1b      	cbnz	r3, 8004fc2 <_vfiprintf_r+0x1d6>
 8004f7a:	9b03      	ldr	r3, [sp, #12]
 8004f7c:	3307      	adds	r3, #7
 8004f7e:	f023 0307 	bic.w	r3, r3, #7
 8004f82:	3308      	adds	r3, #8
 8004f84:	9303      	str	r3, [sp, #12]
 8004f86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f88:	443b      	add	r3, r7
 8004f8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f8c:	e76a      	b.n	8004e64 <_vfiprintf_r+0x78>
 8004f8e:	460c      	mov	r4, r1
 8004f90:	2001      	movs	r0, #1
 8004f92:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f96:	e7a8      	b.n	8004eea <_vfiprintf_r+0xfe>
 8004f98:	2300      	movs	r3, #0
 8004f9a:	f04f 0c0a 	mov.w	ip, #10
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	3401      	adds	r4, #1
 8004fa2:	9305      	str	r3, [sp, #20]
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004faa:	3a30      	subs	r2, #48	@ 0x30
 8004fac:	2a09      	cmp	r2, #9
 8004fae:	d903      	bls.n	8004fb8 <_vfiprintf_r+0x1cc>
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0c6      	beq.n	8004f42 <_vfiprintf_r+0x156>
 8004fb4:	9105      	str	r1, [sp, #20]
 8004fb6:	e7c4      	b.n	8004f42 <_vfiprintf_r+0x156>
 8004fb8:	4604      	mov	r4, r0
 8004fba:	2301      	movs	r3, #1
 8004fbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fc0:	e7f0      	b.n	8004fa4 <_vfiprintf_r+0x1b8>
 8004fc2:	ab03      	add	r3, sp, #12
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	462a      	mov	r2, r5
 8004fc8:	4630      	mov	r0, r6
 8004fca:	4b13      	ldr	r3, [pc, #76]	@ (8005018 <_vfiprintf_r+0x22c>)
 8004fcc:	a904      	add	r1, sp, #16
 8004fce:	f3af 8000 	nop.w
 8004fd2:	4607      	mov	r7, r0
 8004fd4:	1c78      	adds	r0, r7, #1
 8004fd6:	d1d6      	bne.n	8004f86 <_vfiprintf_r+0x19a>
 8004fd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004fda:	07d9      	lsls	r1, r3, #31
 8004fdc:	d405      	bmi.n	8004fea <_vfiprintf_r+0x1fe>
 8004fde:	89ab      	ldrh	r3, [r5, #12]
 8004fe0:	059a      	lsls	r2, r3, #22
 8004fe2:	d402      	bmi.n	8004fea <_vfiprintf_r+0x1fe>
 8004fe4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004fe6:	f7ff f99d 	bl	8004324 <__retarget_lock_release_recursive>
 8004fea:	89ab      	ldrh	r3, [r5, #12]
 8004fec:	065b      	lsls	r3, r3, #25
 8004fee:	f53f af1f 	bmi.w	8004e30 <_vfiprintf_r+0x44>
 8004ff2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ff4:	e71e      	b.n	8004e34 <_vfiprintf_r+0x48>
 8004ff6:	ab03      	add	r3, sp, #12
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	462a      	mov	r2, r5
 8004ffc:	4630      	mov	r0, r6
 8004ffe:	4b06      	ldr	r3, [pc, #24]	@ (8005018 <_vfiprintf_r+0x22c>)
 8005000:	a904      	add	r1, sp, #16
 8005002:	f7ff fc77 	bl	80048f4 <_printf_i>
 8005006:	e7e4      	b.n	8004fd2 <_vfiprintf_r+0x1e6>
 8005008:	0800568c 	.word	0x0800568c
 800500c:	08005692 	.word	0x08005692
 8005010:	08005696 	.word	0x08005696
 8005014:	00000000 	.word	0x00000000
 8005018:	08004dc9 	.word	0x08004dc9

0800501c <__swbuf_r>:
 800501c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800501e:	460e      	mov	r6, r1
 8005020:	4614      	mov	r4, r2
 8005022:	4605      	mov	r5, r0
 8005024:	b118      	cbz	r0, 800502e <__swbuf_r+0x12>
 8005026:	6a03      	ldr	r3, [r0, #32]
 8005028:	b90b      	cbnz	r3, 800502e <__swbuf_r+0x12>
 800502a:	f7fe ffd7 	bl	8003fdc <__sinit>
 800502e:	69a3      	ldr	r3, [r4, #24]
 8005030:	60a3      	str	r3, [r4, #8]
 8005032:	89a3      	ldrh	r3, [r4, #12]
 8005034:	071a      	lsls	r2, r3, #28
 8005036:	d501      	bpl.n	800503c <__swbuf_r+0x20>
 8005038:	6923      	ldr	r3, [r4, #16]
 800503a:	b943      	cbnz	r3, 800504e <__swbuf_r+0x32>
 800503c:	4621      	mov	r1, r4
 800503e:	4628      	mov	r0, r5
 8005040:	f000 f82a 	bl	8005098 <__swsetup_r>
 8005044:	b118      	cbz	r0, 800504e <__swbuf_r+0x32>
 8005046:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800504a:	4638      	mov	r0, r7
 800504c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	6922      	ldr	r2, [r4, #16]
 8005052:	b2f6      	uxtb	r6, r6
 8005054:	1a98      	subs	r0, r3, r2
 8005056:	6963      	ldr	r3, [r4, #20]
 8005058:	4637      	mov	r7, r6
 800505a:	4283      	cmp	r3, r0
 800505c:	dc05      	bgt.n	800506a <__swbuf_r+0x4e>
 800505e:	4621      	mov	r1, r4
 8005060:	4628      	mov	r0, r5
 8005062:	f7ff fde7 	bl	8004c34 <_fflush_r>
 8005066:	2800      	cmp	r0, #0
 8005068:	d1ed      	bne.n	8005046 <__swbuf_r+0x2a>
 800506a:	68a3      	ldr	r3, [r4, #8]
 800506c:	3b01      	subs	r3, #1
 800506e:	60a3      	str	r3, [r4, #8]
 8005070:	6823      	ldr	r3, [r4, #0]
 8005072:	1c5a      	adds	r2, r3, #1
 8005074:	6022      	str	r2, [r4, #0]
 8005076:	701e      	strb	r6, [r3, #0]
 8005078:	6962      	ldr	r2, [r4, #20]
 800507a:	1c43      	adds	r3, r0, #1
 800507c:	429a      	cmp	r2, r3
 800507e:	d004      	beq.n	800508a <__swbuf_r+0x6e>
 8005080:	89a3      	ldrh	r3, [r4, #12]
 8005082:	07db      	lsls	r3, r3, #31
 8005084:	d5e1      	bpl.n	800504a <__swbuf_r+0x2e>
 8005086:	2e0a      	cmp	r6, #10
 8005088:	d1df      	bne.n	800504a <__swbuf_r+0x2e>
 800508a:	4621      	mov	r1, r4
 800508c:	4628      	mov	r0, r5
 800508e:	f7ff fdd1 	bl	8004c34 <_fflush_r>
 8005092:	2800      	cmp	r0, #0
 8005094:	d0d9      	beq.n	800504a <__swbuf_r+0x2e>
 8005096:	e7d6      	b.n	8005046 <__swbuf_r+0x2a>

08005098 <__swsetup_r>:
 8005098:	b538      	push	{r3, r4, r5, lr}
 800509a:	4b29      	ldr	r3, [pc, #164]	@ (8005140 <__swsetup_r+0xa8>)
 800509c:	4605      	mov	r5, r0
 800509e:	6818      	ldr	r0, [r3, #0]
 80050a0:	460c      	mov	r4, r1
 80050a2:	b118      	cbz	r0, 80050ac <__swsetup_r+0x14>
 80050a4:	6a03      	ldr	r3, [r0, #32]
 80050a6:	b90b      	cbnz	r3, 80050ac <__swsetup_r+0x14>
 80050a8:	f7fe ff98 	bl	8003fdc <__sinit>
 80050ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050b0:	0719      	lsls	r1, r3, #28
 80050b2:	d422      	bmi.n	80050fa <__swsetup_r+0x62>
 80050b4:	06da      	lsls	r2, r3, #27
 80050b6:	d407      	bmi.n	80050c8 <__swsetup_r+0x30>
 80050b8:	2209      	movs	r2, #9
 80050ba:	602a      	str	r2, [r5, #0]
 80050bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80050c4:	81a3      	strh	r3, [r4, #12]
 80050c6:	e033      	b.n	8005130 <__swsetup_r+0x98>
 80050c8:	0758      	lsls	r0, r3, #29
 80050ca:	d512      	bpl.n	80050f2 <__swsetup_r+0x5a>
 80050cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80050ce:	b141      	cbz	r1, 80050e2 <__swsetup_r+0x4a>
 80050d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80050d4:	4299      	cmp	r1, r3
 80050d6:	d002      	beq.n	80050de <__swsetup_r+0x46>
 80050d8:	4628      	mov	r0, r5
 80050da:	f7ff f943 	bl	8004364 <_free_r>
 80050de:	2300      	movs	r3, #0
 80050e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80050e2:	89a3      	ldrh	r3, [r4, #12]
 80050e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80050e8:	81a3      	strh	r3, [r4, #12]
 80050ea:	2300      	movs	r3, #0
 80050ec:	6063      	str	r3, [r4, #4]
 80050ee:	6923      	ldr	r3, [r4, #16]
 80050f0:	6023      	str	r3, [r4, #0]
 80050f2:	89a3      	ldrh	r3, [r4, #12]
 80050f4:	f043 0308 	orr.w	r3, r3, #8
 80050f8:	81a3      	strh	r3, [r4, #12]
 80050fa:	6923      	ldr	r3, [r4, #16]
 80050fc:	b94b      	cbnz	r3, 8005112 <__swsetup_r+0x7a>
 80050fe:	89a3      	ldrh	r3, [r4, #12]
 8005100:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005108:	d003      	beq.n	8005112 <__swsetup_r+0x7a>
 800510a:	4621      	mov	r1, r4
 800510c:	4628      	mov	r0, r5
 800510e:	f000 f88a 	bl	8005226 <__smakebuf_r>
 8005112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005116:	f013 0201 	ands.w	r2, r3, #1
 800511a:	d00a      	beq.n	8005132 <__swsetup_r+0x9a>
 800511c:	2200      	movs	r2, #0
 800511e:	60a2      	str	r2, [r4, #8]
 8005120:	6962      	ldr	r2, [r4, #20]
 8005122:	4252      	negs	r2, r2
 8005124:	61a2      	str	r2, [r4, #24]
 8005126:	6922      	ldr	r2, [r4, #16]
 8005128:	b942      	cbnz	r2, 800513c <__swsetup_r+0xa4>
 800512a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800512e:	d1c5      	bne.n	80050bc <__swsetup_r+0x24>
 8005130:	bd38      	pop	{r3, r4, r5, pc}
 8005132:	0799      	lsls	r1, r3, #30
 8005134:	bf58      	it	pl
 8005136:	6962      	ldrpl	r2, [r4, #20]
 8005138:	60a2      	str	r2, [r4, #8]
 800513a:	e7f4      	b.n	8005126 <__swsetup_r+0x8e>
 800513c:	2000      	movs	r0, #0
 800513e:	e7f7      	b.n	8005130 <__swsetup_r+0x98>
 8005140:	2000016c 	.word	0x2000016c

08005144 <_raise_r>:
 8005144:	291f      	cmp	r1, #31
 8005146:	b538      	push	{r3, r4, r5, lr}
 8005148:	4605      	mov	r5, r0
 800514a:	460c      	mov	r4, r1
 800514c:	d904      	bls.n	8005158 <_raise_r+0x14>
 800514e:	2316      	movs	r3, #22
 8005150:	6003      	str	r3, [r0, #0]
 8005152:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005156:	bd38      	pop	{r3, r4, r5, pc}
 8005158:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800515a:	b112      	cbz	r2, 8005162 <_raise_r+0x1e>
 800515c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005160:	b94b      	cbnz	r3, 8005176 <_raise_r+0x32>
 8005162:	4628      	mov	r0, r5
 8005164:	f000 f830 	bl	80051c8 <_getpid_r>
 8005168:	4622      	mov	r2, r4
 800516a:	4601      	mov	r1, r0
 800516c:	4628      	mov	r0, r5
 800516e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005172:	f000 b817 	b.w	80051a4 <_kill_r>
 8005176:	2b01      	cmp	r3, #1
 8005178:	d00a      	beq.n	8005190 <_raise_r+0x4c>
 800517a:	1c59      	adds	r1, r3, #1
 800517c:	d103      	bne.n	8005186 <_raise_r+0x42>
 800517e:	2316      	movs	r3, #22
 8005180:	6003      	str	r3, [r0, #0]
 8005182:	2001      	movs	r0, #1
 8005184:	e7e7      	b.n	8005156 <_raise_r+0x12>
 8005186:	2100      	movs	r1, #0
 8005188:	4620      	mov	r0, r4
 800518a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800518e:	4798      	blx	r3
 8005190:	2000      	movs	r0, #0
 8005192:	e7e0      	b.n	8005156 <_raise_r+0x12>

08005194 <raise>:
 8005194:	4b02      	ldr	r3, [pc, #8]	@ (80051a0 <raise+0xc>)
 8005196:	4601      	mov	r1, r0
 8005198:	6818      	ldr	r0, [r3, #0]
 800519a:	f7ff bfd3 	b.w	8005144 <_raise_r>
 800519e:	bf00      	nop
 80051a0:	2000016c 	.word	0x2000016c

080051a4 <_kill_r>:
 80051a4:	b538      	push	{r3, r4, r5, lr}
 80051a6:	2300      	movs	r3, #0
 80051a8:	4d06      	ldr	r5, [pc, #24]	@ (80051c4 <_kill_r+0x20>)
 80051aa:	4604      	mov	r4, r0
 80051ac:	4608      	mov	r0, r1
 80051ae:	4611      	mov	r1, r2
 80051b0:	602b      	str	r3, [r5, #0]
 80051b2:	f7fb fae2 	bl	800077a <_kill>
 80051b6:	1c43      	adds	r3, r0, #1
 80051b8:	d102      	bne.n	80051c0 <_kill_r+0x1c>
 80051ba:	682b      	ldr	r3, [r5, #0]
 80051bc:	b103      	cbz	r3, 80051c0 <_kill_r+0x1c>
 80051be:	6023      	str	r3, [r4, #0]
 80051c0:	bd38      	pop	{r3, r4, r5, pc}
 80051c2:	bf00      	nop
 80051c4:	20000634 	.word	0x20000634

080051c8 <_getpid_r>:
 80051c8:	f7fb bad0 	b.w	800076c <_getpid>

080051cc <_malloc_usable_size_r>:
 80051cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051d0:	1f18      	subs	r0, r3, #4
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	bfbc      	itt	lt
 80051d6:	580b      	ldrlt	r3, [r1, r0]
 80051d8:	18c0      	addlt	r0, r0, r3
 80051da:	4770      	bx	lr

080051dc <__swhatbuf_r>:
 80051dc:	b570      	push	{r4, r5, r6, lr}
 80051de:	460c      	mov	r4, r1
 80051e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051e4:	4615      	mov	r5, r2
 80051e6:	2900      	cmp	r1, #0
 80051e8:	461e      	mov	r6, r3
 80051ea:	b096      	sub	sp, #88	@ 0x58
 80051ec:	da0c      	bge.n	8005208 <__swhatbuf_r+0x2c>
 80051ee:	89a3      	ldrh	r3, [r4, #12]
 80051f0:	2100      	movs	r1, #0
 80051f2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80051f6:	bf14      	ite	ne
 80051f8:	2340      	movne	r3, #64	@ 0x40
 80051fa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80051fe:	2000      	movs	r0, #0
 8005200:	6031      	str	r1, [r6, #0]
 8005202:	602b      	str	r3, [r5, #0]
 8005204:	b016      	add	sp, #88	@ 0x58
 8005206:	bd70      	pop	{r4, r5, r6, pc}
 8005208:	466a      	mov	r2, sp
 800520a:	f000 f849 	bl	80052a0 <_fstat_r>
 800520e:	2800      	cmp	r0, #0
 8005210:	dbed      	blt.n	80051ee <__swhatbuf_r+0x12>
 8005212:	9901      	ldr	r1, [sp, #4]
 8005214:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005218:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800521c:	4259      	negs	r1, r3
 800521e:	4159      	adcs	r1, r3
 8005220:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005224:	e7eb      	b.n	80051fe <__swhatbuf_r+0x22>

08005226 <__smakebuf_r>:
 8005226:	898b      	ldrh	r3, [r1, #12]
 8005228:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800522a:	079d      	lsls	r5, r3, #30
 800522c:	4606      	mov	r6, r0
 800522e:	460c      	mov	r4, r1
 8005230:	d507      	bpl.n	8005242 <__smakebuf_r+0x1c>
 8005232:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005236:	6023      	str	r3, [r4, #0]
 8005238:	6123      	str	r3, [r4, #16]
 800523a:	2301      	movs	r3, #1
 800523c:	6163      	str	r3, [r4, #20]
 800523e:	b003      	add	sp, #12
 8005240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005242:	466a      	mov	r2, sp
 8005244:	ab01      	add	r3, sp, #4
 8005246:	f7ff ffc9 	bl	80051dc <__swhatbuf_r>
 800524a:	9f00      	ldr	r7, [sp, #0]
 800524c:	4605      	mov	r5, r0
 800524e:	4639      	mov	r1, r7
 8005250:	4630      	mov	r0, r6
 8005252:	f7ff f8f9 	bl	8004448 <_malloc_r>
 8005256:	b948      	cbnz	r0, 800526c <__smakebuf_r+0x46>
 8005258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800525c:	059a      	lsls	r2, r3, #22
 800525e:	d4ee      	bmi.n	800523e <__smakebuf_r+0x18>
 8005260:	f023 0303 	bic.w	r3, r3, #3
 8005264:	f043 0302 	orr.w	r3, r3, #2
 8005268:	81a3      	strh	r3, [r4, #12]
 800526a:	e7e2      	b.n	8005232 <__smakebuf_r+0xc>
 800526c:	89a3      	ldrh	r3, [r4, #12]
 800526e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005276:	81a3      	strh	r3, [r4, #12]
 8005278:	9b01      	ldr	r3, [sp, #4]
 800527a:	6020      	str	r0, [r4, #0]
 800527c:	b15b      	cbz	r3, 8005296 <__smakebuf_r+0x70>
 800527e:	4630      	mov	r0, r6
 8005280:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005284:	f000 f81e 	bl	80052c4 <_isatty_r>
 8005288:	b128      	cbz	r0, 8005296 <__smakebuf_r+0x70>
 800528a:	89a3      	ldrh	r3, [r4, #12]
 800528c:	f023 0303 	bic.w	r3, r3, #3
 8005290:	f043 0301 	orr.w	r3, r3, #1
 8005294:	81a3      	strh	r3, [r4, #12]
 8005296:	89a3      	ldrh	r3, [r4, #12]
 8005298:	431d      	orrs	r5, r3
 800529a:	81a5      	strh	r5, [r4, #12]
 800529c:	e7cf      	b.n	800523e <__smakebuf_r+0x18>
	...

080052a0 <_fstat_r>:
 80052a0:	b538      	push	{r3, r4, r5, lr}
 80052a2:	2300      	movs	r3, #0
 80052a4:	4d06      	ldr	r5, [pc, #24]	@ (80052c0 <_fstat_r+0x20>)
 80052a6:	4604      	mov	r4, r0
 80052a8:	4608      	mov	r0, r1
 80052aa:	4611      	mov	r1, r2
 80052ac:	602b      	str	r3, [r5, #0]
 80052ae:	f7fb fac3 	bl	8000838 <_fstat>
 80052b2:	1c43      	adds	r3, r0, #1
 80052b4:	d102      	bne.n	80052bc <_fstat_r+0x1c>
 80052b6:	682b      	ldr	r3, [r5, #0]
 80052b8:	b103      	cbz	r3, 80052bc <_fstat_r+0x1c>
 80052ba:	6023      	str	r3, [r4, #0]
 80052bc:	bd38      	pop	{r3, r4, r5, pc}
 80052be:	bf00      	nop
 80052c0:	20000634 	.word	0x20000634

080052c4 <_isatty_r>:
 80052c4:	b538      	push	{r3, r4, r5, lr}
 80052c6:	2300      	movs	r3, #0
 80052c8:	4d05      	ldr	r5, [pc, #20]	@ (80052e0 <_isatty_r+0x1c>)
 80052ca:	4604      	mov	r4, r0
 80052cc:	4608      	mov	r0, r1
 80052ce:	602b      	str	r3, [r5, #0]
 80052d0:	f7fb fac1 	bl	8000856 <_isatty>
 80052d4:	1c43      	adds	r3, r0, #1
 80052d6:	d102      	bne.n	80052de <_isatty_r+0x1a>
 80052d8:	682b      	ldr	r3, [r5, #0]
 80052da:	b103      	cbz	r3, 80052de <_isatty_r+0x1a>
 80052dc:	6023      	str	r3, [r4, #0]
 80052de:	bd38      	pop	{r3, r4, r5, pc}
 80052e0:	20000634 	.word	0x20000634

080052e4 <_init>:
 80052e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e6:	bf00      	nop
 80052e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ea:	bc08      	pop	{r3}
 80052ec:	469e      	mov	lr, r3
 80052ee:	4770      	bx	lr

080052f0 <_fini>:
 80052f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f2:	bf00      	nop
 80052f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052f6:	bc08      	pop	{r3}
 80052f8:	469e      	mov	lr, r3
 80052fa:	4770      	bx	lr
