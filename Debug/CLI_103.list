
CLI_103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005034  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  08005140  08005140  00006140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054d0  080054d0  00007104  2**0
                  CONTENTS
  4 .ARM          00000008  080054d0  080054d0  000064d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054d8  080054d8  00007104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054d8  080054d8  000064d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054dc  080054dc  000064dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000104  20000000  080054e0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000524  20000104  080055e4  00007104  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000628  080055e4  00007628  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba89  00000000  00000000  0000712d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025a6  00000000  00000000  00012bb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  00015160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000734  00000000  00000000  00015af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d75  00000000  00000000  0001622c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca57  00000000  00000000  0002efa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088fa7  00000000  00000000  0003b9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c499f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000304c  00000000  00000000  000c49e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000c7a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000104 	.word	0x20000104
 8000128:	00000000 	.word	0x00000000
 800012c:	08005128 	.word	0x08005128

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000108 	.word	0x20000108
 8000148:	08005128 	.word	0x08005128

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <main_loop>:
    {"led-blink", handleLedBlinkCommand},
    {"adc-get", handleAdcGetCommand},
    {"info", handleInfoCommand},
    {NULL, handleInvalidCommand}
};
void main_loop(void) {
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af02      	add	r7, sp, #8
	if (UART_Init(&uart1,uartConfig) !=0){
 8000176:	4b26      	ldr	r3, [pc, #152]	@ (8000210 <main_loop+0xa0>)
 8000178:	68da      	ldr	r2, [r3, #12]
 800017a:	9200      	str	r2, [sp, #0]
 800017c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800017e:	4825      	ldr	r0, [pc, #148]	@ (8000214 <main_loop+0xa4>)
 8000180:	f003 fbca 	bl	8003918 <UART_Init>
 8000184:	4603      	mov	r3, r0
 8000186:	2b00      	cmp	r3, #0
 8000188:	d005      	beq.n	8000196 <main_loop+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800018a:	2201      	movs	r2, #1
 800018c:	2120      	movs	r1, #32
 800018e:	4822      	ldr	r0, [pc, #136]	@ (8000218 <main_loop+0xa8>)
 8000190:	f001 fed2 	bl	8001f38 <HAL_GPIO_WritePin>
		return;
 8000194:	e039      	b.n	800020a <main_loop+0x9a>
	}
	HAL_UART_Receive_IT(&uart1.huart, &rxbyte, 1);
 8000196:	2201      	movs	r2, #1
 8000198:	4920      	ldr	r1, [pc, #128]	@ (800021c <main_loop+0xac>)
 800019a:	481e      	ldr	r0, [pc, #120]	@ (8000214 <main_loop+0xa4>)
 800019c:	f002 fd4d 	bl	8002c3a <HAL_UART_Receive_IT>

    while(1) {
    	uint8_t byte;
		while(CircularBuffer_Read(&rxBuffer, &byte)) {
 80001a0:	e02a      	b.n	80001f8 <main_loop+0x88>
			send_byte(&uart1.huart,byte);
 80001a2:	79fb      	ldrb	r3, [r7, #7]
 80001a4:	4619      	mov	r1, r3
 80001a6:	481b      	ldr	r0, [pc, #108]	@ (8000214 <main_loop+0xa4>)
 80001a8:	f003 fc48 	bl	8003a3c <send_byte>
			checkCtrlC(byte);
 80001ac:	79fb      	ldrb	r3, [r7, #7]
 80001ae:	4618      	mov	r0, r3
 80001b0:	f003 fd22 	bl	8003bf8 <checkCtrlC>
			if (byte == '\r' || byte == '\n') {
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	2b0d      	cmp	r3, #13
 80001b8:	d002      	beq.n	80001c0 <main_loop+0x50>
 80001ba:	79fb      	ldrb	r3, [r7, #7]
 80001bc:	2b0a      	cmp	r3, #10
 80001be:	d10d      	bne.n	80001dc <main_loop+0x6c>
				buffer[myindex] = '\0';
 80001c0:	4b17      	ldr	r3, [pc, #92]	@ (8000220 <main_loop+0xb0>)
 80001c2:	881b      	ldrh	r3, [r3, #0]
 80001c4:	461a      	mov	r2, r3
 80001c6:	4b17      	ldr	r3, [pc, #92]	@ (8000224 <main_loop+0xb4>)
 80001c8:	2100      	movs	r1, #0
 80001ca:	5499      	strb	r1, [r3, r2]
				processCommand(commandMap, buffer);
 80001cc:	4915      	ldr	r1, [pc, #84]	@ (8000224 <main_loop+0xb4>)
 80001ce:	4816      	ldr	r0, [pc, #88]	@ (8000228 <main_loop+0xb8>)
 80001d0:	f003 fca0 	bl	8003b14 <processCommand>
				myindex = 0;
 80001d4:	4b12      	ldr	r3, [pc, #72]	@ (8000220 <main_loop+0xb0>)
 80001d6:	2200      	movs	r2, #0
 80001d8:	801a      	strh	r2, [r3, #0]
 80001da:	e00d      	b.n	80001f8 <main_loop+0x88>
			}else if (myindex < BUFFER_SIZE - 1) {
 80001dc:	4b10      	ldr	r3, [pc, #64]	@ (8000220 <main_loop+0xb0>)
 80001de:	881b      	ldrh	r3, [r3, #0]
 80001e0:	2bfe      	cmp	r3, #254	@ 0xfe
 80001e2:	d809      	bhi.n	80001f8 <main_loop+0x88>
				buffer[myindex++] = byte;
 80001e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000220 <main_loop+0xb0>)
 80001e6:	881b      	ldrh	r3, [r3, #0]
 80001e8:	1c5a      	adds	r2, r3, #1
 80001ea:	b291      	uxth	r1, r2
 80001ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000220 <main_loop+0xb0>)
 80001ee:	8011      	strh	r1, [r2, #0]
 80001f0:	461a      	mov	r2, r3
 80001f2:	79f9      	ldrb	r1, [r7, #7]
 80001f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000224 <main_loop+0xb4>)
 80001f6:	5499      	strb	r1, [r3, r2]
		while(CircularBuffer_Read(&rxBuffer, &byte)) {
 80001f8:	1dfb      	adds	r3, r7, #7
 80001fa:	4619      	mov	r1, r3
 80001fc:	480b      	ldr	r0, [pc, #44]	@ (800022c <main_loop+0xbc>)
 80001fe:	f003 fc5a 	bl	8003ab6 <CircularBuffer_Read>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d1cc      	bne.n	80001a2 <main_loop+0x32>
    while(1) {
 8000208:	e7ca      	b.n	80001a0 <main_loop+0x30>
			}
		}
    }
}
 800020a:	3708      	adds	r7, #8
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}
 8000210:	20000000 	.word	0x20000000
 8000214:	2000004c 	.word	0x2000004c
 8000218:	40010800 	.word	0x40010800
 800021c:	200003d5 	.word	0x200003d5
 8000220:	20000120 	.word	0x20000120
 8000224:	20000124 	.word	0x20000124
 8000228:	20000010 	.word	0x20000010
 800022c:	200003d8 	.word	0x200003d8

08000230 <startBlinking>:
uint8_t pins[3];
char msg[50];
char response[100];
uint32_t previous_time = 0;

void startBlinking(uint8_t *pins, int count) {
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
 8000238:	6039      	str	r1, [r7, #0]
	while(Setstop){
 800023a:	e022      	b.n	8000282 <startBlinking+0x52>
		if((HAL_GetTick()- previous_time) >200){
 800023c:	f000 fda0 	bl	8000d80 <HAL_GetTick>
 8000240:	4602      	mov	r2, r0
 8000242:	4b20      	ldr	r3, [pc, #128]	@ (80002c4 <startBlinking+0x94>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	1ad3      	subs	r3, r2, r3
 8000248:	2bc8      	cmp	r3, #200	@ 0xc8
 800024a:	d91a      	bls.n	8000282 <startBlinking+0x52>
			for (int i = 0; i < count; i++) {
 800024c:	2300      	movs	r3, #0
 800024e:	60fb      	str	r3, [r7, #12]
 8000250:	e00e      	b.n	8000270 <startBlinking+0x40>
				HAL_GPIO_TogglePin(GPIOA, 1 << pins[i]);
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	687a      	ldr	r2, [r7, #4]
 8000256:	4413      	add	r3, r2
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	461a      	mov	r2, r3
 800025c:	2301      	movs	r3, #1
 800025e:	4093      	lsls	r3, r2
 8000260:	b29b      	uxth	r3, r3
 8000262:	4619      	mov	r1, r3
 8000264:	4818      	ldr	r0, [pc, #96]	@ (80002c8 <startBlinking+0x98>)
 8000266:	f001 fe7f 	bl	8001f68 <HAL_GPIO_TogglePin>
			for (int i = 0; i < count; i++) {
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	3301      	adds	r3, #1
 800026e:	60fb      	str	r3, [r7, #12]
 8000270:	68fa      	ldr	r2, [r7, #12]
 8000272:	683b      	ldr	r3, [r7, #0]
 8000274:	429a      	cmp	r2, r3
 8000276:	dbec      	blt.n	8000252 <startBlinking+0x22>
			}
			previous_time = HAL_GetTick();
 8000278:	f000 fd82 	bl	8000d80 <HAL_GetTick>
 800027c:	4603      	mov	r3, r0
 800027e:	4a11      	ldr	r2, [pc, #68]	@ (80002c4 <startBlinking+0x94>)
 8000280:	6013      	str	r3, [r2, #0]
	while(Setstop){
 8000282:	4b12      	ldr	r3, [pc, #72]	@ (80002cc <startBlinking+0x9c>)
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	b2db      	uxtb	r3, r3
 8000288:	2b00      	cmp	r3, #0
 800028a:	d1d7      	bne.n	800023c <startBlinking+0xc>
		}
	}
	for (int i = 0; i < count; i++) {
 800028c:	2300      	movs	r3, #0
 800028e:	60bb      	str	r3, [r7, #8]
 8000290:	e00f      	b.n	80002b2 <startBlinking+0x82>
		HAL_GPIO_WritePin(GPIOA, 1 << pins[i], GPIO_PIN_RESET);
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	687a      	ldr	r2, [r7, #4]
 8000296:	4413      	add	r3, r2
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	461a      	mov	r2, r3
 800029c:	2301      	movs	r3, #1
 800029e:	4093      	lsls	r3, r2
 80002a0:	b29b      	uxth	r3, r3
 80002a2:	2200      	movs	r2, #0
 80002a4:	4619      	mov	r1, r3
 80002a6:	4808      	ldr	r0, [pc, #32]	@ (80002c8 <startBlinking+0x98>)
 80002a8:	f001 fe46 	bl	8001f38 <HAL_GPIO_WritePin>
	for (int i = 0; i < count; i++) {
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	3301      	adds	r3, #1
 80002b0:	60bb      	str	r3, [r7, #8]
 80002b2:	68ba      	ldr	r2, [r7, #8]
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	dbeb      	blt.n	8000292 <startBlinking+0x62>
	}
}
 80002ba:	bf00      	nop
 80002bc:	bf00      	nop
 80002be:	3710      	adds	r7, #16
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	200002c4 	.word	0x200002c4
 80002c8:	40010800 	.word	0x40010800
 80002cc:	200003d4 	.word	0x200003d4

080002d0 <handleLedOnCommand>:
void handleLedOnCommand(char *args) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < count; i++) {
 80002d8:	2300      	movs	r3, #0
 80002da:	60fb      	str	r3, [r7, #12]
 80002dc:	e00f      	b.n	80002fe <handleLedOnCommand+0x2e>
		HAL_GPIO_WritePin(GPIOA, 1 << pins[i], GPIO_PIN_SET);
 80002de:	4a0d      	ldr	r2, [pc, #52]	@ (8000314 <handleLedOnCommand+0x44>)
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	4413      	add	r3, r2
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	461a      	mov	r2, r3
 80002e8:	2301      	movs	r3, #1
 80002ea:	4093      	lsls	r3, r2
 80002ec:	b29b      	uxth	r3, r3
 80002ee:	2201      	movs	r2, #1
 80002f0:	4619      	mov	r1, r3
 80002f2:	4809      	ldr	r0, [pc, #36]	@ (8000318 <handleLedOnCommand+0x48>)
 80002f4:	f001 fe20 	bl	8001f38 <HAL_GPIO_WritePin>
	for (int i = 0; i < count; i++) {
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	3301      	adds	r3, #1
 80002fc:	60fb      	str	r3, [r7, #12]
 80002fe:	4b07      	ldr	r3, [pc, #28]	@ (800031c <handleLedOnCommand+0x4c>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	68fa      	ldr	r2, [r7, #12]
 8000304:	429a      	cmp	r2, r3
 8000306:	dbea      	blt.n	80002de <handleLedOnCommand+0xe>
	}
}
 8000308:	bf00      	nop
 800030a:	bf00      	nop
 800030c:	3710      	adds	r7, #16
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	20000228 	.word	0x20000228
 8000318:	40010800 	.word	0x40010800
 800031c:	20000224 	.word	0x20000224

08000320 <handleLedOffCommand>:

void handleLedOffCommand(char *args) {
 8000320:	b580      	push	{r7, lr}
 8000322:	b084      	sub	sp, #16
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < count; i++) {
 8000328:	2300      	movs	r3, #0
 800032a:	60fb      	str	r3, [r7, #12]
 800032c:	e00f      	b.n	800034e <handleLedOffCommand+0x2e>
		HAL_GPIO_WritePin(GPIOA, 1 << pins[i], GPIO_PIN_RESET);
 800032e:	4a0d      	ldr	r2, [pc, #52]	@ (8000364 <handleLedOffCommand+0x44>)
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	4413      	add	r3, r2
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	461a      	mov	r2, r3
 8000338:	2301      	movs	r3, #1
 800033a:	4093      	lsls	r3, r2
 800033c:	b29b      	uxth	r3, r3
 800033e:	2200      	movs	r2, #0
 8000340:	4619      	mov	r1, r3
 8000342:	4809      	ldr	r0, [pc, #36]	@ (8000368 <handleLedOffCommand+0x48>)
 8000344:	f001 fdf8 	bl	8001f38 <HAL_GPIO_WritePin>
	for (int i = 0; i < count; i++) {
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	3301      	adds	r3, #1
 800034c:	60fb      	str	r3, [r7, #12]
 800034e:	4b07      	ldr	r3, [pc, #28]	@ (800036c <handleLedOffCommand+0x4c>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	68fa      	ldr	r2, [r7, #12]
 8000354:	429a      	cmp	r2, r3
 8000356:	dbea      	blt.n	800032e <handleLedOffCommand+0xe>
	}
}
 8000358:	bf00      	nop
 800035a:	bf00      	nop
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000228 	.word	0x20000228
 8000368:	40010800 	.word	0x40010800
 800036c:	20000224 	.word	0x20000224

08000370 <handleLedBlinkCommand>:
void handleLedBlinkCommand(char *args) {
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
	Setstop = 1;
 8000378:	4b08      	ldr	r3, [pc, #32]	@ (800039c <handleLedBlinkCommand+0x2c>)
 800037a:	2201      	movs	r2, #1
 800037c:	701a      	strb	r2, [r3, #0]
	UART_SendString(&uart1.huart, "\r\n");
 800037e:	4908      	ldr	r1, [pc, #32]	@ (80003a0 <handleLedBlinkCommand+0x30>)
 8000380:	4808      	ldr	r0, [pc, #32]	@ (80003a4 <handleLedBlinkCommand+0x34>)
 8000382:	f003 fb10 	bl	80039a6 <UART_SendString>
	startBlinking(pins, count);
 8000386:	4b08      	ldr	r3, [pc, #32]	@ (80003a8 <handleLedBlinkCommand+0x38>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4619      	mov	r1, r3
 800038c:	4807      	ldr	r0, [pc, #28]	@ (80003ac <handleLedBlinkCommand+0x3c>)
 800038e:	f7ff ff4f 	bl	8000230 <startBlinking>
}
 8000392:	bf00      	nop
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	200003d4 	.word	0x200003d4
 80003a0:	0800516c 	.word	0x0800516c
 80003a4:	2000004c 	.word	0x2000004c
 80003a8:	20000224 	.word	0x20000224
 80003ac:	20000228 	.word	0x20000228

080003b0 <handleAdcGetCommand>:

void handleAdcGetCommand(char *args) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b08a      	sub	sp, #40	@ 0x28
 80003b4:	af02      	add	r7, sp, #8
 80003b6:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 80003b8:	f107 030c 	add.w	r3, r7, #12
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
 80003c2:	609a      	str	r2, [r3, #8]
    for(int i; i< count; i++){
 80003c4:	e069      	b.n	800049a <handleAdcGetCommand+0xea>
		if (pins[i]==0||pins[i] ==1){
 80003c6:	4a39      	ldr	r2, [pc, #228]	@ (80004ac <handleAdcGetCommand+0xfc>)
 80003c8:	69fb      	ldr	r3, [r7, #28]
 80003ca:	4413      	add	r3, r2
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d005      	beq.n	80003de <handleAdcGetCommand+0x2e>
 80003d2:	4a36      	ldr	r2, [pc, #216]	@ (80004ac <handleAdcGetCommand+0xfc>)
 80003d4:	69fb      	ldr	r3, [r7, #28]
 80003d6:	4413      	add	r3, r2
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	2b01      	cmp	r3, #1
 80003dc:	d156      	bne.n	800048c <handleAdcGetCommand+0xdc>
			sConfig.Channel = (pins[i] == 0) ? ADC_CHANNEL_0 : ADC_CHANNEL_1;
 80003de:	4a33      	ldr	r2, [pc, #204]	@ (80004ac <handleAdcGetCommand+0xfc>)
 80003e0:	69fb      	ldr	r3, [r7, #28]
 80003e2:	4413      	add	r3, r2
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	bf14      	ite	ne
 80003ea:	2301      	movne	r3, #1
 80003ec:	2300      	moveq	r3, #0
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	60fb      	str	r3, [r7, #12]
			sConfig.Rank = ADC_REGULAR_RANK_1;
 80003f2:	2301      	movs	r3, #1
 80003f4:	613b      	str	r3, [r7, #16]
			sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80003f6:	2303      	movs	r3, #3
 80003f8:	617b      	str	r3, [r7, #20]

			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80003fa:	f107 030c 	add.w	r3, r7, #12
 80003fe:	4619      	mov	r1, r3
 8000400:	482b      	ldr	r0, [pc, #172]	@ (80004b0 <handleAdcGetCommand+0x100>)
 8000402:	f000 ff5f 	bl	80012c4 <HAL_ADC_ConfigChannel>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d004      	beq.n	8000416 <handleAdcGetCommand+0x66>
				UART_SendString(&uart1.huart, "\r\nError: Failed to configure ADC channel.");
 800040c:	4929      	ldr	r1, [pc, #164]	@ (80004b4 <handleAdcGetCommand+0x104>)
 800040e:	482a      	ldr	r0, [pc, #168]	@ (80004b8 <handleAdcGetCommand+0x108>)
 8000410:	f003 fac9 	bl	80039a6 <UART_SendString>
 8000414:	e046      	b.n	80004a4 <handleAdcGetCommand+0xf4>
				return;
			}
			Setstop = 1;
 8000416:	4b29      	ldr	r3, [pc, #164]	@ (80004bc <handleAdcGetCommand+0x10c>)
 8000418:	2201      	movs	r2, #1
 800041a:	701a      	strb	r2, [r3, #0]
			while(Setstop){
 800041c:	e030      	b.n	8000480 <handleAdcGetCommand+0xd0>
				if((HAL_GetTick()- previous_time) >1000){
 800041e:	f000 fcaf 	bl	8000d80 <HAL_GetTick>
 8000422:	4602      	mov	r2, r0
 8000424:	4b26      	ldr	r3, [pc, #152]	@ (80004c0 <handleAdcGetCommand+0x110>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	1ad3      	subs	r3, r2, r3
 800042a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800042e:	d927      	bls.n	8000480 <handleAdcGetCommand+0xd0>
					HAL_ADC_Start(&hadc1);
 8000430:	481f      	ldr	r0, [pc, #124]	@ (80004b0 <handleAdcGetCommand+0x100>)
 8000432:	f000 fd87 	bl	8000f44 <HAL_ADC_Start>
					HAL_ADC_PollForConversion(&hadc1, 100);
 8000436:	2164      	movs	r1, #100	@ 0x64
 8000438:	481d      	ldr	r0, [pc, #116]	@ (80004b0 <handleAdcGetCommand+0x100>)
 800043a:	f000 fe31 	bl	80010a0 <HAL_ADC_PollForConversion>
					uint32_t value = HAL_ADC_GetValue(&hadc1);
 800043e:	481c      	ldr	r0, [pc, #112]	@ (80004b0 <handleAdcGetCommand+0x100>)
 8000440:	f000 ff34 	bl	80012ac <HAL_ADC_GetValue>
 8000444:	61b8      	str	r0, [r7, #24]

					snprintf(msg, sizeof(msg), "\r\nADC Value (PA%d): %lu", pins[i], value);
 8000446:	4a19      	ldr	r2, [pc, #100]	@ (80004ac <handleAdcGetCommand+0xfc>)
 8000448:	69fb      	ldr	r3, [r7, #28]
 800044a:	4413      	add	r3, r2
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	461a      	mov	r2, r3
 8000450:	69bb      	ldr	r3, [r7, #24]
 8000452:	9300      	str	r3, [sp, #0]
 8000454:	4613      	mov	r3, r2
 8000456:	4a1b      	ldr	r2, [pc, #108]	@ (80004c4 <handleAdcGetCommand+0x114>)
 8000458:	2132      	movs	r1, #50	@ 0x32
 800045a:	481b      	ldr	r0, [pc, #108]	@ (80004c8 <handleAdcGetCommand+0x118>)
 800045c:	f003 fd36 	bl	8003ecc <sniprintf>
					HAL_UART_Transmit(&uart1.huart, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000460:	4819      	ldr	r0, [pc, #100]	@ (80004c8 <handleAdcGetCommand+0x118>)
 8000462:	f7ff fe7d 	bl	8000160 <strlen>
 8000466:	4603      	mov	r3, r0
 8000468:	b29a      	uxth	r2, r3
 800046a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800046e:	4916      	ldr	r1, [pc, #88]	@ (80004c8 <handleAdcGetCommand+0x118>)
 8000470:	4811      	ldr	r0, [pc, #68]	@ (80004b8 <handleAdcGetCommand+0x108>)
 8000472:	f002 fb5f 	bl	8002b34 <HAL_UART_Transmit>
					previous_time = HAL_GetTick();
 8000476:	f000 fc83 	bl	8000d80 <HAL_GetTick>
 800047a:	4603      	mov	r3, r0
 800047c:	4a10      	ldr	r2, [pc, #64]	@ (80004c0 <handleAdcGetCommand+0x110>)
 800047e:	6013      	str	r3, [r2, #0]
			while(Setstop){
 8000480:	4b0e      	ldr	r3, [pc, #56]	@ (80004bc <handleAdcGetCommand+0x10c>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	b2db      	uxtb	r3, r3
 8000486:	2b00      	cmp	r3, #0
 8000488:	d1c9      	bne.n	800041e <handleAdcGetCommand+0x6e>
		if (pins[i]==0||pins[i] ==1){
 800048a:	e003      	b.n	8000494 <handleAdcGetCommand+0xe4>
				}
			}
		} else {
			UART_SendString(&uart1.huart, "\r\nError: Invalid pin. Only PA0 and PA1 are allowed.");
 800048c:	490f      	ldr	r1, [pc, #60]	@ (80004cc <handleAdcGetCommand+0x11c>)
 800048e:	480a      	ldr	r0, [pc, #40]	@ (80004b8 <handleAdcGetCommand+0x108>)
 8000490:	f003 fa89 	bl	80039a6 <UART_SendString>
    for(int i; i< count; i++){
 8000494:	69fb      	ldr	r3, [r7, #28]
 8000496:	3301      	adds	r3, #1
 8000498:	61fb      	str	r3, [r7, #28]
 800049a:	4b0d      	ldr	r3, [pc, #52]	@ (80004d0 <handleAdcGetCommand+0x120>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	69fa      	ldr	r2, [r7, #28]
 80004a0:	429a      	cmp	r2, r3
 80004a2:	db90      	blt.n	80003c6 <handleAdcGetCommand+0x16>
		}
    }
}
 80004a4:	3720      	adds	r7, #32
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	20000228 	.word	0x20000228
 80004b0:	200002c8 	.word	0x200002c8
 80004b4:	08005170 	.word	0x08005170
 80004b8:	2000004c 	.word	0x2000004c
 80004bc:	200003d4 	.word	0x200003d4
 80004c0:	200002c4 	.word	0x200002c4
 80004c4:	0800519c 	.word	0x0800519c
 80004c8:	2000022c 	.word	0x2000022c
 80004cc:	080051b4 	.word	0x080051b4
 80004d0:	20000224 	.word	0x20000224

080004d4 <handleInfoCommand>:
void handleInfoCommand(char *args) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	if (args != NULL) {
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d011      	beq.n	8000506 <handleInfoCommand+0x32>
		snprintf(response, sizeof(response), "\r\nSample text: %s", args);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4a0d      	ldr	r2, [pc, #52]	@ (800051c <handleInfoCommand+0x48>)
 80004e6:	2164      	movs	r1, #100	@ 0x64
 80004e8:	480d      	ldr	r0, [pc, #52]	@ (8000520 <handleInfoCommand+0x4c>)
 80004ea:	f003 fcef 	bl	8003ecc <sniprintf>
		HAL_UART_Transmit(&uart1.huart, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
 80004ee:	480c      	ldr	r0, [pc, #48]	@ (8000520 <handleInfoCommand+0x4c>)
 80004f0:	f7ff fe36 	bl	8000160 <strlen>
 80004f4:	4603      	mov	r3, r0
 80004f6:	b29a      	uxth	r2, r3
 80004f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004fc:	4908      	ldr	r1, [pc, #32]	@ (8000520 <handleInfoCommand+0x4c>)
 80004fe:	4809      	ldr	r0, [pc, #36]	@ (8000524 <handleInfoCommand+0x50>)
 8000500:	f002 fb18 	bl	8002b34 <HAL_UART_Transmit>
	} else {
		HAL_UART_Transmit(&uart1.huart, (uint8_t*)"Sample text: \r\n", 15, HAL_MAX_DELAY);
	}
}
 8000504:	e006      	b.n	8000514 <handleInfoCommand+0x40>
		HAL_UART_Transmit(&uart1.huart, (uint8_t*)"Sample text: \r\n", 15, HAL_MAX_DELAY);
 8000506:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800050a:	220f      	movs	r2, #15
 800050c:	4906      	ldr	r1, [pc, #24]	@ (8000528 <handleInfoCommand+0x54>)
 800050e:	4805      	ldr	r0, [pc, #20]	@ (8000524 <handleInfoCommand+0x50>)
 8000510:	f002 fb10 	bl	8002b34 <HAL_UART_Transmit>
}
 8000514:	bf00      	nop
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	080051e8 	.word	0x080051e8
 8000520:	20000260 	.word	0x20000260
 8000524:	2000004c 	.word	0x2000004c
 8000528:	080051fc 	.word	0x080051fc

0800052c <handleInvalidCommand>:
void handleInvalidCommand(char *args) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
    UART_SendString(&uart1.huart, "\n\rInvalid Command");
 8000534:	4904      	ldr	r1, [pc, #16]	@ (8000548 <handleInvalidCommand+0x1c>)
 8000536:	4805      	ldr	r0, [pc, #20]	@ (800054c <handleInvalidCommand+0x20>)
 8000538:	f003 fa35 	bl	80039a6 <UART_SendString>
    prompt();
 800053c:	f003 fb70 	bl	8003c20 <prompt>
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	0800520c 	.word	0x0800520c
 800054c:	2000004c 	.word	0x2000004c

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000554:	f000 fbbc 	bl	8000cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000558:	f000 f80e 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055c:	f000 f91e 	bl	800079c <MX_GPIO_Init>
  MX_DMA_Init();
 8000560:	f000 f8fe 	bl	8000760 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000564:	f000 f8a8 	bl	80006b8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000568:	f000 f8d0 	bl	800070c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800056c:	f000 f856 	bl	800061c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  main_loop();
 8000570:	f7ff fdfe 	bl	8000170 <main_loop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <main+0x24>

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	@ 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000582:	2228      	movs	r2, #40	@ 0x28
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f003 fd17 	bl	8003fba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a8:	2302      	movs	r3, #2
 80005aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ac:	2301      	movs	r3, #1
 80005ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b0:	2310      	movs	r3, #16
 80005b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b4:	2300      	movs	r3, #0
 80005b6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 fced 	bl	8001f9c <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x54>
  {
    Error_Handler();
 80005c8:	f000 f928 	bl	800081c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	230f      	movs	r3, #15
 80005ce:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005dc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 ff59 	bl	80024a0 <HAL_RCC_ClockConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005f4:	f000 f912 	bl	800081c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005f8:	2302      	movs	r3, #2
 80005fa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	4618      	mov	r0, r3
 8000604:	f002 f8da 	bl	80027bc <HAL_RCCEx_PeriphCLKConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800060e:	f000 f905 	bl	800081c <Error_Handler>
  }
}
 8000612:	bf00      	nop
 8000614:	3750      	adds	r7, #80	@ 0x50
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800062c:	4b20      	ldr	r3, [pc, #128]	@ (80006b0 <MX_ADC1_Init+0x94>)
 800062e:	4a21      	ldr	r2, [pc, #132]	@ (80006b4 <MX_ADC1_Init+0x98>)
 8000630:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000632:	4b1f      	ldr	r3, [pc, #124]	@ (80006b0 <MX_ADC1_Init+0x94>)
 8000634:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000638:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800063a:	4b1d      	ldr	r3, [pc, #116]	@ (80006b0 <MX_ADC1_Init+0x94>)
 800063c:	2200      	movs	r2, #0
 800063e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000640:	4b1b      	ldr	r3, [pc, #108]	@ (80006b0 <MX_ADC1_Init+0x94>)
 8000642:	2200      	movs	r2, #0
 8000644:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000646:	4b1a      	ldr	r3, [pc, #104]	@ (80006b0 <MX_ADC1_Init+0x94>)
 8000648:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800064c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800064e:	4b18      	ldr	r3, [pc, #96]	@ (80006b0 <MX_ADC1_Init+0x94>)
 8000650:	2200      	movs	r2, #0
 8000652:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000654:	4b16      	ldr	r3, [pc, #88]	@ (80006b0 <MX_ADC1_Init+0x94>)
 8000656:	2202      	movs	r2, #2
 8000658:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800065a:	4815      	ldr	r0, [pc, #84]	@ (80006b0 <MX_ADC1_Init+0x94>)
 800065c:	f000 fb9a 	bl	8000d94 <HAL_ADC_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000666:	f000 f8d9 	bl	800081c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800066a:	2300      	movs	r3, #0
 800066c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800066e:	2301      	movs	r3, #1
 8000670:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	4619      	mov	r1, r3
 800067a:	480d      	ldr	r0, [pc, #52]	@ (80006b0 <MX_ADC1_Init+0x94>)
 800067c:	f000 fe22 	bl	80012c4 <HAL_ADC_ConfigChannel>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000686:	f000 f8c9 	bl	800081c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800068a:	2301      	movs	r3, #1
 800068c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800068e:	2302      	movs	r3, #2
 8000690:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	4619      	mov	r1, r3
 8000696:	4806      	ldr	r0, [pc, #24]	@ (80006b0 <MX_ADC1_Init+0x94>)
 8000698:	f000 fe14 	bl	80012c4 <HAL_ADC_ConfigChannel>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80006a2:	f000 f8bb 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200002c8 	.word	0x200002c8
 80006b4:	40012400 	.word	0x40012400

080006b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006bc:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <MX_USART1_UART_Init+0x4c>)
 80006be:	4a12      	ldr	r2, [pc, #72]	@ (8000708 <MX_USART1_UART_Init+0x50>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006c2:	4b10      	ldr	r3, [pc, #64]	@ (8000704 <MX_USART1_UART_Init+0x4c>)
 80006c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <MX_USART1_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <MX_USART1_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000704 <MX_USART1_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <MX_USART1_UART_Init+0x4c>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	@ (8000704 <MX_USART1_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <MX_USART1_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	@ (8000704 <MX_USART1_UART_Init+0x4c>)
 80006f0:	f002 f9d0 	bl	8002a94 <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006fa:	f000 f88f 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	2000033c 	.word	0x2000033c
 8000708:	40013800 	.word	0x40013800

0800070c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000710:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <MX_USART2_UART_Init+0x4c>)
 8000712:	4a12      	ldr	r2, [pc, #72]	@ (800075c <MX_USART2_UART_Init+0x50>)
 8000714:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000716:	4b10      	ldr	r3, [pc, #64]	@ (8000758 <MX_USART2_UART_Init+0x4c>)
 8000718:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800071c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b0e      	ldr	r3, [pc, #56]	@ (8000758 <MX_USART2_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <MX_USART2_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	@ (8000758 <MX_USART2_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <MX_USART2_UART_Init+0x4c>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b08      	ldr	r3, [pc, #32]	@ (8000758 <MX_USART2_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <MX_USART2_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	@ (8000758 <MX_USART2_UART_Init+0x4c>)
 8000744:	f002 f9a6 	bl	8002a94 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800074e:	f000 f865 	bl	800081c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000384 	.word	0x20000384
 800075c:	40004400 	.word	0x40004400

08000760 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000766:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <MX_DMA_Init+0x38>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	4a0b      	ldr	r2, [pc, #44]	@ (8000798 <MX_DMA_Init+0x38>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6153      	str	r3, [r2, #20]
 8000772:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <MX_DMA_Init+0x38>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	2100      	movs	r1, #0
 8000782:	200b      	movs	r0, #11
 8000784:	f001 f809 	bl	800179a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000788:	200b      	movs	r0, #11
 800078a:	f001 f822 	bl	80017d2 <HAL_NVIC_EnableIRQ>

}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40021000 	.word	0x40021000

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 0308 	add.w	r3, r7, #8
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b0:	4b18      	ldr	r3, [pc, #96]	@ (8000814 <MX_GPIO_Init+0x78>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	4a17      	ldr	r2, [pc, #92]	@ (8000814 <MX_GPIO_Init+0x78>)
 80007b6:	f043 0320 	orr.w	r3, r3, #32
 80007ba:	6193      	str	r3, [r2, #24]
 80007bc:	4b15      	ldr	r3, [pc, #84]	@ (8000814 <MX_GPIO_Init+0x78>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f003 0320 	and.w	r3, r3, #32
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c8:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <MX_GPIO_Init+0x78>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a11      	ldr	r2, [pc, #68]	@ (8000814 <MX_GPIO_Init+0x78>)
 80007ce:	f043 0304 	orr.w	r3, r3, #4
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <MX_GPIO_Init+0x78>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f003 0304 	and.w	r3, r3, #4
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80007e0:	2200      	movs	r2, #0
 80007e2:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 80007e6:	480c      	ldr	r0, [pc, #48]	@ (8000818 <MX_GPIO_Init+0x7c>)
 80007e8:	f001 fba6 	bl	8001f38 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80007ec:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 80007f0:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2302      	movs	r3, #2
 80007fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	f107 0308 	add.w	r3, r7, #8
 8000802:	4619      	mov	r1, r3
 8000804:	4804      	ldr	r0, [pc, #16]	@ (8000818 <MX_GPIO_Init+0x7c>)
 8000806:	f001 fa13 	bl	8001c30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800080a:	bf00      	nop
 800080c:	3718      	adds	r7, #24
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40021000 	.word	0x40021000
 8000818:	40010800 	.word	0x40010800

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000820:	b672      	cpsid	i
}
 8000822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <Error_Handler+0x8>

08000828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800082e:	4b15      	ldr	r3, [pc, #84]	@ (8000884 <HAL_MspInit+0x5c>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	4a14      	ldr	r2, [pc, #80]	@ (8000884 <HAL_MspInit+0x5c>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6193      	str	r3, [r2, #24]
 800083a:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <HAL_MspInit+0x5c>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <HAL_MspInit+0x5c>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	4a0e      	ldr	r2, [pc, #56]	@ (8000884 <HAL_MspInit+0x5c>)
 800084c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000850:	61d3      	str	r3, [r2, #28]
 8000852:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <HAL_MspInit+0x5c>)
 8000854:	69db      	ldr	r3, [r3, #28]
 8000856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800085e:	4b0a      	ldr	r3, [pc, #40]	@ (8000888 <HAL_MspInit+0x60>)
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	4a04      	ldr	r2, [pc, #16]	@ (8000888 <HAL_MspInit+0x60>)
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	bf00      	nop
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	40021000 	.word	0x40021000
 8000888:	40010000 	.word	0x40010000

0800088c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0310 	add.w	r3, r7, #16
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a28      	ldr	r2, [pc, #160]	@ (8000948 <HAL_ADC_MspInit+0xbc>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d149      	bne.n	8000940 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008ac:	4b27      	ldr	r3, [pc, #156]	@ (800094c <HAL_ADC_MspInit+0xc0>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	4a26      	ldr	r2, [pc, #152]	@ (800094c <HAL_ADC_MspInit+0xc0>)
 80008b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008b6:	6193      	str	r3, [r2, #24]
 80008b8:	4b24      	ldr	r3, [pc, #144]	@ (800094c <HAL_ADC_MspInit+0xc0>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c4:	4b21      	ldr	r3, [pc, #132]	@ (800094c <HAL_ADC_MspInit+0xc0>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	4a20      	ldr	r2, [pc, #128]	@ (800094c <HAL_ADC_MspInit+0xc0>)
 80008ca:	f043 0304 	orr.w	r3, r3, #4
 80008ce:	6193      	str	r3, [r2, #24]
 80008d0:	4b1e      	ldr	r3, [pc, #120]	@ (800094c <HAL_ADC_MspInit+0xc0>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f003 0304 	and.w	r3, r3, #4
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008dc:	2303      	movs	r3, #3
 80008de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e0:	2303      	movs	r3, #3
 80008e2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e4:	f107 0310 	add.w	r3, r7, #16
 80008e8:	4619      	mov	r1, r3
 80008ea:	4819      	ldr	r0, [pc, #100]	@ (8000950 <HAL_ADC_MspInit+0xc4>)
 80008ec:	f001 f9a0 	bl	8001c30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80008f0:	4b18      	ldr	r3, [pc, #96]	@ (8000954 <HAL_ADC_MspInit+0xc8>)
 80008f2:	4a19      	ldr	r2, [pc, #100]	@ (8000958 <HAL_ADC_MspInit+0xcc>)
 80008f4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008f6:	4b17      	ldr	r3, [pc, #92]	@ (8000954 <HAL_ADC_MspInit+0xc8>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008fc:	4b15      	ldr	r3, [pc, #84]	@ (8000954 <HAL_ADC_MspInit+0xc8>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000902:	4b14      	ldr	r3, [pc, #80]	@ (8000954 <HAL_ADC_MspInit+0xc8>)
 8000904:	2280      	movs	r2, #128	@ 0x80
 8000906:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000908:	4b12      	ldr	r3, [pc, #72]	@ (8000954 <HAL_ADC_MspInit+0xc8>)
 800090a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800090e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000910:	4b10      	ldr	r3, [pc, #64]	@ (8000954 <HAL_ADC_MspInit+0xc8>)
 8000912:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000916:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000918:	4b0e      	ldr	r3, [pc, #56]	@ (8000954 <HAL_ADC_MspInit+0xc8>)
 800091a:	2220      	movs	r2, #32
 800091c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800091e:	4b0d      	ldr	r3, [pc, #52]	@ (8000954 <HAL_ADC_MspInit+0xc8>)
 8000920:	2200      	movs	r2, #0
 8000922:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000924:	480b      	ldr	r0, [pc, #44]	@ (8000954 <HAL_ADC_MspInit+0xc8>)
 8000926:	f000 ff6f 	bl	8001808 <HAL_DMA_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000930:	f7ff ff74 	bl	800081c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4a07      	ldr	r2, [pc, #28]	@ (8000954 <HAL_ADC_MspInit+0xc8>)
 8000938:	621a      	str	r2, [r3, #32]
 800093a:	4a06      	ldr	r2, [pc, #24]	@ (8000954 <HAL_ADC_MspInit+0xc8>)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000940:	bf00      	nop
 8000942:	3720      	adds	r7, #32
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40012400 	.word	0x40012400
 800094c:	40021000 	.word	0x40021000
 8000950:	40010800 	.word	0x40010800
 8000954:	200002f8 	.word	0x200002f8
 8000958:	40020008 	.word	0x40020008

0800095c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	@ 0x28
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 0318 	add.w	r3, r7, #24
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a3b      	ldr	r2, [pc, #236]	@ (8000a64 <HAL_UART_MspInit+0x108>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d13a      	bne.n	80009f2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800097c:	4b3a      	ldr	r3, [pc, #232]	@ (8000a68 <HAL_UART_MspInit+0x10c>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	4a39      	ldr	r2, [pc, #228]	@ (8000a68 <HAL_UART_MspInit+0x10c>)
 8000982:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000986:	6193      	str	r3, [r2, #24]
 8000988:	4b37      	ldr	r3, [pc, #220]	@ (8000a68 <HAL_UART_MspInit+0x10c>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000994:	4b34      	ldr	r3, [pc, #208]	@ (8000a68 <HAL_UART_MspInit+0x10c>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	4a33      	ldr	r2, [pc, #204]	@ (8000a68 <HAL_UART_MspInit+0x10c>)
 800099a:	f043 0304 	orr.w	r3, r3, #4
 800099e:	6193      	str	r3, [r2, #24]
 80009a0:	4b31      	ldr	r3, [pc, #196]	@ (8000a68 <HAL_UART_MspInit+0x10c>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	2302      	movs	r3, #2
 80009b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b6:	2303      	movs	r3, #3
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	f107 0318 	add.w	r3, r7, #24
 80009be:	4619      	mov	r1, r3
 80009c0:	482a      	ldr	r0, [pc, #168]	@ (8000a6c <HAL_UART_MspInit+0x110>)
 80009c2:	f001 f935 	bl	8001c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	f107 0318 	add.w	r3, r7, #24
 80009d8:	4619      	mov	r1, r3
 80009da:	4824      	ldr	r0, [pc, #144]	@ (8000a6c <HAL_UART_MspInit+0x110>)
 80009dc:	f001 f928 	bl	8001c30 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2101      	movs	r1, #1
 80009e4:	2025      	movs	r0, #37	@ 0x25
 80009e6:	f000 fed8 	bl	800179a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009ea:	2025      	movs	r0, #37	@ 0x25
 80009ec:	f000 fef1 	bl	80017d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009f0:	e034      	b.n	8000a5c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000a70 <HAL_UART_MspInit+0x114>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d12f      	bne.n	8000a5c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a68 <HAL_UART_MspInit+0x10c>)
 80009fe:	69db      	ldr	r3, [r3, #28]
 8000a00:	4a19      	ldr	r2, [pc, #100]	@ (8000a68 <HAL_UART_MspInit+0x10c>)
 8000a02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a06:	61d3      	str	r3, [r2, #28]
 8000a08:	4b17      	ldr	r3, [pc, #92]	@ (8000a68 <HAL_UART_MspInit+0x10c>)
 8000a0a:	69db      	ldr	r3, [r3, #28]
 8000a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a14:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <HAL_UART_MspInit+0x10c>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	4a13      	ldr	r2, [pc, #76]	@ (8000a68 <HAL_UART_MspInit+0x10c>)
 8000a1a:	f043 0304 	orr.w	r3, r3, #4
 8000a1e:	6193      	str	r3, [r2, #24]
 8000a20:	4b11      	ldr	r3, [pc, #68]	@ (8000a68 <HAL_UART_MspInit+0x10c>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f003 0304 	and.w	r3, r3, #4
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a34:	2303      	movs	r3, #3
 8000a36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a38:	f107 0318 	add.w	r3, r7, #24
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480b      	ldr	r0, [pc, #44]	@ (8000a6c <HAL_UART_MspInit+0x110>)
 8000a40:	f001 f8f6 	bl	8001c30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a44:	2308      	movs	r3, #8
 8000a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a50:	f107 0318 	add.w	r3, r7, #24
 8000a54:	4619      	mov	r1, r3
 8000a56:	4805      	ldr	r0, [pc, #20]	@ (8000a6c <HAL_UART_MspInit+0x110>)
 8000a58:	f001 f8ea 	bl	8001c30 <HAL_GPIO_Init>
}
 8000a5c:	bf00      	nop
 8000a5e:	3728      	adds	r7, #40	@ 0x28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40013800 	.word	0x40013800
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	40010800 	.word	0x40010800
 8000a70:	40004400 	.word	0x40004400

08000a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <NMI_Handler+0x4>

08000a7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <HardFault_Handler+0x4>

08000a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <MemManage_Handler+0x4>

08000a8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr

08000aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr

08000ab4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr

08000ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac4:	f000 f94a 	bl	8000d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}

08000acc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ad0:	4802      	ldr	r0, [pc, #8]	@ (8000adc <DMA1_Channel1_IRQHandler+0x10>)
 8000ad2:	f000 ffa7 	bl	8001a24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200002f8 	.word	0x200002f8

08000ae0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&uart1.huart);
 8000ae4:	4802      	ldr	r0, [pc, #8]	@ (8000af0 <USART1_IRQHandler+0x10>)
 8000ae6:	f002 f8cd 	bl	8002c84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	2000004c 	.word	0x2000004c

08000af4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return 1;
 8000af8:	2301      	movs	r3, #1
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr

08000b02 <_kill>:

int _kill(int pid, int sig)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b082      	sub	sp, #8
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
 8000b0a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b0c:	f003 fb00 	bl	8004110 <__errno>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2216      	movs	r2, #22
 8000b14:	601a      	str	r2, [r3, #0]
  return -1;
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <_exit>:

void _exit (int status)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b2a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f7ff ffe7 	bl	8000b02 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <_exit+0x12>

08000b38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	e00a      	b.n	8000b60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b4a:	f3af 8000 	nop.w
 8000b4e:	4601      	mov	r1, r0
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	1c5a      	adds	r2, r3, #1
 8000b54:	60ba      	str	r2, [r7, #8]
 8000b56:	b2ca      	uxtb	r2, r1
 8000b58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	697a      	ldr	r2, [r7, #20]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	dbf0      	blt.n	8000b4a <_read+0x12>
  }

  return len;
 8000b68:	687b      	ldr	r3, [r7, #4]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b086      	sub	sp, #24
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	60f8      	str	r0, [r7, #12]
 8000b7a:	60b9      	str	r1, [r7, #8]
 8000b7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	e009      	b.n	8000b98 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	1c5a      	adds	r2, r3, #1
 8000b88:	60ba      	str	r2, [r7, #8]
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	3301      	adds	r3, #1
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	697a      	ldr	r2, [r7, #20]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	dbf1      	blt.n	8000b84 <_write+0x12>
  }
  return len;
 8000ba0:	687b      	ldr	r3, [r7, #4]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <_close>:

int _close(int file)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr

08000bc0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bd0:	605a      	str	r2, [r3, #4]
  return 0;
 8000bd2:	2300      	movs	r3, #0
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr

08000bde <_isatty>:

int _isatty(int file)
{
 8000bde:	b480      	push	{r7}
 8000be0:	b083      	sub	sp, #12
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000be6:	2301      	movs	r3, #1
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr

08000bf2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	b085      	sub	sp, #20
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	60f8      	str	r0, [r7, #12]
 8000bfa:	60b9      	str	r1, [r7, #8]
 8000bfc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bfe:	2300      	movs	r3, #0
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr
	...

08000c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c14:	4a14      	ldr	r2, [pc, #80]	@ (8000c68 <_sbrk+0x5c>)
 8000c16:	4b15      	ldr	r3, [pc, #84]	@ (8000c6c <_sbrk+0x60>)
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c20:	4b13      	ldr	r3, [pc, #76]	@ (8000c70 <_sbrk+0x64>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d102      	bne.n	8000c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c28:	4b11      	ldr	r3, [pc, #68]	@ (8000c70 <_sbrk+0x64>)
 8000c2a:	4a12      	ldr	r2, [pc, #72]	@ (8000c74 <_sbrk+0x68>)
 8000c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2e:	4b10      	ldr	r3, [pc, #64]	@ (8000c70 <_sbrk+0x64>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d207      	bcs.n	8000c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c3c:	f003 fa68 	bl	8004110 <__errno>
 8000c40:	4603      	mov	r3, r0
 8000c42:	220c      	movs	r2, #12
 8000c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c4a:	e009      	b.n	8000c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c4c:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <_sbrk+0x64>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c52:	4b07      	ldr	r3, [pc, #28]	@ (8000c70 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	4a05      	ldr	r2, [pc, #20]	@ (8000c70 <_sbrk+0x64>)
 8000c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20005000 	.word	0x20005000
 8000c6c:	00000400 	.word	0x00000400
 8000c70:	200003cc 	.word	0x200003cc
 8000c74:	20000628 	.word	0x20000628

08000c78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr

08000c84 <Reset_Handler>:
Reset_Handler:

/* Call the clock system initialization function.*/


    bl  SystemInit
 8000c84:	f7ff fff8 	bl	8000c78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c88:	480b      	ldr	r0, [pc, #44]	@ (8000cb8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c8a:	490c      	ldr	r1, [pc, #48]	@ (8000cbc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8000cc0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c90:	e002      	b.n	8000c98 <LoopCopyDataInit>

08000c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c96:	3304      	adds	r3, #4

08000c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c9c:	d3f9      	bcc.n	8000c92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9e:	4a09      	ldr	r2, [pc, #36]	@ (8000cc4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ca0:	4c09      	ldr	r4, [pc, #36]	@ (8000cc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca4:	e001      	b.n	8000caa <LoopFillZerobss>

08000ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca8:	3204      	adds	r2, #4

08000caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cac:	d3fb      	bcc.n	8000ca6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cae:	f003 fa35 	bl	800411c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cb2:	f7ff fc4d 	bl	8000550 <main>
  bx lr
 8000cb6:	4770      	bx	lr
  ldr r0, =_sdata
 8000cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cbc:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8000cc0:	080054e0 	.word	0x080054e0
  ldr r2, =_sbss
 8000cc4:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8000cc8:	20000628 	.word	0x20000628

08000ccc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ccc:	e7fe      	b.n	8000ccc <ADC1_2_IRQHandler>
	...

08000cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd4:	4b08      	ldr	r3, [pc, #32]	@ (8000cf8 <HAL_Init+0x28>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a07      	ldr	r2, [pc, #28]	@ (8000cf8 <HAL_Init+0x28>)
 8000cda:	f043 0310 	orr.w	r3, r3, #16
 8000cde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce0:	2003      	movs	r0, #3
 8000ce2:	f000 fd4f 	bl	8001784 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce6:	200f      	movs	r0, #15
 8000ce8:	f000 f808 	bl	8000cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cec:	f7ff fd9c 	bl	8000828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40022000 	.word	0x40022000

08000cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <HAL_InitTick+0x54>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b12      	ldr	r3, [pc, #72]	@ (8000d54 <HAL_InitTick+0x58>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 fd67 	bl	80017ee <HAL_SYSTICK_Config>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00e      	b.n	8000d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b0f      	cmp	r3, #15
 8000d2e:	d80a      	bhi.n	8000d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d30:	2200      	movs	r2, #0
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d38:	f000 fd2f 	bl	800179a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d3c:	4a06      	ldr	r2, [pc, #24]	@ (8000d58 <HAL_InitTick+0x5c>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e000      	b.n	8000d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000040 	.word	0x20000040
 8000d54:	20000048 	.word	0x20000048
 8000d58:	20000044 	.word	0x20000044

08000d5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d60:	4b05      	ldr	r3, [pc, #20]	@ (8000d78 <HAL_IncTick+0x1c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b05      	ldr	r3, [pc, #20]	@ (8000d7c <HAL_IncTick+0x20>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4a03      	ldr	r2, [pc, #12]	@ (8000d7c <HAL_IncTick+0x20>)
 8000d6e:	6013      	str	r3, [r2, #0]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr
 8000d78:	20000048 	.word	0x20000048
 8000d7c:	200003d0 	.word	0x200003d0

08000d80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return uwTick;
 8000d84:	4b02      	ldr	r3, [pc, #8]	@ (8000d90 <HAL_GetTick+0x10>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr
 8000d90:	200003d0 	.word	0x200003d0

08000d94 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000da0:	2300      	movs	r3, #0
 8000da2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000da8:	2300      	movs	r3, #0
 8000daa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d101      	bne.n	8000db6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e0be      	b.n	8000f34 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d109      	bne.n	8000dd8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff fd5a 	bl	800088c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f000 fbc5 	bl	8001568 <ADC_ConversionStop_Disable>
 8000dde:	4603      	mov	r3, r0
 8000de0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000de6:	f003 0310 	and.w	r3, r3, #16
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f040 8099 	bne.w	8000f22 <HAL_ADC_Init+0x18e>
 8000df0:	7dfb      	ldrb	r3, [r7, #23]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8095 	bne.w	8000f22 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dfc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000e00:	f023 0302 	bic.w	r3, r3, #2
 8000e04:	f043 0202 	orr.w	r2, r3, #2
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e14:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	7b1b      	ldrb	r3, [r3, #12]
 8000e1a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e1c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e2c:	d003      	beq.n	8000e36 <HAL_ADC_Init+0xa2>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d102      	bne.n	8000e3c <HAL_ADC_Init+0xa8>
 8000e36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e3a:	e000      	b.n	8000e3e <HAL_ADC_Init+0xaa>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	7d1b      	ldrb	r3, [r3, #20]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d119      	bne.n	8000e80 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	7b1b      	ldrb	r3, [r3, #12]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d109      	bne.n	8000e68 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	035a      	lsls	r2, r3, #13
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	e00b      	b.n	8000e80 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e6c:	f043 0220 	orr.w	r2, r3, #32
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e78:	f043 0201 	orr.w	r2, r3, #1
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	430a      	orrs	r2, r1
 8000e92:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	689a      	ldr	r2, [r3, #8]
 8000e9a:	4b28      	ldr	r3, [pc, #160]	@ (8000f3c <HAL_ADC_Init+0x1a8>)
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	6812      	ldr	r2, [r2, #0]
 8000ea2:	68b9      	ldr	r1, [r7, #8]
 8000ea4:	430b      	orrs	r3, r1
 8000ea6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000eb0:	d003      	beq.n	8000eba <HAL_ADC_Init+0x126>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d104      	bne.n	8000ec4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	691b      	ldr	r3, [r3, #16]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	051b      	lsls	r3, r3, #20
 8000ec2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eca:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	689a      	ldr	r2, [r3, #8]
 8000ede:	4b18      	ldr	r3, [pc, #96]	@ (8000f40 <HAL_ADC_Init+0x1ac>)
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d10b      	bne.n	8000f00 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ef2:	f023 0303 	bic.w	r3, r3, #3
 8000ef6:	f043 0201 	orr.w	r2, r3, #1
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000efe:	e018      	b.n	8000f32 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f04:	f023 0312 	bic.w	r3, r3, #18
 8000f08:	f043 0210 	orr.w	r2, r3, #16
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f14:	f043 0201 	orr.w	r2, r3, #1
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f20:	e007      	b.n	8000f32 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f26:	f043 0210 	orr.w	r2, r3, #16
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	ffe1f7fd 	.word	0xffe1f7fd
 8000f40:	ff1f0efe 	.word	0xff1f0efe

08000f44 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d101      	bne.n	8000f5e <HAL_ADC_Start+0x1a>
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	e098      	b.n	8001090 <HAL_ADC_Start+0x14c>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2201      	movs	r2, #1
 8000f62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f000 faa4 	bl	80014b4 <ADC_Enable>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f040 8087 	bne.w	8001086 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000f80:	f023 0301 	bic.w	r3, r3, #1
 8000f84:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a41      	ldr	r2, [pc, #260]	@ (8001098 <HAL_ADC_Start+0x154>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d105      	bne.n	8000fa2 <HAL_ADC_Start+0x5e>
 8000f96:	4b41      	ldr	r3, [pc, #260]	@ (800109c <HAL_ADC_Start+0x158>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d115      	bne.n	8000fce <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fa6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d026      	beq.n	800100a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fc0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000fc4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fcc:	e01d      	b.n	800100a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fd2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a2f      	ldr	r2, [pc, #188]	@ (800109c <HAL_ADC_Start+0x158>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d004      	beq.n	8000fee <HAL_ADC_Start+0xaa>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a2b      	ldr	r2, [pc, #172]	@ (8001098 <HAL_ADC_Start+0x154>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d10d      	bne.n	800100a <HAL_ADC_Start+0xc6>
 8000fee:	4b2b      	ldr	r3, [pc, #172]	@ (800109c <HAL_ADC_Start+0x158>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d007      	beq.n	800100a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ffe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001002:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800100e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d006      	beq.n	8001024 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800101a:	f023 0206 	bic.w	r2, r3, #6
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001022:	e002      	b.n	800102a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f06f 0202 	mvn.w	r2, #2
 800103a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001046:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800104a:	d113      	bne.n	8001074 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001050:	4a11      	ldr	r2, [pc, #68]	@ (8001098 <HAL_ADC_Start+0x154>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d105      	bne.n	8001062 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001056:	4b11      	ldr	r3, [pc, #68]	@ (800109c <HAL_ADC_Start+0x158>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800105e:	2b00      	cmp	r3, #0
 8001060:	d108      	bne.n	8001074 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	689a      	ldr	r2, [r3, #8]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	e00c      	b.n	800108e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	689a      	ldr	r2, [r3, #8]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	e003      	b.n	800108e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800108e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40012800 	.word	0x40012800
 800109c:	40012400 	.word	0x40012400

080010a0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80010a0:	b590      	push	{r4, r7, lr}
 80010a2:	b087      	sub	sp, #28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80010b6:	f7ff fe63 	bl	8000d80 <HAL_GetTick>
 80010ba:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00b      	beq.n	80010e2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ce:	f043 0220 	orr.w	r2, r3, #32
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e0d3      	b.n	800128a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d131      	bne.n	8001154 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010f6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d12a      	bne.n	8001154 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80010fe:	e021      	b.n	8001144 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001106:	d01d      	beq.n	8001144 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d007      	beq.n	800111e <HAL_ADC_PollForConversion+0x7e>
 800110e:	f7ff fe37 	bl	8000d80 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	429a      	cmp	r2, r3
 800111c:	d212      	bcs.n	8001144 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d10b      	bne.n	8001144 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001130:	f043 0204 	orr.w	r2, r3, #4
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001140:	2303      	movs	r3, #3
 8001142:	e0a2      	b.n	800128a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d0d6      	beq.n	8001100 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001152:	e070      	b.n	8001236 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001154:	4b4f      	ldr	r3, [pc, #316]	@ (8001294 <HAL_ADC_PollForConversion+0x1f4>)
 8001156:	681c      	ldr	r4, [r3, #0]
 8001158:	2002      	movs	r0, #2
 800115a:	f001 fbe5 	bl	8002928 <HAL_RCCEx_GetPeriphCLKFreq>
 800115e:	4603      	mov	r3, r0
 8001160:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	6919      	ldr	r1, [r3, #16]
 800116a:	4b4b      	ldr	r3, [pc, #300]	@ (8001298 <HAL_ADC_PollForConversion+0x1f8>)
 800116c:	400b      	ands	r3, r1
 800116e:	2b00      	cmp	r3, #0
 8001170:	d118      	bne.n	80011a4 <HAL_ADC_PollForConversion+0x104>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	68d9      	ldr	r1, [r3, #12]
 8001178:	4b48      	ldr	r3, [pc, #288]	@ (800129c <HAL_ADC_PollForConversion+0x1fc>)
 800117a:	400b      	ands	r3, r1
 800117c:	2b00      	cmp	r3, #0
 800117e:	d111      	bne.n	80011a4 <HAL_ADC_PollForConversion+0x104>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6919      	ldr	r1, [r3, #16]
 8001186:	4b46      	ldr	r3, [pc, #280]	@ (80012a0 <HAL_ADC_PollForConversion+0x200>)
 8001188:	400b      	ands	r3, r1
 800118a:	2b00      	cmp	r3, #0
 800118c:	d108      	bne.n	80011a0 <HAL_ADC_PollForConversion+0x100>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	68d9      	ldr	r1, [r3, #12]
 8001194:	4b43      	ldr	r3, [pc, #268]	@ (80012a4 <HAL_ADC_PollForConversion+0x204>)
 8001196:	400b      	ands	r3, r1
 8001198:	2b00      	cmp	r3, #0
 800119a:	d101      	bne.n	80011a0 <HAL_ADC_PollForConversion+0x100>
 800119c:	2314      	movs	r3, #20
 800119e:	e020      	b.n	80011e2 <HAL_ADC_PollForConversion+0x142>
 80011a0:	2329      	movs	r3, #41	@ 0x29
 80011a2:	e01e      	b.n	80011e2 <HAL_ADC_PollForConversion+0x142>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	6919      	ldr	r1, [r3, #16]
 80011aa:	4b3d      	ldr	r3, [pc, #244]	@ (80012a0 <HAL_ADC_PollForConversion+0x200>)
 80011ac:	400b      	ands	r3, r1
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d106      	bne.n	80011c0 <HAL_ADC_PollForConversion+0x120>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68d9      	ldr	r1, [r3, #12]
 80011b8:	4b3a      	ldr	r3, [pc, #232]	@ (80012a4 <HAL_ADC_PollForConversion+0x204>)
 80011ba:	400b      	ands	r3, r1
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d00d      	beq.n	80011dc <HAL_ADC_PollForConversion+0x13c>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6919      	ldr	r1, [r3, #16]
 80011c6:	4b38      	ldr	r3, [pc, #224]	@ (80012a8 <HAL_ADC_PollForConversion+0x208>)
 80011c8:	400b      	ands	r3, r1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d108      	bne.n	80011e0 <HAL_ADC_PollForConversion+0x140>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	68d9      	ldr	r1, [r3, #12]
 80011d4:	4b34      	ldr	r3, [pc, #208]	@ (80012a8 <HAL_ADC_PollForConversion+0x208>)
 80011d6:	400b      	ands	r3, r1
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d101      	bne.n	80011e0 <HAL_ADC_PollForConversion+0x140>
 80011dc:	2354      	movs	r3, #84	@ 0x54
 80011de:	e000      	b.n	80011e2 <HAL_ADC_PollForConversion+0x142>
 80011e0:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80011e2:	fb02 f303 	mul.w	r3, r2, r3
 80011e6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80011e8:	e021      	b.n	800122e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011f0:	d01a      	beq.n	8001228 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d007      	beq.n	8001208 <HAL_ADC_PollForConversion+0x168>
 80011f8:	f7ff fdc2 	bl	8000d80 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d20f      	bcs.n	8001228 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	429a      	cmp	r2, r3
 800120e:	d90b      	bls.n	8001228 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001214:	f043 0204 	orr.w	r2, r3, #4
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e030      	b.n	800128a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	3301      	adds	r3, #1
 800122c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	429a      	cmp	r2, r3
 8001234:	d8d9      	bhi.n	80011ea <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f06f 0212 	mvn.w	r2, #18
 800123e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001244:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001256:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800125a:	d115      	bne.n	8001288 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001260:	2b00      	cmp	r3, #0
 8001262:	d111      	bne.n	8001288 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001268:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001274:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d105      	bne.n	8001288 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001280:	f043 0201 	orr.w	r2, r3, #1
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	371c      	adds	r7, #28
 800128e:	46bd      	mov	sp, r7
 8001290:	bd90      	pop	{r4, r7, pc}
 8001292:	bf00      	nop
 8001294:	20000040 	.word	0x20000040
 8001298:	24924924 	.word	0x24924924
 800129c:	00924924 	.word	0x00924924
 80012a0:	12492492 	.word	0x12492492
 80012a4:	00492492 	.word	0x00492492
 80012a8:	00249249 	.word	0x00249249

080012ac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr

080012c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d101      	bne.n	80012e4 <HAL_ADC_ConfigChannel+0x20>
 80012e0:	2302      	movs	r3, #2
 80012e2:	e0dc      	b.n	800149e <HAL_ADC_ConfigChannel+0x1da>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2201      	movs	r2, #1
 80012e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b06      	cmp	r3, #6
 80012f2:	d81c      	bhi.n	800132e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	4613      	mov	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	3b05      	subs	r3, #5
 8001306:	221f      	movs	r2, #31
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	4019      	ands	r1, r3
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	6818      	ldr	r0, [r3, #0]
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	3b05      	subs	r3, #5
 8001320:	fa00 f203 	lsl.w	r2, r0, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	430a      	orrs	r2, r1
 800132a:	635a      	str	r2, [r3, #52]	@ 0x34
 800132c:	e03c      	b.n	80013a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b0c      	cmp	r3, #12
 8001334:	d81c      	bhi.n	8001370 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	4613      	mov	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	3b23      	subs	r3, #35	@ 0x23
 8001348:	221f      	movs	r2, #31
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	4019      	ands	r1, r3
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	6818      	ldr	r0, [r3, #0]
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	4613      	mov	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	3b23      	subs	r3, #35	@ 0x23
 8001362:	fa00 f203 	lsl.w	r2, r0, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	430a      	orrs	r2, r1
 800136c:	631a      	str	r2, [r3, #48]	@ 0x30
 800136e:	e01b      	b.n	80013a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	3b41      	subs	r3, #65	@ 0x41
 8001382:	221f      	movs	r2, #31
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	4019      	ands	r1, r3
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	6818      	ldr	r0, [r3, #0]
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	3b41      	subs	r3, #65	@ 0x41
 800139c:	fa00 f203 	lsl.w	r2, r0, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	430a      	orrs	r2, r1
 80013a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b09      	cmp	r3, #9
 80013ae:	d91c      	bls.n	80013ea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	68d9      	ldr	r1, [r3, #12]
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	4613      	mov	r3, r2
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	4413      	add	r3, r2
 80013c0:	3b1e      	subs	r3, #30
 80013c2:	2207      	movs	r2, #7
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	4019      	ands	r1, r3
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	6898      	ldr	r0, [r3, #8]
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4613      	mov	r3, r2
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	4413      	add	r3, r2
 80013da:	3b1e      	subs	r3, #30
 80013dc:	fa00 f203 	lsl.w	r2, r0, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	60da      	str	r2, [r3, #12]
 80013e8:	e019      	b.n	800141e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6919      	ldr	r1, [r3, #16]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4613      	mov	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4413      	add	r3, r2
 80013fa:	2207      	movs	r2, #7
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	4019      	ands	r1, r3
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	6898      	ldr	r0, [r3, #8]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4613      	mov	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4413      	add	r3, r2
 8001412:	fa00 f203 	lsl.w	r2, r0, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	430a      	orrs	r2, r1
 800141c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2b10      	cmp	r3, #16
 8001424:	d003      	beq.n	800142e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800142a:	2b11      	cmp	r3, #17
 800142c:	d132      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a1d      	ldr	r2, [pc, #116]	@ (80014a8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d125      	bne.n	8001484 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d126      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001454:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b10      	cmp	r3, #16
 800145c:	d11a      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800145e:	4b13      	ldr	r3, [pc, #76]	@ (80014ac <HAL_ADC_ConfigChannel+0x1e8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a13      	ldr	r2, [pc, #76]	@ (80014b0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001464:	fba2 2303 	umull	r2, r3, r2, r3
 8001468:	0c9a      	lsrs	r2, r3, #18
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001474:	e002      	b.n	800147c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	3b01      	subs	r3, #1
 800147a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f9      	bne.n	8001476 <HAL_ADC_ConfigChannel+0x1b2>
 8001482:	e007      	b.n	8001494 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001488:	f043 0220 	orr.w	r2, r3, #32
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800149c:	7bfb      	ldrb	r3, [r7, #15]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	40012400 	.word	0x40012400
 80014ac:	20000040 	.word	0x20000040
 80014b0:	431bde83 	.word	0x431bde83

080014b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d040      	beq.n	8001554 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f042 0201 	orr.w	r2, r2, #1
 80014e0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001560 <ADC_Enable+0xac>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001564 <ADC_Enable+0xb0>)
 80014e8:	fba2 2303 	umull	r2, r3, r2, r3
 80014ec:	0c9b      	lsrs	r3, r3, #18
 80014ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014f0:	e002      	b.n	80014f8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f9      	bne.n	80014f2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014fe:	f7ff fc3f 	bl	8000d80 <HAL_GetTick>
 8001502:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001504:	e01f      	b.n	8001546 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001506:	f7ff fc3b 	bl	8000d80 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d918      	bls.n	8001546 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b01      	cmp	r3, #1
 8001520:	d011      	beq.n	8001546 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001526:	f043 0210 	orr.w	r2, r3, #16
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001532:	f043 0201 	orr.w	r2, r3, #1
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e007      	b.n	8001556 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b01      	cmp	r3, #1
 8001552:	d1d8      	bne.n	8001506 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000040 	.word	0x20000040
 8001564:	431bde83 	.word	0x431bde83

08001568 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b01      	cmp	r3, #1
 8001580:	d12e      	bne.n	80015e0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 0201 	bic.w	r2, r2, #1
 8001590:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001592:	f7ff fbf5 	bl	8000d80 <HAL_GetTick>
 8001596:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001598:	e01b      	b.n	80015d2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800159a:	f7ff fbf1 	bl	8000d80 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d914      	bls.n	80015d2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d10d      	bne.n	80015d2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ba:	f043 0210 	orr.w	r2, r3, #16
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015c6:	f043 0201 	orr.w	r2, r3, #1
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e007      	b.n	80015e2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d0dc      	beq.n	800159a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001630 <__NVIC_SetPriorityGrouping+0x44>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001602:	68ba      	ldr	r2, [r7, #8]
 8001604:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001608:	4013      	ands	r3, r2
 800160a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001614:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001618:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800161c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800161e:	4a04      	ldr	r2, [pc, #16]	@ (8001630 <__NVIC_SetPriorityGrouping+0x44>)
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	60d3      	str	r3, [r2, #12]
}
 8001624:	bf00      	nop
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001638:	4b04      	ldr	r3, [pc, #16]	@ (800164c <__NVIC_GetPriorityGrouping+0x18>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	0a1b      	lsrs	r3, r3, #8
 800163e:	f003 0307 	and.w	r3, r3, #7
}
 8001642:	4618      	mov	r0, r3
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	2b00      	cmp	r3, #0
 8001660:	db0b      	blt.n	800167a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	f003 021f 	and.w	r2, r3, #31
 8001668:	4906      	ldr	r1, [pc, #24]	@ (8001684 <__NVIC_EnableIRQ+0x34>)
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	095b      	lsrs	r3, r3, #5
 8001670:	2001      	movs	r0, #1
 8001672:	fa00 f202 	lsl.w	r2, r0, r2
 8001676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr
 8001684:	e000e100 	.word	0xe000e100

08001688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	6039      	str	r1, [r7, #0]
 8001692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001698:	2b00      	cmp	r3, #0
 800169a:	db0a      	blt.n	80016b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	490c      	ldr	r1, [pc, #48]	@ (80016d4 <__NVIC_SetPriority+0x4c>)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	0112      	lsls	r2, r2, #4
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	440b      	add	r3, r1
 80016ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b0:	e00a      	b.n	80016c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4908      	ldr	r1, [pc, #32]	@ (80016d8 <__NVIC_SetPriority+0x50>)
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	3b04      	subs	r3, #4
 80016c0:	0112      	lsls	r2, r2, #4
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	440b      	add	r3, r1
 80016c6:	761a      	strb	r2, [r3, #24]
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	e000e100 	.word	0xe000e100
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016dc:	b480      	push	{r7}
 80016de:	b089      	sub	sp, #36	@ 0x24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f1c3 0307 	rsb	r3, r3, #7
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	bf28      	it	cs
 80016fa:	2304      	movcs	r3, #4
 80016fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3304      	adds	r3, #4
 8001702:	2b06      	cmp	r3, #6
 8001704:	d902      	bls.n	800170c <NVIC_EncodePriority+0x30>
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3b03      	subs	r3, #3
 800170a:	e000      	b.n	800170e <NVIC_EncodePriority+0x32>
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001710:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43da      	mvns	r2, r3
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	401a      	ands	r2, r3
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001724:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	fa01 f303 	lsl.w	r3, r1, r3
 800172e:	43d9      	mvns	r1, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001734:	4313      	orrs	r3, r2
         );
}
 8001736:	4618      	mov	r0, r3
 8001738:	3724      	adds	r7, #36	@ 0x24
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr

08001740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3b01      	subs	r3, #1
 800174c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001750:	d301      	bcc.n	8001756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001752:	2301      	movs	r3, #1
 8001754:	e00f      	b.n	8001776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001756:	4a0a      	ldr	r2, [pc, #40]	@ (8001780 <SysTick_Config+0x40>)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3b01      	subs	r3, #1
 800175c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800175e:	210f      	movs	r1, #15
 8001760:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001764:	f7ff ff90 	bl	8001688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001768:	4b05      	ldr	r3, [pc, #20]	@ (8001780 <SysTick_Config+0x40>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800176e:	4b04      	ldr	r3, [pc, #16]	@ (8001780 <SysTick_Config+0x40>)
 8001770:	2207      	movs	r2, #7
 8001772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	e000e010 	.word	0xe000e010

08001784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff ff2d 	bl	80015ec <__NVIC_SetPriorityGrouping>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800179a:	b580      	push	{r7, lr}
 800179c:	b086      	sub	sp, #24
 800179e:	af00      	add	r7, sp, #0
 80017a0:	4603      	mov	r3, r0
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
 80017a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017ac:	f7ff ff42 	bl	8001634 <__NVIC_GetPriorityGrouping>
 80017b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	68b9      	ldr	r1, [r7, #8]
 80017b6:	6978      	ldr	r0, [r7, #20]
 80017b8:	f7ff ff90 	bl	80016dc <NVIC_EncodePriority>
 80017bc:	4602      	mov	r2, r0
 80017be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c2:	4611      	mov	r1, r2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ff5f 	bl	8001688 <__NVIC_SetPriority>
}
 80017ca:	bf00      	nop
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	4603      	mov	r3, r0
 80017da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff35 	bl	8001650 <__NVIC_EnableIRQ>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff ffa2 	bl	8001740 <SysTick_Config>
 80017fc:	4603      	mov	r3, r0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e043      	b.n	80018a6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	4b22      	ldr	r3, [pc, #136]	@ (80018b0 <HAL_DMA_Init+0xa8>)
 8001826:	4413      	add	r3, r2
 8001828:	4a22      	ldr	r2, [pc, #136]	@ (80018b4 <HAL_DMA_Init+0xac>)
 800182a:	fba2 2303 	umull	r2, r3, r2, r3
 800182e:	091b      	lsrs	r3, r3, #4
 8001830:	009a      	lsls	r2, r3, #2
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a1f      	ldr	r2, [pc, #124]	@ (80018b8 <HAL_DMA_Init+0xb0>)
 800183a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2202      	movs	r2, #2
 8001840:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001852:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001856:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001860:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800186c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001878:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	4313      	orrs	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	bffdfff8 	.word	0xbffdfff8
 80018b4:	cccccccd 	.word	0xcccccccd
 80018b8:	40020000 	.word	0x40020000

080018bc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d008      	beq.n	80018e6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2204      	movs	r2, #4
 80018d8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e020      	b.n	8001928 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 020e 	bic.w	r2, r2, #14
 80018f4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 0201 	bic.w	r2, r2, #1
 8001904:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800190e:	2101      	movs	r1, #1
 8001910:	fa01 f202 	lsl.w	r2, r1, r2
 8001914:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001926:	7bfb      	ldrb	r3, [r7, #15]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr
	...

08001934 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800193c:	2300      	movs	r3, #0
 800193e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d005      	beq.n	8001958 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2204      	movs	r2, #4
 8001950:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	73fb      	strb	r3, [r7, #15]
 8001956:	e051      	b.n	80019fc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 020e 	bic.w	r2, r2, #14
 8001966:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0201 	bic.w	r2, r2, #1
 8001976:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a22      	ldr	r2, [pc, #136]	@ (8001a08 <HAL_DMA_Abort_IT+0xd4>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d029      	beq.n	80019d6 <HAL_DMA_Abort_IT+0xa2>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a21      	ldr	r2, [pc, #132]	@ (8001a0c <HAL_DMA_Abort_IT+0xd8>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d022      	beq.n	80019d2 <HAL_DMA_Abort_IT+0x9e>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a1f      	ldr	r2, [pc, #124]	@ (8001a10 <HAL_DMA_Abort_IT+0xdc>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d01a      	beq.n	80019cc <HAL_DMA_Abort_IT+0x98>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a1e      	ldr	r2, [pc, #120]	@ (8001a14 <HAL_DMA_Abort_IT+0xe0>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d012      	beq.n	80019c6 <HAL_DMA_Abort_IT+0x92>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a1c      	ldr	r2, [pc, #112]	@ (8001a18 <HAL_DMA_Abort_IT+0xe4>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d00a      	beq.n	80019c0 <HAL_DMA_Abort_IT+0x8c>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a1b      	ldr	r2, [pc, #108]	@ (8001a1c <HAL_DMA_Abort_IT+0xe8>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d102      	bne.n	80019ba <HAL_DMA_Abort_IT+0x86>
 80019b4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80019b8:	e00e      	b.n	80019d8 <HAL_DMA_Abort_IT+0xa4>
 80019ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019be:	e00b      	b.n	80019d8 <HAL_DMA_Abort_IT+0xa4>
 80019c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019c4:	e008      	b.n	80019d8 <HAL_DMA_Abort_IT+0xa4>
 80019c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019ca:	e005      	b.n	80019d8 <HAL_DMA_Abort_IT+0xa4>
 80019cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019d0:	e002      	b.n	80019d8 <HAL_DMA_Abort_IT+0xa4>
 80019d2:	2310      	movs	r3, #16
 80019d4:	e000      	b.n	80019d8 <HAL_DMA_Abort_IT+0xa4>
 80019d6:	2301      	movs	r3, #1
 80019d8:	4a11      	ldr	r2, [pc, #68]	@ (8001a20 <HAL_DMA_Abort_IT+0xec>)
 80019da:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	4798      	blx	r3
    } 
  }
  return status;
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40020008 	.word	0x40020008
 8001a0c:	4002001c 	.word	0x4002001c
 8001a10:	40020030 	.word	0x40020030
 8001a14:	40020044 	.word	0x40020044
 8001a18:	40020058 	.word	0x40020058
 8001a1c:	4002006c 	.word	0x4002006c
 8001a20:	40020000 	.word	0x40020000

08001a24 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a40:	2204      	movs	r2, #4
 8001a42:	409a      	lsls	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4013      	ands	r3, r2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d04f      	beq.n	8001aec <HAL_DMA_IRQHandler+0xc8>
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d04a      	beq.n	8001aec <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0320 	and.w	r3, r3, #32
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d107      	bne.n	8001a74 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0204 	bic.w	r2, r2, #4
 8001a72:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a66      	ldr	r2, [pc, #408]	@ (8001c14 <HAL_DMA_IRQHandler+0x1f0>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d029      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0xae>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a65      	ldr	r2, [pc, #404]	@ (8001c18 <HAL_DMA_IRQHandler+0x1f4>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d022      	beq.n	8001ace <HAL_DMA_IRQHandler+0xaa>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a63      	ldr	r2, [pc, #396]	@ (8001c1c <HAL_DMA_IRQHandler+0x1f8>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d01a      	beq.n	8001ac8 <HAL_DMA_IRQHandler+0xa4>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a62      	ldr	r2, [pc, #392]	@ (8001c20 <HAL_DMA_IRQHandler+0x1fc>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d012      	beq.n	8001ac2 <HAL_DMA_IRQHandler+0x9e>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a60      	ldr	r2, [pc, #384]	@ (8001c24 <HAL_DMA_IRQHandler+0x200>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d00a      	beq.n	8001abc <HAL_DMA_IRQHandler+0x98>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a5f      	ldr	r2, [pc, #380]	@ (8001c28 <HAL_DMA_IRQHandler+0x204>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d102      	bne.n	8001ab6 <HAL_DMA_IRQHandler+0x92>
 8001ab0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ab4:	e00e      	b.n	8001ad4 <HAL_DMA_IRQHandler+0xb0>
 8001ab6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001aba:	e00b      	b.n	8001ad4 <HAL_DMA_IRQHandler+0xb0>
 8001abc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001ac0:	e008      	b.n	8001ad4 <HAL_DMA_IRQHandler+0xb0>
 8001ac2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ac6:	e005      	b.n	8001ad4 <HAL_DMA_IRQHandler+0xb0>
 8001ac8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001acc:	e002      	b.n	8001ad4 <HAL_DMA_IRQHandler+0xb0>
 8001ace:	2340      	movs	r3, #64	@ 0x40
 8001ad0:	e000      	b.n	8001ad4 <HAL_DMA_IRQHandler+0xb0>
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	4a55      	ldr	r2, [pc, #340]	@ (8001c2c <HAL_DMA_IRQHandler+0x208>)
 8001ad6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 8094 	beq.w	8001c0a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001aea:	e08e      	b.n	8001c0a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af0:	2202      	movs	r2, #2
 8001af2:	409a      	lsls	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4013      	ands	r3, r2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d056      	beq.n	8001baa <HAL_DMA_IRQHandler+0x186>
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d051      	beq.n	8001baa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0320 	and.w	r3, r3, #32
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d10b      	bne.n	8001b2c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 020a 	bic.w	r2, r2, #10
 8001b22:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a38      	ldr	r2, [pc, #224]	@ (8001c14 <HAL_DMA_IRQHandler+0x1f0>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d029      	beq.n	8001b8a <HAL_DMA_IRQHandler+0x166>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a37      	ldr	r2, [pc, #220]	@ (8001c18 <HAL_DMA_IRQHandler+0x1f4>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d022      	beq.n	8001b86 <HAL_DMA_IRQHandler+0x162>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a35      	ldr	r2, [pc, #212]	@ (8001c1c <HAL_DMA_IRQHandler+0x1f8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d01a      	beq.n	8001b80 <HAL_DMA_IRQHandler+0x15c>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a34      	ldr	r2, [pc, #208]	@ (8001c20 <HAL_DMA_IRQHandler+0x1fc>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d012      	beq.n	8001b7a <HAL_DMA_IRQHandler+0x156>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a32      	ldr	r2, [pc, #200]	@ (8001c24 <HAL_DMA_IRQHandler+0x200>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d00a      	beq.n	8001b74 <HAL_DMA_IRQHandler+0x150>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a31      	ldr	r2, [pc, #196]	@ (8001c28 <HAL_DMA_IRQHandler+0x204>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d102      	bne.n	8001b6e <HAL_DMA_IRQHandler+0x14a>
 8001b68:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001b6c:	e00e      	b.n	8001b8c <HAL_DMA_IRQHandler+0x168>
 8001b6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b72:	e00b      	b.n	8001b8c <HAL_DMA_IRQHandler+0x168>
 8001b74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b78:	e008      	b.n	8001b8c <HAL_DMA_IRQHandler+0x168>
 8001b7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b7e:	e005      	b.n	8001b8c <HAL_DMA_IRQHandler+0x168>
 8001b80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b84:	e002      	b.n	8001b8c <HAL_DMA_IRQHandler+0x168>
 8001b86:	2320      	movs	r3, #32
 8001b88:	e000      	b.n	8001b8c <HAL_DMA_IRQHandler+0x168>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	4a27      	ldr	r2, [pc, #156]	@ (8001c2c <HAL_DMA_IRQHandler+0x208>)
 8001b8e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d034      	beq.n	8001c0a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ba8:	e02f      	b.n	8001c0a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bae:	2208      	movs	r2, #8
 8001bb0:	409a      	lsls	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d028      	beq.n	8001c0c <HAL_DMA_IRQHandler+0x1e8>
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	f003 0308 	and.w	r3, r3, #8
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d023      	beq.n	8001c0c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 020e 	bic.w	r2, r2, #14
 8001bd2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bdc:	2101      	movs	r1, #1
 8001bde:	fa01 f202 	lsl.w	r2, r1, r2
 8001be2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d004      	beq.n	8001c0c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	4798      	blx	r3
    }
  }
  return;
 8001c0a:	bf00      	nop
 8001c0c:	bf00      	nop
}
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40020008 	.word	0x40020008
 8001c18:	4002001c 	.word	0x4002001c
 8001c1c:	40020030 	.word	0x40020030
 8001c20:	40020044 	.word	0x40020044
 8001c24:	40020058 	.word	0x40020058
 8001c28:	4002006c 	.word	0x4002006c
 8001c2c:	40020000 	.word	0x40020000

08001c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b08b      	sub	sp, #44	@ 0x2c
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c42:	e169      	b.n	8001f18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c44:	2201      	movs	r2, #1
 8001c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	69fa      	ldr	r2, [r7, #28]
 8001c54:	4013      	ands	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	f040 8158 	bne.w	8001f12 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	4a9a      	ldr	r2, [pc, #616]	@ (8001ed0 <HAL_GPIO_Init+0x2a0>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d05e      	beq.n	8001d2a <HAL_GPIO_Init+0xfa>
 8001c6c:	4a98      	ldr	r2, [pc, #608]	@ (8001ed0 <HAL_GPIO_Init+0x2a0>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d875      	bhi.n	8001d5e <HAL_GPIO_Init+0x12e>
 8001c72:	4a98      	ldr	r2, [pc, #608]	@ (8001ed4 <HAL_GPIO_Init+0x2a4>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d058      	beq.n	8001d2a <HAL_GPIO_Init+0xfa>
 8001c78:	4a96      	ldr	r2, [pc, #600]	@ (8001ed4 <HAL_GPIO_Init+0x2a4>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d86f      	bhi.n	8001d5e <HAL_GPIO_Init+0x12e>
 8001c7e:	4a96      	ldr	r2, [pc, #600]	@ (8001ed8 <HAL_GPIO_Init+0x2a8>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d052      	beq.n	8001d2a <HAL_GPIO_Init+0xfa>
 8001c84:	4a94      	ldr	r2, [pc, #592]	@ (8001ed8 <HAL_GPIO_Init+0x2a8>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d869      	bhi.n	8001d5e <HAL_GPIO_Init+0x12e>
 8001c8a:	4a94      	ldr	r2, [pc, #592]	@ (8001edc <HAL_GPIO_Init+0x2ac>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d04c      	beq.n	8001d2a <HAL_GPIO_Init+0xfa>
 8001c90:	4a92      	ldr	r2, [pc, #584]	@ (8001edc <HAL_GPIO_Init+0x2ac>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d863      	bhi.n	8001d5e <HAL_GPIO_Init+0x12e>
 8001c96:	4a92      	ldr	r2, [pc, #584]	@ (8001ee0 <HAL_GPIO_Init+0x2b0>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d046      	beq.n	8001d2a <HAL_GPIO_Init+0xfa>
 8001c9c:	4a90      	ldr	r2, [pc, #576]	@ (8001ee0 <HAL_GPIO_Init+0x2b0>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d85d      	bhi.n	8001d5e <HAL_GPIO_Init+0x12e>
 8001ca2:	2b12      	cmp	r3, #18
 8001ca4:	d82a      	bhi.n	8001cfc <HAL_GPIO_Init+0xcc>
 8001ca6:	2b12      	cmp	r3, #18
 8001ca8:	d859      	bhi.n	8001d5e <HAL_GPIO_Init+0x12e>
 8001caa:	a201      	add	r2, pc, #4	@ (adr r2, 8001cb0 <HAL_GPIO_Init+0x80>)
 8001cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb0:	08001d2b 	.word	0x08001d2b
 8001cb4:	08001d05 	.word	0x08001d05
 8001cb8:	08001d17 	.word	0x08001d17
 8001cbc:	08001d59 	.word	0x08001d59
 8001cc0:	08001d5f 	.word	0x08001d5f
 8001cc4:	08001d5f 	.word	0x08001d5f
 8001cc8:	08001d5f 	.word	0x08001d5f
 8001ccc:	08001d5f 	.word	0x08001d5f
 8001cd0:	08001d5f 	.word	0x08001d5f
 8001cd4:	08001d5f 	.word	0x08001d5f
 8001cd8:	08001d5f 	.word	0x08001d5f
 8001cdc:	08001d5f 	.word	0x08001d5f
 8001ce0:	08001d5f 	.word	0x08001d5f
 8001ce4:	08001d5f 	.word	0x08001d5f
 8001ce8:	08001d5f 	.word	0x08001d5f
 8001cec:	08001d5f 	.word	0x08001d5f
 8001cf0:	08001d5f 	.word	0x08001d5f
 8001cf4:	08001d0d 	.word	0x08001d0d
 8001cf8:	08001d21 	.word	0x08001d21
 8001cfc:	4a79      	ldr	r2, [pc, #484]	@ (8001ee4 <HAL_GPIO_Init+0x2b4>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d013      	beq.n	8001d2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d02:	e02c      	b.n	8001d5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	623b      	str	r3, [r7, #32]
          break;
 8001d0a:	e029      	b.n	8001d60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	3304      	adds	r3, #4
 8001d12:	623b      	str	r3, [r7, #32]
          break;
 8001d14:	e024      	b.n	8001d60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	3308      	adds	r3, #8
 8001d1c:	623b      	str	r3, [r7, #32]
          break;
 8001d1e:	e01f      	b.n	8001d60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	330c      	adds	r3, #12
 8001d26:	623b      	str	r3, [r7, #32]
          break;
 8001d28:	e01a      	b.n	8001d60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d102      	bne.n	8001d38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d32:	2304      	movs	r3, #4
 8001d34:	623b      	str	r3, [r7, #32]
          break;
 8001d36:	e013      	b.n	8001d60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d105      	bne.n	8001d4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d40:	2308      	movs	r3, #8
 8001d42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	69fa      	ldr	r2, [r7, #28]
 8001d48:	611a      	str	r2, [r3, #16]
          break;
 8001d4a:	e009      	b.n	8001d60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d4c:	2308      	movs	r3, #8
 8001d4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69fa      	ldr	r2, [r7, #28]
 8001d54:	615a      	str	r2, [r3, #20]
          break;
 8001d56:	e003      	b.n	8001d60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	623b      	str	r3, [r7, #32]
          break;
 8001d5c:	e000      	b.n	8001d60 <HAL_GPIO_Init+0x130>
          break;
 8001d5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	2bff      	cmp	r3, #255	@ 0xff
 8001d64:	d801      	bhi.n	8001d6a <HAL_GPIO_Init+0x13a>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	e001      	b.n	8001d6e <HAL_GPIO_Init+0x13e>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	2bff      	cmp	r3, #255	@ 0xff
 8001d74:	d802      	bhi.n	8001d7c <HAL_GPIO_Init+0x14c>
 8001d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	e002      	b.n	8001d82 <HAL_GPIO_Init+0x152>
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7e:	3b08      	subs	r3, #8
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	210f      	movs	r1, #15
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	401a      	ands	r2, r3
 8001d94:	6a39      	ldr	r1, [r7, #32]
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 80b1 	beq.w	8001f12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001db0:	4b4d      	ldr	r3, [pc, #308]	@ (8001ee8 <HAL_GPIO_Init+0x2b8>)
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	4a4c      	ldr	r2, [pc, #304]	@ (8001ee8 <HAL_GPIO_Init+0x2b8>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6193      	str	r3, [r2, #24]
 8001dbc:	4b4a      	ldr	r3, [pc, #296]	@ (8001ee8 <HAL_GPIO_Init+0x2b8>)
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001dc8:	4a48      	ldr	r2, [pc, #288]	@ (8001eec <HAL_GPIO_Init+0x2bc>)
 8001dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dcc:	089b      	lsrs	r3, r3, #2
 8001dce:	3302      	adds	r3, #2
 8001dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	220f      	movs	r2, #15
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	4013      	ands	r3, r2
 8001dea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a40      	ldr	r2, [pc, #256]	@ (8001ef0 <HAL_GPIO_Init+0x2c0>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d013      	beq.n	8001e1c <HAL_GPIO_Init+0x1ec>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a3f      	ldr	r2, [pc, #252]	@ (8001ef4 <HAL_GPIO_Init+0x2c4>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d00d      	beq.n	8001e18 <HAL_GPIO_Init+0x1e8>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a3e      	ldr	r2, [pc, #248]	@ (8001ef8 <HAL_GPIO_Init+0x2c8>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d007      	beq.n	8001e14 <HAL_GPIO_Init+0x1e4>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a3d      	ldr	r2, [pc, #244]	@ (8001efc <HAL_GPIO_Init+0x2cc>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d101      	bne.n	8001e10 <HAL_GPIO_Init+0x1e0>
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e006      	b.n	8001e1e <HAL_GPIO_Init+0x1ee>
 8001e10:	2304      	movs	r3, #4
 8001e12:	e004      	b.n	8001e1e <HAL_GPIO_Init+0x1ee>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e002      	b.n	8001e1e <HAL_GPIO_Init+0x1ee>
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e000      	b.n	8001e1e <HAL_GPIO_Init+0x1ee>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e20:	f002 0203 	and.w	r2, r2, #3
 8001e24:	0092      	lsls	r2, r2, #2
 8001e26:	4093      	lsls	r3, r2
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e2e:	492f      	ldr	r1, [pc, #188]	@ (8001eec <HAL_GPIO_Init+0x2bc>)
 8001e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e32:	089b      	lsrs	r3, r3, #2
 8001e34:	3302      	adds	r3, #2
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d006      	beq.n	8001e56 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e48:	4b2d      	ldr	r3, [pc, #180]	@ (8001f00 <HAL_GPIO_Init+0x2d0>)
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	492c      	ldr	r1, [pc, #176]	@ (8001f00 <HAL_GPIO_Init+0x2d0>)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	608b      	str	r3, [r1, #8]
 8001e54:	e006      	b.n	8001e64 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e56:	4b2a      	ldr	r3, [pc, #168]	@ (8001f00 <HAL_GPIO_Init+0x2d0>)
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	4928      	ldr	r1, [pc, #160]	@ (8001f00 <HAL_GPIO_Init+0x2d0>)
 8001e60:	4013      	ands	r3, r2
 8001e62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d006      	beq.n	8001e7e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e70:	4b23      	ldr	r3, [pc, #140]	@ (8001f00 <HAL_GPIO_Init+0x2d0>)
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	4922      	ldr	r1, [pc, #136]	@ (8001f00 <HAL_GPIO_Init+0x2d0>)
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	60cb      	str	r3, [r1, #12]
 8001e7c:	e006      	b.n	8001e8c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e7e:	4b20      	ldr	r3, [pc, #128]	@ (8001f00 <HAL_GPIO_Init+0x2d0>)
 8001e80:	68da      	ldr	r2, [r3, #12]
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	491e      	ldr	r1, [pc, #120]	@ (8001f00 <HAL_GPIO_Init+0x2d0>)
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d006      	beq.n	8001ea6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e98:	4b19      	ldr	r3, [pc, #100]	@ (8001f00 <HAL_GPIO_Init+0x2d0>)
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	4918      	ldr	r1, [pc, #96]	@ (8001f00 <HAL_GPIO_Init+0x2d0>)
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	604b      	str	r3, [r1, #4]
 8001ea4:	e006      	b.n	8001eb4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ea6:	4b16      	ldr	r3, [pc, #88]	@ (8001f00 <HAL_GPIO_Init+0x2d0>)
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	43db      	mvns	r3, r3
 8001eae:	4914      	ldr	r1, [pc, #80]	@ (8001f00 <HAL_GPIO_Init+0x2d0>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d021      	beq.n	8001f04 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8001f00 <HAL_GPIO_Init+0x2d0>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	490e      	ldr	r1, [pc, #56]	@ (8001f00 <HAL_GPIO_Init+0x2d0>)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	600b      	str	r3, [r1, #0]
 8001ecc:	e021      	b.n	8001f12 <HAL_GPIO_Init+0x2e2>
 8001ece:	bf00      	nop
 8001ed0:	10320000 	.word	0x10320000
 8001ed4:	10310000 	.word	0x10310000
 8001ed8:	10220000 	.word	0x10220000
 8001edc:	10210000 	.word	0x10210000
 8001ee0:	10120000 	.word	0x10120000
 8001ee4:	10110000 	.word	0x10110000
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40010000 	.word	0x40010000
 8001ef0:	40010800 	.word	0x40010800
 8001ef4:	40010c00 	.word	0x40010c00
 8001ef8:	40011000 	.word	0x40011000
 8001efc:	40011400 	.word	0x40011400
 8001f00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f04:	4b0b      	ldr	r3, [pc, #44]	@ (8001f34 <HAL_GPIO_Init+0x304>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	4909      	ldr	r1, [pc, #36]	@ (8001f34 <HAL_GPIO_Init+0x304>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f14:	3301      	adds	r3, #1
 8001f16:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f47f ae8e 	bne.w	8001c44 <HAL_GPIO_Init+0x14>
  }
}
 8001f28:	bf00      	nop
 8001f2a:	bf00      	nop
 8001f2c:	372c      	adds	r7, #44	@ 0x2c
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr
 8001f34:	40010400 	.word	0x40010400

08001f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	807b      	strh	r3, [r7, #2]
 8001f44:	4613      	mov	r3, r2
 8001f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f48:	787b      	ldrb	r3, [r7, #1]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f4e:	887a      	ldrh	r2, [r7, #2]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f54:	e003      	b.n	8001f5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f56:	887b      	ldrh	r3, [r7, #2]
 8001f58:	041a      	lsls	r2, r3, #16
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	611a      	str	r2, [r3, #16]
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr

08001f68 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f7a:	887a      	ldrh	r2, [r7, #2]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	041a      	lsls	r2, r3, #16
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	43d9      	mvns	r1, r3
 8001f86:	887b      	ldrh	r3, [r7, #2]
 8001f88:	400b      	ands	r3, r1
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	611a      	str	r2, [r3, #16]
}
 8001f90:	bf00      	nop
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr
	...

08001f9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e272      	b.n	8002494 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 8087 	beq.w	80020ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fbc:	4b92      	ldr	r3, [pc, #584]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 030c 	and.w	r3, r3, #12
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d00c      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fc8:	4b8f      	ldr	r3, [pc, #572]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 030c 	and.w	r3, r3, #12
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d112      	bne.n	8001ffa <HAL_RCC_OscConfig+0x5e>
 8001fd4:	4b8c      	ldr	r3, [pc, #560]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fe0:	d10b      	bne.n	8001ffa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe2:	4b89      	ldr	r3, [pc, #548]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d06c      	beq.n	80020c8 <HAL_RCC_OscConfig+0x12c>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d168      	bne.n	80020c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e24c      	b.n	8002494 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002002:	d106      	bne.n	8002012 <HAL_RCC_OscConfig+0x76>
 8002004:	4b80      	ldr	r3, [pc, #512]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a7f      	ldr	r2, [pc, #508]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 800200a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800200e:	6013      	str	r3, [r2, #0]
 8002010:	e02e      	b.n	8002070 <HAL_RCC_OscConfig+0xd4>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10c      	bne.n	8002034 <HAL_RCC_OscConfig+0x98>
 800201a:	4b7b      	ldr	r3, [pc, #492]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a7a      	ldr	r2, [pc, #488]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 8002020:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	4b78      	ldr	r3, [pc, #480]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a77      	ldr	r2, [pc, #476]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 800202c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	e01d      	b.n	8002070 <HAL_RCC_OscConfig+0xd4>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800203c:	d10c      	bne.n	8002058 <HAL_RCC_OscConfig+0xbc>
 800203e:	4b72      	ldr	r3, [pc, #456]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a71      	ldr	r2, [pc, #452]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 8002044:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	4b6f      	ldr	r3, [pc, #444]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a6e      	ldr	r2, [pc, #440]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 8002050:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	e00b      	b.n	8002070 <HAL_RCC_OscConfig+0xd4>
 8002058:	4b6b      	ldr	r3, [pc, #428]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a6a      	ldr	r2, [pc, #424]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 800205e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002062:	6013      	str	r3, [r2, #0]
 8002064:	4b68      	ldr	r3, [pc, #416]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a67      	ldr	r2, [pc, #412]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 800206a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800206e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d013      	beq.n	80020a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002078:	f7fe fe82 	bl	8000d80 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002080:	f7fe fe7e 	bl	8000d80 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b64      	cmp	r3, #100	@ 0x64
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e200      	b.n	8002494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002092:	4b5d      	ldr	r3, [pc, #372]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f0      	beq.n	8002080 <HAL_RCC_OscConfig+0xe4>
 800209e:	e014      	b.n	80020ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a0:	f7fe fe6e 	bl	8000d80 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a8:	f7fe fe6a 	bl	8000d80 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b64      	cmp	r3, #100	@ 0x64
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e1ec      	b.n	8002494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ba:	4b53      	ldr	r3, [pc, #332]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f0      	bne.n	80020a8 <HAL_RCC_OscConfig+0x10c>
 80020c6:	e000      	b.n	80020ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d063      	beq.n	800219e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020d6:	4b4c      	ldr	r3, [pc, #304]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 030c 	and.w	r3, r3, #12
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00b      	beq.n	80020fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020e2:	4b49      	ldr	r3, [pc, #292]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d11c      	bne.n	8002128 <HAL_RCC_OscConfig+0x18c>
 80020ee:	4b46      	ldr	r3, [pc, #280]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d116      	bne.n	8002128 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020fa:	4b43      	ldr	r3, [pc, #268]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d005      	beq.n	8002112 <HAL_RCC_OscConfig+0x176>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d001      	beq.n	8002112 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e1c0      	b.n	8002494 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002112:	4b3d      	ldr	r3, [pc, #244]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4939      	ldr	r1, [pc, #228]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 8002122:	4313      	orrs	r3, r2
 8002124:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002126:	e03a      	b.n	800219e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d020      	beq.n	8002172 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002130:	4b36      	ldr	r3, [pc, #216]	@ (800220c <HAL_RCC_OscConfig+0x270>)
 8002132:	2201      	movs	r2, #1
 8002134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002136:	f7fe fe23 	bl	8000d80 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800213e:	f7fe fe1f 	bl	8000d80 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e1a1      	b.n	8002494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002150:	4b2d      	ldr	r3, [pc, #180]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0f0      	beq.n	800213e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215c:	4b2a      	ldr	r3, [pc, #168]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	4927      	ldr	r1, [pc, #156]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 800216c:	4313      	orrs	r3, r2
 800216e:	600b      	str	r3, [r1, #0]
 8002170:	e015      	b.n	800219e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002172:	4b26      	ldr	r3, [pc, #152]	@ (800220c <HAL_RCC_OscConfig+0x270>)
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002178:	f7fe fe02 	bl	8000d80 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002180:	f7fe fdfe 	bl	8000d80 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e180      	b.n	8002494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002192:	4b1d      	ldr	r3, [pc, #116]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1f0      	bne.n	8002180 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d03a      	beq.n	8002220 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d019      	beq.n	80021e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021b2:	4b17      	ldr	r3, [pc, #92]	@ (8002210 <HAL_RCC_OscConfig+0x274>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b8:	f7fe fde2 	bl	8000d80 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c0:	f7fe fdde 	bl	8000d80 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e160      	b.n	8002494 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021de:	2001      	movs	r0, #1
 80021e0:	f000 face 	bl	8002780 <RCC_Delay>
 80021e4:	e01c      	b.n	8002220 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002210 <HAL_RCC_OscConfig+0x274>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ec:	f7fe fdc8 	bl	8000d80 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f2:	e00f      	b.n	8002214 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f4:	f7fe fdc4 	bl	8000d80 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d908      	bls.n	8002214 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e146      	b.n	8002494 <HAL_RCC_OscConfig+0x4f8>
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000
 800220c:	42420000 	.word	0x42420000
 8002210:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002214:	4b92      	ldr	r3, [pc, #584]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 8002216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1e9      	bne.n	80021f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 80a6 	beq.w	800237a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800222e:	2300      	movs	r3, #0
 8002230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002232:	4b8b      	ldr	r3, [pc, #556]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10d      	bne.n	800225a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800223e:	4b88      	ldr	r3, [pc, #544]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	4a87      	ldr	r2, [pc, #540]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 8002244:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002248:	61d3      	str	r3, [r2, #28]
 800224a:	4b85      	ldr	r3, [pc, #532]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002252:	60bb      	str	r3, [r7, #8]
 8002254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002256:	2301      	movs	r3, #1
 8002258:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225a:	4b82      	ldr	r3, [pc, #520]	@ (8002464 <HAL_RCC_OscConfig+0x4c8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002262:	2b00      	cmp	r3, #0
 8002264:	d118      	bne.n	8002298 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002266:	4b7f      	ldr	r3, [pc, #508]	@ (8002464 <HAL_RCC_OscConfig+0x4c8>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a7e      	ldr	r2, [pc, #504]	@ (8002464 <HAL_RCC_OscConfig+0x4c8>)
 800226c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002270:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002272:	f7fe fd85 	bl	8000d80 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800227a:	f7fe fd81 	bl	8000d80 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b64      	cmp	r3, #100	@ 0x64
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e103      	b.n	8002494 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228c:	4b75      	ldr	r3, [pc, #468]	@ (8002464 <HAL_RCC_OscConfig+0x4c8>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0f0      	beq.n	800227a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d106      	bne.n	80022ae <HAL_RCC_OscConfig+0x312>
 80022a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	4a6e      	ldr	r2, [pc, #440]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 80022a6:	f043 0301 	orr.w	r3, r3, #1
 80022aa:	6213      	str	r3, [r2, #32]
 80022ac:	e02d      	b.n	800230a <HAL_RCC_OscConfig+0x36e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10c      	bne.n	80022d0 <HAL_RCC_OscConfig+0x334>
 80022b6:	4b6a      	ldr	r3, [pc, #424]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	4a69      	ldr	r2, [pc, #420]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 80022bc:	f023 0301 	bic.w	r3, r3, #1
 80022c0:	6213      	str	r3, [r2, #32]
 80022c2:	4b67      	ldr	r3, [pc, #412]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	4a66      	ldr	r2, [pc, #408]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 80022c8:	f023 0304 	bic.w	r3, r3, #4
 80022cc:	6213      	str	r3, [r2, #32]
 80022ce:	e01c      	b.n	800230a <HAL_RCC_OscConfig+0x36e>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	2b05      	cmp	r3, #5
 80022d6:	d10c      	bne.n	80022f2 <HAL_RCC_OscConfig+0x356>
 80022d8:	4b61      	ldr	r3, [pc, #388]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	4a60      	ldr	r2, [pc, #384]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 80022de:	f043 0304 	orr.w	r3, r3, #4
 80022e2:	6213      	str	r3, [r2, #32]
 80022e4:	4b5e      	ldr	r3, [pc, #376]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	4a5d      	ldr	r2, [pc, #372]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	6213      	str	r3, [r2, #32]
 80022f0:	e00b      	b.n	800230a <HAL_RCC_OscConfig+0x36e>
 80022f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	4a5a      	ldr	r2, [pc, #360]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 80022f8:	f023 0301 	bic.w	r3, r3, #1
 80022fc:	6213      	str	r3, [r2, #32]
 80022fe:	4b58      	ldr	r3, [pc, #352]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	4a57      	ldr	r2, [pc, #348]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 8002304:	f023 0304 	bic.w	r3, r3, #4
 8002308:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d015      	beq.n	800233e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002312:	f7fe fd35 	bl	8000d80 <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002318:	e00a      	b.n	8002330 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800231a:	f7fe fd31 	bl	8000d80 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002328:	4293      	cmp	r3, r2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e0b1      	b.n	8002494 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002330:	4b4b      	ldr	r3, [pc, #300]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0ee      	beq.n	800231a <HAL_RCC_OscConfig+0x37e>
 800233c:	e014      	b.n	8002368 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233e:	f7fe fd1f 	bl	8000d80 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002344:	e00a      	b.n	800235c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002346:	f7fe fd1b 	bl	8000d80 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002354:	4293      	cmp	r3, r2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e09b      	b.n	8002494 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800235c:	4b40      	ldr	r3, [pc, #256]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1ee      	bne.n	8002346 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002368:	7dfb      	ldrb	r3, [r7, #23]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d105      	bne.n	800237a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800236e:	4b3c      	ldr	r3, [pc, #240]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	4a3b      	ldr	r2, [pc, #236]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 8002374:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002378:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 8087 	beq.w	8002492 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002384:	4b36      	ldr	r3, [pc, #216]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 030c 	and.w	r3, r3, #12
 800238c:	2b08      	cmp	r3, #8
 800238e:	d061      	beq.n	8002454 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	2b02      	cmp	r3, #2
 8002396:	d146      	bne.n	8002426 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002398:	4b33      	ldr	r3, [pc, #204]	@ (8002468 <HAL_RCC_OscConfig+0x4cc>)
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239e:	f7fe fcef 	bl	8000d80 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a6:	f7fe fceb 	bl	8000d80 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e06d      	b.n	8002494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b8:	4b29      	ldr	r3, [pc, #164]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f0      	bne.n	80023a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023cc:	d108      	bne.n	80023e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023ce:	4b24      	ldr	r3, [pc, #144]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	4921      	ldr	r1, [pc, #132]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a19      	ldr	r1, [r3, #32]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f0:	430b      	orrs	r3, r1
 80023f2:	491b      	ldr	r1, [pc, #108]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002468 <HAL_RCC_OscConfig+0x4cc>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fe:	f7fe fcbf 	bl	8000d80 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002406:	f7fe fcbb 	bl	8000d80 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e03d      	b.n	8002494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002418:	4b11      	ldr	r3, [pc, #68]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0f0      	beq.n	8002406 <HAL_RCC_OscConfig+0x46a>
 8002424:	e035      	b.n	8002492 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002426:	4b10      	ldr	r3, [pc, #64]	@ (8002468 <HAL_RCC_OscConfig+0x4cc>)
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242c:	f7fe fca8 	bl	8000d80 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002434:	f7fe fca4 	bl	8000d80 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e026      	b.n	8002494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002446:	4b06      	ldr	r3, [pc, #24]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f0      	bne.n	8002434 <HAL_RCC_OscConfig+0x498>
 8002452:	e01e      	b.n	8002492 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d107      	bne.n	800246c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e019      	b.n	8002494 <HAL_RCC_OscConfig+0x4f8>
 8002460:	40021000 	.word	0x40021000
 8002464:	40007000 	.word	0x40007000
 8002468:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800246c:	4b0b      	ldr	r3, [pc, #44]	@ (800249c <HAL_RCC_OscConfig+0x500>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	429a      	cmp	r2, r3
 800247e:	d106      	bne.n	800248e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800248a:	429a      	cmp	r2, r3
 800248c:	d001      	beq.n	8002492 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40021000 	.word	0x40021000

080024a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e0d0      	b.n	8002656 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024b4:	4b6a      	ldr	r3, [pc, #424]	@ (8002660 <HAL_RCC_ClockConfig+0x1c0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d910      	bls.n	80024e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c2:	4b67      	ldr	r3, [pc, #412]	@ (8002660 <HAL_RCC_ClockConfig+0x1c0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f023 0207 	bic.w	r2, r3, #7
 80024ca:	4965      	ldr	r1, [pc, #404]	@ (8002660 <HAL_RCC_ClockConfig+0x1c0>)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d2:	4b63      	ldr	r3, [pc, #396]	@ (8002660 <HAL_RCC_ClockConfig+0x1c0>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d001      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e0b8      	b.n	8002656 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d020      	beq.n	8002532 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d005      	beq.n	8002508 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024fc:	4b59      	ldr	r3, [pc, #356]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	4a58      	ldr	r2, [pc, #352]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 8002502:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002506:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002514:	4b53      	ldr	r3, [pc, #332]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	4a52      	ldr	r2, [pc, #328]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 800251a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800251e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002520:	4b50      	ldr	r3, [pc, #320]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	494d      	ldr	r1, [pc, #308]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 800252e:	4313      	orrs	r3, r2
 8002530:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d040      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d107      	bne.n	8002556 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002546:	4b47      	ldr	r3, [pc, #284]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d115      	bne.n	800257e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e07f      	b.n	8002656 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b02      	cmp	r3, #2
 800255c:	d107      	bne.n	800256e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800255e:	4b41      	ldr	r3, [pc, #260]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d109      	bne.n	800257e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e073      	b.n	8002656 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256e:	4b3d      	ldr	r3, [pc, #244]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e06b      	b.n	8002656 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800257e:	4b39      	ldr	r3, [pc, #228]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f023 0203 	bic.w	r2, r3, #3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	4936      	ldr	r1, [pc, #216]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 800258c:	4313      	orrs	r3, r2
 800258e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002590:	f7fe fbf6 	bl	8000d80 <HAL_GetTick>
 8002594:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002596:	e00a      	b.n	80025ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002598:	f7fe fbf2 	bl	8000d80 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e053      	b.n	8002656 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f003 020c 	and.w	r2, r3, #12
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	429a      	cmp	r2, r3
 80025be:	d1eb      	bne.n	8002598 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025c0:	4b27      	ldr	r3, [pc, #156]	@ (8002660 <HAL_RCC_ClockConfig+0x1c0>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d210      	bcs.n	80025f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ce:	4b24      	ldr	r3, [pc, #144]	@ (8002660 <HAL_RCC_ClockConfig+0x1c0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f023 0207 	bic.w	r2, r3, #7
 80025d6:	4922      	ldr	r1, [pc, #136]	@ (8002660 <HAL_RCC_ClockConfig+0x1c0>)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	4313      	orrs	r3, r2
 80025dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025de:	4b20      	ldr	r3, [pc, #128]	@ (8002660 <HAL_RCC_ClockConfig+0x1c0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d001      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e032      	b.n	8002656 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025fc:	4b19      	ldr	r3, [pc, #100]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	4916      	ldr	r1, [pc, #88]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 800260a:	4313      	orrs	r3, r2
 800260c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b00      	cmp	r3, #0
 8002618:	d009      	beq.n	800262e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800261a:	4b12      	ldr	r3, [pc, #72]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	490e      	ldr	r1, [pc, #56]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	4313      	orrs	r3, r2
 800262c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800262e:	f000 f821 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8002632:	4602      	mov	r2, r0
 8002634:	4b0b      	ldr	r3, [pc, #44]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	091b      	lsrs	r3, r3, #4
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	490a      	ldr	r1, [pc, #40]	@ (8002668 <HAL_RCC_ClockConfig+0x1c8>)
 8002640:	5ccb      	ldrb	r3, [r1, r3]
 8002642:	fa22 f303 	lsr.w	r3, r2, r3
 8002646:	4a09      	ldr	r2, [pc, #36]	@ (800266c <HAL_RCC_ClockConfig+0x1cc>)
 8002648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800264a:	4b09      	ldr	r3, [pc, #36]	@ (8002670 <HAL_RCC_ClockConfig+0x1d0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe fb54 	bl	8000cfc <HAL_InitTick>

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40022000 	.word	0x40022000
 8002664:	40021000 	.word	0x40021000
 8002668:	080052b0 	.word	0x080052b0
 800266c:	20000040 	.word	0x20000040
 8002670:	20000044 	.word	0x20000044

08002674 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002674:	b480      	push	{r7}
 8002676:	b087      	sub	sp, #28
 8002678:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800267a:	2300      	movs	r3, #0
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	2300      	movs	r3, #0
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	2300      	movs	r3, #0
 8002688:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800268e:	4b1e      	ldr	r3, [pc, #120]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x94>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f003 030c 	and.w	r3, r3, #12
 800269a:	2b04      	cmp	r3, #4
 800269c:	d002      	beq.n	80026a4 <HAL_RCC_GetSysClockFreq+0x30>
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d003      	beq.n	80026aa <HAL_RCC_GetSysClockFreq+0x36>
 80026a2:	e027      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026a4:	4b19      	ldr	r3, [pc, #100]	@ (800270c <HAL_RCC_GetSysClockFreq+0x98>)
 80026a6:	613b      	str	r3, [r7, #16]
      break;
 80026a8:	e027      	b.n	80026fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	0c9b      	lsrs	r3, r3, #18
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	4a17      	ldr	r2, [pc, #92]	@ (8002710 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026b4:	5cd3      	ldrb	r3, [r2, r3]
 80026b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d010      	beq.n	80026e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026c2:	4b11      	ldr	r3, [pc, #68]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x94>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	0c5b      	lsrs	r3, r3, #17
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	4a11      	ldr	r2, [pc, #68]	@ (8002714 <HAL_RCC_GetSysClockFreq+0xa0>)
 80026ce:	5cd3      	ldrb	r3, [r2, r3]
 80026d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a0d      	ldr	r2, [pc, #52]	@ (800270c <HAL_RCC_GetSysClockFreq+0x98>)
 80026d6:	fb03 f202 	mul.w	r2, r3, r2
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	e004      	b.n	80026ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a0c      	ldr	r2, [pc, #48]	@ (8002718 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026e8:	fb02 f303 	mul.w	r3, r2, r3
 80026ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	613b      	str	r3, [r7, #16]
      break;
 80026f2:	e002      	b.n	80026fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026f4:	4b05      	ldr	r3, [pc, #20]	@ (800270c <HAL_RCC_GetSysClockFreq+0x98>)
 80026f6:	613b      	str	r3, [r7, #16]
      break;
 80026f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026fa:	693b      	ldr	r3, [r7, #16]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	371c      	adds	r7, #28
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000
 800270c:	007a1200 	.word	0x007a1200
 8002710:	080052c8 	.word	0x080052c8
 8002714:	080052d8 	.word	0x080052d8
 8002718:	003d0900 	.word	0x003d0900

0800271c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002720:	4b02      	ldr	r3, [pc, #8]	@ (800272c <HAL_RCC_GetHCLKFreq+0x10>)
 8002722:	681b      	ldr	r3, [r3, #0]
}
 8002724:	4618      	mov	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr
 800272c:	20000040 	.word	0x20000040

08002730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002734:	f7ff fff2 	bl	800271c <HAL_RCC_GetHCLKFreq>
 8002738:	4602      	mov	r2, r0
 800273a:	4b05      	ldr	r3, [pc, #20]	@ (8002750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	0a1b      	lsrs	r3, r3, #8
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	4903      	ldr	r1, [pc, #12]	@ (8002754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002746:	5ccb      	ldrb	r3, [r1, r3]
 8002748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800274c:	4618      	mov	r0, r3
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40021000 	.word	0x40021000
 8002754:	080052c0 	.word	0x080052c0

08002758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800275c:	f7ff ffde 	bl	800271c <HAL_RCC_GetHCLKFreq>
 8002760:	4602      	mov	r2, r0
 8002762:	4b05      	ldr	r3, [pc, #20]	@ (8002778 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	0adb      	lsrs	r3, r3, #11
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	4903      	ldr	r1, [pc, #12]	@ (800277c <HAL_RCC_GetPCLK2Freq+0x24>)
 800276e:	5ccb      	ldrb	r3, [r1, r3]
 8002770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002774:	4618      	mov	r0, r3
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40021000 	.word	0x40021000
 800277c:	080052c0 	.word	0x080052c0

08002780 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002788:	4b0a      	ldr	r3, [pc, #40]	@ (80027b4 <RCC_Delay+0x34>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a0a      	ldr	r2, [pc, #40]	@ (80027b8 <RCC_Delay+0x38>)
 800278e:	fba2 2303 	umull	r2, r3, r2, r3
 8002792:	0a5b      	lsrs	r3, r3, #9
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	fb02 f303 	mul.w	r3, r2, r3
 800279a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800279c:	bf00      	nop
  }
  while (Delay --);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1e5a      	subs	r2, r3, #1
 80027a2:	60fa      	str	r2, [r7, #12]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1f9      	bne.n	800279c <RCC_Delay+0x1c>
}
 80027a8:	bf00      	nop
 80027aa:	bf00      	nop
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr
 80027b4:	20000040 	.word	0x20000040
 80027b8:	10624dd3 	.word	0x10624dd3

080027bc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	2300      	movs	r3, #0
 80027ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d07d      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80027d8:	2300      	movs	r3, #0
 80027da:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027dc:	4b4f      	ldr	r3, [pc, #316]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027de:	69db      	ldr	r3, [r3, #28]
 80027e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10d      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e8:	4b4c      	ldr	r3, [pc, #304]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	4a4b      	ldr	r2, [pc, #300]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027f2:	61d3      	str	r3, [r2, #28]
 80027f4:	4b49      	ldr	r3, [pc, #292]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002800:	2301      	movs	r3, #1
 8002802:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002804:	4b46      	ldr	r3, [pc, #280]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800280c:	2b00      	cmp	r3, #0
 800280e:	d118      	bne.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002810:	4b43      	ldr	r3, [pc, #268]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a42      	ldr	r2, [pc, #264]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002816:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800281a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800281c:	f7fe fab0 	bl	8000d80 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002822:	e008      	b.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002824:	f7fe faac 	bl	8000d80 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b64      	cmp	r3, #100	@ 0x64
 8002830:	d901      	bls.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e06d      	b.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002836:	4b3a      	ldr	r3, [pc, #232]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f0      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002842:	4b36      	ldr	r3, [pc, #216]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800284a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d02e      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	429a      	cmp	r2, r3
 800285e:	d027      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002860:	4b2e      	ldr	r3, [pc, #184]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002868:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800286a:	4b2e      	ldr	r3, [pc, #184]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800286c:	2201      	movs	r2, #1
 800286e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002870:	4b2c      	ldr	r3, [pc, #176]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002876:	4a29      	ldr	r2, [pc, #164]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d014      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002886:	f7fe fa7b 	bl	8000d80 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800288c:	e00a      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288e:	f7fe fa77 	bl	8000d80 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	f241 3288 	movw	r2, #5000	@ 0x1388
 800289c:	4293      	cmp	r3, r2
 800289e:	d901      	bls.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e036      	b.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a4:	4b1d      	ldr	r3, [pc, #116]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0ee      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028b0:	4b1a      	ldr	r3, [pc, #104]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	4917      	ldr	r1, [pc, #92]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028c2:	7dfb      	ldrb	r3, [r7, #23]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d105      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c8:	4b14      	ldr	r3, [pc, #80]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	4a13      	ldr	r2, [pc, #76]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028e0:	4b0e      	ldr	r3, [pc, #56]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	490b      	ldr	r1, [pc, #44]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0310 	and.w	r3, r3, #16
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d008      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028fe:	4b07      	ldr	r3, [pc, #28]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	4904      	ldr	r1, [pc, #16]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290c:	4313      	orrs	r3, r2
 800290e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40021000 	.word	0x40021000
 8002920:	40007000 	.word	0x40007000
 8002924:	42420440 	.word	0x42420440

08002928 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b088      	sub	sp, #32
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	2300      	movs	r3, #0
 8002936:	61fb      	str	r3, [r7, #28]
 8002938:	2300      	movs	r3, #0
 800293a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	2300      	movs	r3, #0
 8002942:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b10      	cmp	r3, #16
 8002948:	d00a      	beq.n	8002960 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b10      	cmp	r3, #16
 800294e:	f200 808a 	bhi.w	8002a66 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d045      	beq.n	80029e4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d075      	beq.n	8002a4a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800295e:	e082      	b.n	8002a66 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002960:	4b46      	ldr	r3, [pc, #280]	@ (8002a7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002966:	4b45      	ldr	r3, [pc, #276]	@ (8002a7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d07b      	beq.n	8002a6a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	0c9b      	lsrs	r3, r3, #18
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	4a41      	ldr	r2, [pc, #260]	@ (8002a80 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800297c:	5cd3      	ldrb	r3, [r2, r3]
 800297e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d015      	beq.n	80029b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800298a:	4b3c      	ldr	r3, [pc, #240]	@ (8002a7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	0c5b      	lsrs	r3, r3, #17
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	4a3b      	ldr	r2, [pc, #236]	@ (8002a84 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002996:	5cd3      	ldrb	r3, [r2, r3]
 8002998:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00d      	beq.n	80029c0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80029a4:	4a38      	ldr	r2, [pc, #224]	@ (8002a88 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	fb02 f303 	mul.w	r3, r2, r3
 80029b2:	61fb      	str	r3, [r7, #28]
 80029b4:	e004      	b.n	80029c0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	4a34      	ldr	r2, [pc, #208]	@ (8002a8c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80029ba:	fb02 f303 	mul.w	r3, r2, r3
 80029be:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80029c0:	4b2e      	ldr	r3, [pc, #184]	@ (8002a7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029cc:	d102      	bne.n	80029d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	61bb      	str	r3, [r7, #24]
      break;
 80029d2:	e04a      	b.n	8002a6a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	4a2d      	ldr	r2, [pc, #180]	@ (8002a90 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80029da:	fba2 2303 	umull	r2, r3, r2, r3
 80029de:	085b      	lsrs	r3, r3, #1
 80029e0:	61bb      	str	r3, [r7, #24]
      break;
 80029e2:	e042      	b.n	8002a6a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80029e4:	4b25      	ldr	r3, [pc, #148]	@ (8002a7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029f4:	d108      	bne.n	8002a08 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002a00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a04:	61bb      	str	r3, [r7, #24]
 8002a06:	e01f      	b.n	8002a48 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a12:	d109      	bne.n	8002a28 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002a14:	4b19      	ldr	r3, [pc, #100]	@ (8002a7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002a20:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002a24:	61bb      	str	r3, [r7, #24]
 8002a26:	e00f      	b.n	8002a48 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a32:	d11c      	bne.n	8002a6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002a34:	4b11      	ldr	r3, [pc, #68]	@ (8002a7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d016      	beq.n	8002a6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002a40:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002a44:	61bb      	str	r3, [r7, #24]
      break;
 8002a46:	e012      	b.n	8002a6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002a48:	e011      	b.n	8002a6e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002a4a:	f7ff fe85 	bl	8002758 <HAL_RCC_GetPCLK2Freq>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	4b0a      	ldr	r3, [pc, #40]	@ (8002a7c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	0b9b      	lsrs	r3, r3, #14
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a62:	61bb      	str	r3, [r7, #24]
      break;
 8002a64:	e004      	b.n	8002a70 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002a66:	bf00      	nop
 8002a68:	e002      	b.n	8002a70 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002a6a:	bf00      	nop
 8002a6c:	e000      	b.n	8002a70 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002a6e:	bf00      	nop
    }
  }
  return (frequency);
 8002a70:	69bb      	ldr	r3, [r7, #24]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3720      	adds	r7, #32
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	080052dc 	.word	0x080052dc
 8002a84:	080052ec 	.word	0x080052ec
 8002a88:	007a1200 	.word	0x007a1200
 8002a8c:	003d0900 	.word	0x003d0900
 8002a90:	aaaaaaab 	.word	0xaaaaaaab

08002a94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e042      	b.n	8002b2c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d106      	bne.n	8002ac0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7fd ff4e 	bl	800095c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2224      	movs	r2, #36	@ 0x24
 8002ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ad6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 fdc5 	bl	8003668 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	691a      	ldr	r2, [r3, #16]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002aec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695a      	ldr	r2, [r3, #20]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002afc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b08a      	sub	sp, #40	@ 0x28
 8002b38:	af02      	add	r7, sp, #8
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	603b      	str	r3, [r7, #0]
 8002b40:	4613      	mov	r3, r2
 8002b42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b20      	cmp	r3, #32
 8002b52:	d16d      	bne.n	8002c30 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d002      	beq.n	8002b60 <HAL_UART_Transmit+0x2c>
 8002b5a:	88fb      	ldrh	r3, [r7, #6]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e066      	b.n	8002c32 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2221      	movs	r2, #33	@ 0x21
 8002b6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b72:	f7fe f905 	bl	8000d80 <HAL_GetTick>
 8002b76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	88fa      	ldrh	r2, [r7, #6]
 8002b7c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	88fa      	ldrh	r2, [r7, #6]
 8002b82:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b8c:	d108      	bne.n	8002ba0 <HAL_UART_Transmit+0x6c>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d104      	bne.n	8002ba0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	e003      	b.n	8002ba8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ba8:	e02a      	b.n	8002c00 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	2180      	movs	r1, #128	@ 0x80
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 fb14 	bl	80031e2 <UART_WaitOnFlagUntilTimeout>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e036      	b.n	8002c32 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10b      	bne.n	8002be2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	3302      	adds	r3, #2
 8002bde:	61bb      	str	r3, [r7, #24]
 8002be0:	e007      	b.n	8002bf2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	781a      	ldrb	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1cf      	bne.n	8002baa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2200      	movs	r2, #0
 8002c12:	2140      	movs	r1, #64	@ 0x40
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f000 fae4 	bl	80031e2 <UART_WaitOnFlagUntilTimeout>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e006      	b.n	8002c32 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	e000      	b.n	8002c32 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002c30:	2302      	movs	r3, #2
  }
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3720      	adds	r7, #32
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b084      	sub	sp, #16
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	60f8      	str	r0, [r7, #12]
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	4613      	mov	r3, r2
 8002c46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b20      	cmp	r3, #32
 8002c52:	d112      	bne.n	8002c7a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d002      	beq.n	8002c60 <HAL_UART_Receive_IT+0x26>
 8002c5a:	88fb      	ldrh	r3, [r7, #6]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e00b      	b.n	8002c7c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002c6a:	88fb      	ldrh	r3, [r7, #6]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	68b9      	ldr	r1, [r7, #8]
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 fb24 	bl	80032be <UART_Start_Receive_IT>
 8002c76:	4603      	mov	r3, r0
 8002c78:	e000      	b.n	8002c7c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002c7a:	2302      	movs	r3, #2
  }
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b0ba      	sub	sp, #232	@ 0xe8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002cc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10f      	bne.n	8002cea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d009      	beq.n	8002cea <HAL_UART_IRQHandler+0x66>
 8002cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cda:	f003 0320 	and.w	r3, r3, #32
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 fc01 	bl	80034ea <UART_Receive_IT>
      return;
 8002ce8:	e25b      	b.n	80031a2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002cea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 80de 	beq.w	8002eb0 <HAL_UART_IRQHandler+0x22c>
 8002cf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d106      	bne.n	8002d0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d04:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 80d1 	beq.w	8002eb0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00b      	beq.n	8002d32 <HAL_UART_IRQHandler+0xae>
 8002d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2a:	f043 0201 	orr.w	r2, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d36:	f003 0304 	and.w	r3, r3, #4
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00b      	beq.n	8002d56 <HAL_UART_IRQHandler+0xd2>
 8002d3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d005      	beq.n	8002d56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4e:	f043 0202 	orr.w	r2, r3, #2
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00b      	beq.n	8002d7a <HAL_UART_IRQHandler+0xf6>
 8002d62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d005      	beq.n	8002d7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d72:	f043 0204 	orr.w	r2, r3, #4
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d011      	beq.n	8002daa <HAL_UART_IRQHandler+0x126>
 8002d86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d8a:	f003 0320 	and.w	r3, r3, #32
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d105      	bne.n	8002d9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d005      	beq.n	8002daa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da2:	f043 0208 	orr.w	r2, r3, #8
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 81f2 	beq.w	8003198 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002db8:	f003 0320 	and.w	r3, r3, #32
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x14e>
 8002dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d002      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 fb8c 	bl	80034ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	bf14      	ite	ne
 8002de0:	2301      	movne	r3, #1
 8002de2:	2300      	moveq	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d103      	bne.n	8002dfe <HAL_UART_IRQHandler+0x17a>
 8002df6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d04f      	beq.n	8002e9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 fa96 	bl	8003330 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d041      	beq.n	8002e96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	3314      	adds	r3, #20
 8002e18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e20:	e853 3f00 	ldrex	r3, [r3]
 8002e24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002e28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	3314      	adds	r3, #20
 8002e3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002e3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002e42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002e4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002e4e:	e841 2300 	strex	r3, r2, [r1]
 8002e52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002e56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1d9      	bne.n	8002e12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d013      	beq.n	8002e8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e6a:	4a7e      	ldr	r2, [pc, #504]	@ (8003064 <HAL_UART_IRQHandler+0x3e0>)
 8002e6c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe fd5e 	bl	8001934 <HAL_DMA_Abort_IT>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d016      	beq.n	8002eac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e88:	4610      	mov	r0, r2
 8002e8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e8c:	e00e      	b.n	8002eac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f993 	bl	80031ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e94:	e00a      	b.n	8002eac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f98f 	bl	80031ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e9c:	e006      	b.n	8002eac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f98b 	bl	80031ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002eaa:	e175      	b.n	8003198 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eac:	bf00      	nop
    return;
 8002eae:	e173      	b.n	8003198 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	f040 814f 	bne.w	8003158 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ebe:	f003 0310 	and.w	r3, r3, #16
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 8148 	beq.w	8003158 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ecc:	f003 0310 	and.w	r3, r3, #16
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 8141 	beq.w	8003158 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	60bb      	str	r3, [r7, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	60bb      	str	r3, [r7, #8]
 8002eea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 80b6 	beq.w	8003068 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 8145 	beq.w	800319c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002f16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	f080 813e 	bcs.w	800319c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002f26:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	2b20      	cmp	r3, #32
 8002f30:	f000 8088 	beq.w	8003044 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	330c      	adds	r3, #12
 8002f3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f42:	e853 3f00 	ldrex	r3, [r3]
 8002f46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002f4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f52:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	330c      	adds	r3, #12
 8002f5c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002f60:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002f64:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f68:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002f6c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002f70:	e841 2300 	strex	r3, r2, [r1]
 8002f74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002f78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1d9      	bne.n	8002f34 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	3314      	adds	r3, #20
 8002f86:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f8a:	e853 3f00 	ldrex	r3, [r3]
 8002f8e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002f90:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f92:	f023 0301 	bic.w	r3, r3, #1
 8002f96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3314      	adds	r3, #20
 8002fa0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002fa4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002fa8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002faa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002fac:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002fb0:	e841 2300 	strex	r3, r2, [r1]
 8002fb4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002fb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1e1      	bne.n	8002f80 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	3314      	adds	r3, #20
 8002fc2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002fc6:	e853 3f00 	ldrex	r3, [r3]
 8002fca:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002fcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	3314      	adds	r3, #20
 8002fdc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002fe0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002fe2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002fe6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002fe8:	e841 2300 	strex	r3, r2, [r1]
 8002fec:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002fee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1e3      	bne.n	8002fbc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	330c      	adds	r3, #12
 8003008:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800300a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800300c:	e853 3f00 	ldrex	r3, [r3]
 8003010:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003012:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003014:	f023 0310 	bic.w	r3, r3, #16
 8003018:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	330c      	adds	r3, #12
 8003022:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003026:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003028:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800302c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800302e:	e841 2300 	strex	r3, r2, [r1]
 8003032:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003034:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1e3      	bne.n	8003002 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800303e:	4618      	mov	r0, r3
 8003040:	f7fe fc3c 	bl	80018bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003052:	b29b      	uxth	r3, r3
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	b29b      	uxth	r3, r3
 8003058:	4619      	mov	r1, r3
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f8b6 	bl	80031cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003060:	e09c      	b.n	800319c <HAL_UART_IRQHandler+0x518>
 8003062:	bf00      	nop
 8003064:	080033f5 	.word	0x080033f5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003070:	b29b      	uxth	r3, r3
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800307c:	b29b      	uxth	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 808e 	beq.w	80031a0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003084:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 8089 	beq.w	80031a0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	330c      	adds	r3, #12
 8003094:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003098:	e853 3f00 	ldrex	r3, [r3]
 800309c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800309e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80030a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	330c      	adds	r3, #12
 80030ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80030b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80030b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80030b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030ba:	e841 2300 	strex	r3, r2, [r1]
 80030be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80030c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1e3      	bne.n	800308e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	3314      	adds	r3, #20
 80030cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d0:	e853 3f00 	ldrex	r3, [r3]
 80030d4:	623b      	str	r3, [r7, #32]
   return(result);
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	f023 0301 	bic.w	r3, r3, #1
 80030dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	3314      	adds	r3, #20
 80030e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80030ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80030ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030f2:	e841 2300 	strex	r3, r2, [r1]
 80030f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80030f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1e3      	bne.n	80030c6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2220      	movs	r2, #32
 8003102:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	330c      	adds	r3, #12
 8003112:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	e853 3f00 	ldrex	r3, [r3]
 800311a:	60fb      	str	r3, [r7, #12]
   return(result);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f023 0310 	bic.w	r3, r3, #16
 8003122:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	330c      	adds	r3, #12
 800312c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003130:	61fa      	str	r2, [r7, #28]
 8003132:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003134:	69b9      	ldr	r1, [r7, #24]
 8003136:	69fa      	ldr	r2, [r7, #28]
 8003138:	e841 2300 	strex	r3, r2, [r1]
 800313c:	617b      	str	r3, [r7, #20]
   return(result);
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1e3      	bne.n	800310c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800314a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800314e:	4619      	mov	r1, r3
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 f83b 	bl	80031cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003156:	e023      	b.n	80031a0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800315c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003160:	2b00      	cmp	r3, #0
 8003162:	d009      	beq.n	8003178 <HAL_UART_IRQHandler+0x4f4>
 8003164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f953 	bl	800341c <UART_Transmit_IT>
    return;
 8003176:	e014      	b.n	80031a2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800317c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00e      	beq.n	80031a2 <HAL_UART_IRQHandler+0x51e>
 8003184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f992 	bl	80034ba <UART_EndTransmit_IT>
    return;
 8003196:	e004      	b.n	80031a2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003198:	bf00      	nop
 800319a:	e002      	b.n	80031a2 <HAL_UART_IRQHandler+0x51e>
      return;
 800319c:	bf00      	nop
 800319e:	e000      	b.n	80031a2 <HAL_UART_IRQHandler+0x51e>
      return;
 80031a0:	bf00      	nop
  }
}
 80031a2:	37e8      	adds	r7, #232	@ 0xe8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bc80      	pop	{r7}
 80031b8:	4770      	bx	lr

080031ba <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr

080031cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	460b      	mov	r3, r1
 80031d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr

080031e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b090      	sub	sp, #64	@ 0x40
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	60f8      	str	r0, [r7, #12]
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	603b      	str	r3, [r7, #0]
 80031ee:	4613      	mov	r3, r2
 80031f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031f2:	e050      	b.n	8003296 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031fa:	d04c      	beq.n	8003296 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d007      	beq.n	8003212 <UART_WaitOnFlagUntilTimeout+0x30>
 8003202:	f7fd fdbd 	bl	8000d80 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800320e:	429a      	cmp	r2, r3
 8003210:	d241      	bcs.n	8003296 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	330c      	adds	r3, #12
 8003218:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800321c:	e853 3f00 	ldrex	r3, [r3]
 8003220:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003224:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003228:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	330c      	adds	r3, #12
 8003230:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003232:	637a      	str	r2, [r7, #52]	@ 0x34
 8003234:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003236:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003238:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800323a:	e841 2300 	strex	r3, r2, [r1]
 800323e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1e5      	bne.n	8003212 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	3314      	adds	r3, #20
 800324c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	e853 3f00 	ldrex	r3, [r3]
 8003254:	613b      	str	r3, [r7, #16]
   return(result);
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f023 0301 	bic.w	r3, r3, #1
 800325c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	3314      	adds	r3, #20
 8003264:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003266:	623a      	str	r2, [r7, #32]
 8003268:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326a:	69f9      	ldr	r1, [r7, #28]
 800326c:	6a3a      	ldr	r2, [r7, #32]
 800326e:	e841 2300 	strex	r3, r2, [r1]
 8003272:	61bb      	str	r3, [r7, #24]
   return(result);
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1e5      	bne.n	8003246 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2220      	movs	r2, #32
 800327e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2220      	movs	r2, #32
 8003286:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e00f      	b.n	80032b6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	4013      	ands	r3, r2
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	bf0c      	ite	eq
 80032a6:	2301      	moveq	r3, #1
 80032a8:	2300      	movne	r3, #0
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	461a      	mov	r2, r3
 80032ae:	79fb      	ldrb	r3, [r7, #7]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d09f      	beq.n	80031f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3740      	adds	r7, #64	@ 0x40
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032be:	b480      	push	{r7}
 80032c0:	b085      	sub	sp, #20
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	4613      	mov	r3, r2
 80032ca:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	88fa      	ldrh	r2, [r7, #6]
 80032d6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	88fa      	ldrh	r2, [r7, #6]
 80032dc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2222      	movs	r2, #34	@ 0x22
 80032e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d007      	beq.n	8003304 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003302:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695a      	ldr	r2, [r3, #20]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0201 	orr.w	r2, r2, #1
 8003312:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0220 	orr.w	r2, r2, #32
 8003322:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr

08003330 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003330:	b480      	push	{r7}
 8003332:	b095      	sub	sp, #84	@ 0x54
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	330c      	adds	r3, #12
 800333e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003342:	e853 3f00 	ldrex	r3, [r3]
 8003346:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800334a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800334e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	330c      	adds	r3, #12
 8003356:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003358:	643a      	str	r2, [r7, #64]	@ 0x40
 800335a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800335e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003360:	e841 2300 	strex	r3, r2, [r1]
 8003364:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1e5      	bne.n	8003338 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	3314      	adds	r3, #20
 8003372:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	e853 3f00 	ldrex	r3, [r3]
 800337a:	61fb      	str	r3, [r7, #28]
   return(result);
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	f023 0301 	bic.w	r3, r3, #1
 8003382:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	3314      	adds	r3, #20
 800338a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800338c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800338e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003390:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003392:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003394:	e841 2300 	strex	r3, r2, [r1]
 8003398:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800339a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1e5      	bne.n	800336c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d119      	bne.n	80033dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	330c      	adds	r3, #12
 80033ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	e853 3f00 	ldrex	r3, [r3]
 80033b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	f023 0310 	bic.w	r3, r3, #16
 80033be:	647b      	str	r3, [r7, #68]	@ 0x44
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	330c      	adds	r3, #12
 80033c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033c8:	61ba      	str	r2, [r7, #24]
 80033ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033cc:	6979      	ldr	r1, [r7, #20]
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	e841 2300 	strex	r3, r2, [r1]
 80033d4:	613b      	str	r3, [r7, #16]
   return(result);
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1e5      	bne.n	80033a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80033ea:	bf00      	nop
 80033ec:	3754      	adds	r7, #84	@ 0x54
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc80      	pop	{r7}
 80033f2:	4770      	bx	lr

080033f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003400:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f7ff fed3 	bl	80031ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003414:	bf00      	nop
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b21      	cmp	r3, #33	@ 0x21
 800342e:	d13e      	bne.n	80034ae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003438:	d114      	bne.n	8003464 <UART_Transmit_IT+0x48>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d110      	bne.n	8003464 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	461a      	mov	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003456:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	1c9a      	adds	r2, r3, #2
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	621a      	str	r2, [r3, #32]
 8003462:	e008      	b.n	8003476 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	1c59      	adds	r1, r3, #1
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6211      	str	r1, [r2, #32]
 800346e:	781a      	ldrb	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800347a:	b29b      	uxth	r3, r3
 800347c:	3b01      	subs	r3, #1
 800347e:	b29b      	uxth	r3, r3
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	4619      	mov	r1, r3
 8003484:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10f      	bne.n	80034aa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68da      	ldr	r2, [r3, #12]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003498:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68da      	ldr	r2, [r3, #12]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	e000      	b.n	80034b0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034ae:	2302      	movs	r3, #2
  }
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr

080034ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b082      	sub	sp, #8
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7ff fe64 	bl	80031a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b08c      	sub	sp, #48	@ 0x30
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b22      	cmp	r3, #34	@ 0x22
 80034fc:	f040 80ae 	bne.w	800365c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003508:	d117      	bne.n	800353a <UART_Receive_IT+0x50>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d113      	bne.n	800353a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003512:	2300      	movs	r3, #0
 8003514:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800351a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	b29b      	uxth	r3, r3
 8003524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003528:	b29a      	uxth	r2, r3
 800352a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800352c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003532:	1c9a      	adds	r2, r3, #2
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	629a      	str	r2, [r3, #40]	@ 0x28
 8003538:	e026      	b.n	8003588 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800353e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003540:	2300      	movs	r3, #0
 8003542:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800354c:	d007      	beq.n	800355e <UART_Receive_IT+0x74>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10a      	bne.n	800356c <UART_Receive_IT+0x82>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d106      	bne.n	800356c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	b2da      	uxtb	r2, r3
 8003566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003568:	701a      	strb	r2, [r3, #0]
 800356a:	e008      	b.n	800357e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	b2db      	uxtb	r3, r3
 8003574:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003578:	b2da      	uxtb	r2, r3
 800357a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800357c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800358c:	b29b      	uxth	r3, r3
 800358e:	3b01      	subs	r3, #1
 8003590:	b29b      	uxth	r3, r3
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	4619      	mov	r1, r3
 8003596:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003598:	2b00      	cmp	r3, #0
 800359a:	d15d      	bne.n	8003658 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0220 	bic.w	r2, r2, #32
 80035aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	695a      	ldr	r2, [r3, #20]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0201 	bic.w	r2, r2, #1
 80035ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d135      	bne.n	800364e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	330c      	adds	r3, #12
 80035ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	e853 3f00 	ldrex	r3, [r3]
 80035f6:	613b      	str	r3, [r7, #16]
   return(result);
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f023 0310 	bic.w	r3, r3, #16
 80035fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	330c      	adds	r3, #12
 8003606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003608:	623a      	str	r2, [r7, #32]
 800360a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360c:	69f9      	ldr	r1, [r7, #28]
 800360e:	6a3a      	ldr	r2, [r7, #32]
 8003610:	e841 2300 	strex	r3, r2, [r1]
 8003614:	61bb      	str	r3, [r7, #24]
   return(result);
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1e5      	bne.n	80035e8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0310 	and.w	r3, r3, #16
 8003626:	2b10      	cmp	r3, #16
 8003628:	d10a      	bne.n	8003640 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003644:	4619      	mov	r1, r3
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7ff fdc0 	bl	80031cc <HAL_UARTEx_RxEventCallback>
 800364c:	e002      	b.n	8003654 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f9be 	bl	80039d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003654:	2300      	movs	r3, #0
 8003656:	e002      	b.n	800365e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003658:	2300      	movs	r3, #0
 800365a:	e000      	b.n	800365e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800365c:	2302      	movs	r3, #2
  }
}
 800365e:	4618      	mov	r0, r3
 8003660:	3730      	adds	r7, #48	@ 0x30
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
	...

08003668 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	4313      	orrs	r3, r2
 8003696:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80036a2:	f023 030c 	bic.w	r3, r3, #12
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6812      	ldr	r2, [r2, #0]
 80036aa:	68b9      	ldr	r1, [r7, #8]
 80036ac:	430b      	orrs	r3, r1
 80036ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699a      	ldr	r2, [r3, #24]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a2c      	ldr	r2, [pc, #176]	@ (800377c <UART_SetConfig+0x114>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d103      	bne.n	80036d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036d0:	f7ff f842 	bl	8002758 <HAL_RCC_GetPCLK2Freq>
 80036d4:	60f8      	str	r0, [r7, #12]
 80036d6:	e002      	b.n	80036de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80036d8:	f7ff f82a 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 80036dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	009a      	lsls	r2, r3, #2
 80036e8:	441a      	add	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f4:	4a22      	ldr	r2, [pc, #136]	@ (8003780 <UART_SetConfig+0x118>)
 80036f6:	fba2 2303 	umull	r2, r3, r2, r3
 80036fa:	095b      	lsrs	r3, r3, #5
 80036fc:	0119      	lsls	r1, r3, #4
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	4613      	mov	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	009a      	lsls	r2, r3, #2
 8003708:	441a      	add	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	fbb2 f2f3 	udiv	r2, r2, r3
 8003714:	4b1a      	ldr	r3, [pc, #104]	@ (8003780 <UART_SetConfig+0x118>)
 8003716:	fba3 0302 	umull	r0, r3, r3, r2
 800371a:	095b      	lsrs	r3, r3, #5
 800371c:	2064      	movs	r0, #100	@ 0x64
 800371e:	fb00 f303 	mul.w	r3, r0, r3
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	3332      	adds	r3, #50	@ 0x32
 8003728:	4a15      	ldr	r2, [pc, #84]	@ (8003780 <UART_SetConfig+0x118>)
 800372a:	fba2 2303 	umull	r2, r3, r2, r3
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003734:	4419      	add	r1, r3
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	4613      	mov	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	009a      	lsls	r2, r3, #2
 8003740:	441a      	add	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	fbb2 f2f3 	udiv	r2, r2, r3
 800374c:	4b0c      	ldr	r3, [pc, #48]	@ (8003780 <UART_SetConfig+0x118>)
 800374e:	fba3 0302 	umull	r0, r3, r3, r2
 8003752:	095b      	lsrs	r3, r3, #5
 8003754:	2064      	movs	r0, #100	@ 0x64
 8003756:	fb00 f303 	mul.w	r3, r0, r3
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	011b      	lsls	r3, r3, #4
 800375e:	3332      	adds	r3, #50	@ 0x32
 8003760:	4a07      	ldr	r2, [pc, #28]	@ (8003780 <UART_SetConfig+0x118>)
 8003762:	fba2 2303 	umull	r2, r3, r2, r3
 8003766:	095b      	lsrs	r3, r3, #5
 8003768:	f003 020f 	and.w	r2, r3, #15
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	440a      	add	r2, r1
 8003772:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003774:	bf00      	nop
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40013800 	.word	0x40013800
 8003780:	51eb851f 	.word	0x51eb851f

08003784 <UART_MspInit>:
uint8_t rxbyte;
UART_Driver uart1 = { .huart.Instance = USART1, .isInitialized = 0 };
UART_Driver uart2 = { .huart.Instance = USART2, .isInitialized = 0 };
UART_Driver uart3 = { .huart.Instance = USART3, .isInitialized = 0 };

static void UART_MspInit(UART_HandleTypeDef *huart) {
 8003784:	b580      	push	{r7, lr}
 8003786:	b08c      	sub	sp, #48	@ 0x30
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800378c:	f107 0320 	add.w	r3, r7, #32
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	605a      	str	r2, [r3, #4]
 8003796:	609a      	str	r2, [r3, #8]
 8003798:	60da      	str	r2, [r3, #12]

    if (huart->Instance == USART1) {
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a58      	ldr	r2, [pc, #352]	@ (8003900 <UART_MspInit+0x17c>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d135      	bne.n	8003810 <UART_MspInit+0x8c>
        __HAL_RCC_USART1_CLK_ENABLE();
 80037a4:	4b57      	ldr	r3, [pc, #348]	@ (8003904 <UART_MspInit+0x180>)
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	4a56      	ldr	r2, [pc, #344]	@ (8003904 <UART_MspInit+0x180>)
 80037aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037ae:	6193      	str	r3, [r2, #24]
 80037b0:	4b54      	ldr	r3, [pc, #336]	@ (8003904 <UART_MspInit+0x180>)
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037b8:	61fb      	str	r3, [r7, #28]
 80037ba:	69fb      	ldr	r3, [r7, #28]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 80037bc:	4b51      	ldr	r3, [pc, #324]	@ (8003904 <UART_MspInit+0x180>)
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	4a50      	ldr	r2, [pc, #320]	@ (8003904 <UART_MspInit+0x180>)
 80037c2:	f043 0304 	orr.w	r3, r3, #4
 80037c6:	6193      	str	r3, [r2, #24]
 80037c8:	4b4e      	ldr	r3, [pc, #312]	@ (8003904 <UART_MspInit+0x180>)
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	61bb      	str	r3, [r7, #24]
 80037d2:	69bb      	ldr	r3, [r7, #24]

        GPIO_InitStruct.Pin = GPIO_PIN_9 ;
 80037d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80037d8:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037da:	2302      	movs	r3, #2
 80037dc:	627b      	str	r3, [r7, #36]	@ 0x24
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037de:	2300      	movs	r3, #0
 80037e0:	62bb      	str	r3, [r7, #40]	@ 0x28
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037e2:	2303      	movs	r3, #3
 80037e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037e6:	f107 0320 	add.w	r3, r7, #32
 80037ea:	4619      	mov	r1, r3
 80037ec:	4846      	ldr	r0, [pc, #280]	@ (8003908 <UART_MspInit+0x184>)
 80037ee:	f7fe fa1f 	bl	8001c30 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_10;
 80037f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037f6:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT ;
 80037f8:	2300      	movs	r3, #0
 80037fa:	627b      	str	r3, [r7, #36]	@ 0x24
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fc:	2300      	movs	r3, #0
 80037fe:	62bb      	str	r3, [r7, #40]	@ 0x28
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003800:	2303      	movs	r3, #3
 8003802:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003804:	f107 0320 	add.w	r3, r7, #32
 8003808:	4619      	mov	r1, r3
 800380a:	483f      	ldr	r0, [pc, #252]	@ (8003908 <UART_MspInit+0x184>)
 800380c:	f7fe fa10 	bl	8001c30 <HAL_GPIO_Init>
    }
    if (huart->Instance == USART2) {
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a3d      	ldr	r2, [pc, #244]	@ (800390c <UART_MspInit+0x188>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d133      	bne.n	8003882 <UART_MspInit+0xfe>
        __HAL_RCC_USART2_CLK_ENABLE();
 800381a:	4b3a      	ldr	r3, [pc, #232]	@ (8003904 <UART_MspInit+0x180>)
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	4a39      	ldr	r2, [pc, #228]	@ (8003904 <UART_MspInit+0x180>)
 8003820:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003824:	61d3      	str	r3, [r2, #28]
 8003826:	4b37      	ldr	r3, [pc, #220]	@ (8003904 <UART_MspInit+0x180>)
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	697b      	ldr	r3, [r7, #20]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8003832:	4b34      	ldr	r3, [pc, #208]	@ (8003904 <UART_MspInit+0x180>)
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	4a33      	ldr	r2, [pc, #204]	@ (8003904 <UART_MspInit+0x180>)
 8003838:	f043 0304 	orr.w	r3, r3, #4
 800383c:	6193      	str	r3, [r2, #24]
 800383e:	4b31      	ldr	r3, [pc, #196]	@ (8003904 <UART_MspInit+0x180>)
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	f003 0304 	and.w	r3, r3, #4
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	693b      	ldr	r3, [r7, #16]

        GPIO_InitStruct.Pin = GPIO_PIN_2;
 800384a:	2304      	movs	r3, #4
 800384c:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384e:	2302      	movs	r3, #2
 8003850:	627b      	str	r3, [r7, #36]	@ 0x24
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003852:	2300      	movs	r3, #0
 8003854:	62bb      	str	r3, [r7, #40]	@ 0x28
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003856:	2303      	movs	r3, #3
 8003858:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800385a:	f107 0320 	add.w	r3, r7, #32
 800385e:	4619      	mov	r1, r3
 8003860:	4829      	ldr	r0, [pc, #164]	@ (8003908 <UART_MspInit+0x184>)
 8003862:	f7fe f9e5 	bl	8001c30 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003866:	2308      	movs	r3, #8
 8003868:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800386a:	2300      	movs	r3, #0
 800386c:	627b      	str	r3, [r7, #36]	@ 0x24
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386e:	2300      	movs	r3, #0
 8003870:	62bb      	str	r3, [r7, #40]	@ 0x28
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003872:	2303      	movs	r3, #3
 8003874:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003876:	f107 0320 	add.w	r3, r7, #32
 800387a:	4619      	mov	r1, r3
 800387c:	4822      	ldr	r0, [pc, #136]	@ (8003908 <UART_MspInit+0x184>)
 800387e:	f7fe f9d7 	bl	8001c30 <HAL_GPIO_Init>
    }
    if (huart->Instance == USART3) {
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a22      	ldr	r2, [pc, #136]	@ (8003910 <UART_MspInit+0x18c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d135      	bne.n	80038f8 <UART_MspInit+0x174>
        __HAL_RCC_USART3_CLK_ENABLE();
 800388c:	4b1d      	ldr	r3, [pc, #116]	@ (8003904 <UART_MspInit+0x180>)
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	4a1c      	ldr	r2, [pc, #112]	@ (8003904 <UART_MspInit+0x180>)
 8003892:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003896:	61d3      	str	r3, [r2, #28]
 8003898:	4b1a      	ldr	r3, [pc, #104]	@ (8003904 <UART_MspInit+0x180>)
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	68fb      	ldr	r3, [r7, #12]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 80038a4:	4b17      	ldr	r3, [pc, #92]	@ (8003904 <UART_MspInit+0x180>)
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	4a16      	ldr	r2, [pc, #88]	@ (8003904 <UART_MspInit+0x180>)
 80038aa:	f043 0308 	orr.w	r3, r3, #8
 80038ae:	6193      	str	r3, [r2, #24]
 80038b0:	4b14      	ldr	r3, [pc, #80]	@ (8003904 <UART_MspInit+0x180>)
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	f003 0308 	and.w	r3, r3, #8
 80038b8:	60bb      	str	r3, [r7, #8]
 80038ba:	68bb      	ldr	r3, [r7, #8]

        GPIO_InitStruct.Pin = GPIO_PIN_10;
 80038bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038c0:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c2:	2302      	movs	r3, #2
 80038c4:	627b      	str	r3, [r7, #36]	@ 0x24
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c6:	2300      	movs	r3, #0
 80038c8:	62bb      	str	r3, [r7, #40]	@ 0x28
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038ca:	2303      	movs	r3, #3
 80038cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ce:	f107 0320 	add.w	r3, r7, #32
 80038d2:	4619      	mov	r1, r3
 80038d4:	480f      	ldr	r0, [pc, #60]	@ (8003914 <UART_MspInit+0x190>)
 80038d6:	f7fe f9ab 	bl	8001c30 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_11;
 80038da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80038de:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038e0:	2300      	movs	r3, #0
 80038e2:	627b      	str	r3, [r7, #36]	@ 0x24
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e4:	2300      	movs	r3, #0
 80038e6:	62bb      	str	r3, [r7, #40]	@ 0x28
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038e8:	2303      	movs	r3, #3
 80038ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ec:	f107 0320 	add.w	r3, r7, #32
 80038f0:	4619      	mov	r1, r3
 80038f2:	4808      	ldr	r0, [pc, #32]	@ (8003914 <UART_MspInit+0x190>)
 80038f4:	f7fe f99c 	bl	8001c30 <HAL_GPIO_Init>
    }
}
 80038f8:	bf00      	nop
 80038fa:	3730      	adds	r7, #48	@ 0x30
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40013800 	.word	0x40013800
 8003904:	40021000 	.word	0x40021000
 8003908:	40010800 	.word	0x40010800
 800390c:	40004400 	.word	0x40004400
 8003910:	40004800 	.word	0x40004800
 8003914:	40010c00 	.word	0x40010c00

08003918 <UART_Init>:

int UART_Init(UART_Driver *uart, UART_Config config) {
 8003918:	b084      	sub	sp, #16
 800391a:	b590      	push	{r4, r7, lr}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
 8003922:	f107 001c 	add.w	r0, r7, #28
 8003926:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (uart->isInitialized) {
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <UART_Init+0x22>
        return -1; // UART đã được khởi tạo trước đó
 8003934:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003938:	e02e      	b.n	8003998 <UART_Init+0x80>
    }
    uart->config = config;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f103 0448 	add.w	r4, r3, #72	@ 0x48
 8003940:	f107 031c 	add.w	r3, r7, #28
 8003944:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003946:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    uart->huart.Init.BaudRate = config.baudRate;
 800394a:	69fa      	ldr	r2, [r7, #28]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	605a      	str	r2, [r3, #4]
    uart->huart.Init.WordLength = config.wordLength;
 8003950:	6a3a      	ldr	r2, [r7, #32]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	609a      	str	r2, [r3, #8]
    uart->huart.Init.StopBits = config.stopBits;
 8003956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	60da      	str	r2, [r3, #12]
    uart->huart.Init.Parity = config.parity;
 800395c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	611a      	str	r2, [r3, #16]
    uart->huart.Init.Mode = UART_MODE_TX_RX;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	220c      	movs	r2, #12
 8003966:	615a      	str	r2, [r3, #20]
    uart->huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	619a      	str	r2, [r3, #24]
    uart->huart.Init.OverSampling = UART_OVERSAMPLING_16;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	61da      	str	r2, [r3, #28]

    UART_MspInit(&uart->huart);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff ff04 	bl	8003784 <UART_MspInit>

    if (HAL_UART_Init(&uart->huart) != HAL_OK) {
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff f888 	bl	8002a94 <HAL_UART_Init>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <UART_Init+0x76>
        return 1; // Khởi tạo thất bại
 800398a:	2301      	movs	r3, #1
 800398c:	e004      	b.n	8003998 <UART_Init+0x80>
    }
    uart->isInitialized = 1;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    return 0; // Khởi tạo thành công
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80039a2:	b004      	add	sp, #16
 80039a4:	4770      	bx	lr

080039a6 <UART_SendString>:


void UART_SendString(UART_HandleTypeDef *huart, const char *str) {
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b082      	sub	sp, #8
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
 80039ae:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80039b0:	6838      	ldr	r0, [r7, #0]
 80039b2:	f7fc fbd5 	bl	8000160 <strlen>
 80039b6:	4603      	mov	r3, r0
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80039be:	6839      	ldr	r1, [r7, #0]
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7ff f8b7 	bl	8002b34 <HAL_UART_Transmit>
}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
	...

080039d0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a12      	ldr	r2, [pc, #72]	@ (8003a28 <HAL_UART_RxCpltCallback+0x58>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d11e      	bne.n	8003a20 <HAL_UART_RxCpltCallback+0x50>
	  if (Setstop){
 80039e2:	4b12      	ldr	r3, [pc, #72]	@ (8003a2c <HAL_UART_RxCpltCallback+0x5c>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00e      	beq.n	8003a0a <HAL_UART_RxCpltCallback+0x3a>
		  if (rxbyte == 0x03) {  // Kiểm tra lệnh Ctrl+C
 80039ec:	4b10      	ldr	r3, [pc, #64]	@ (8003a30 <HAL_UART_RxCpltCallback+0x60>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d103      	bne.n	80039fc <HAL_UART_RxCpltCallback+0x2c>
			  Setstop = 0;
 80039f4:	4b0d      	ldr	r3, [pc, #52]	@ (8003a2c <HAL_UART_RxCpltCallback+0x5c>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	701a      	strb	r2, [r3, #0]
 80039fa:	e006      	b.n	8003a0a <HAL_UART_RxCpltCallback+0x3a>
		  }
		  else {
			  HAL_UART_Transmit(&uart1.huart, &rxbyte, 1, HAL_MAX_DELAY);
 80039fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a00:	2201      	movs	r2, #1
 8003a02:	490b      	ldr	r1, [pc, #44]	@ (8003a30 <HAL_UART_RxCpltCallback+0x60>)
 8003a04:	480b      	ldr	r0, [pc, #44]	@ (8003a34 <HAL_UART_RxCpltCallback+0x64>)
 8003a06:	f7ff f895 	bl	8002b34 <HAL_UART_Transmit>
		  }
	  }
	  CircularBuffer_Write(&rxBuffer, rxbyte);
 8003a0a:	4b09      	ldr	r3, [pc, #36]	@ (8003a30 <HAL_UART_RxCpltCallback+0x60>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	4619      	mov	r1, r3
 8003a10:	4809      	ldr	r0, [pc, #36]	@ (8003a38 <HAL_UART_RxCpltCallback+0x68>)
 8003a12:	f000 f824 	bl	8003a5e <CircularBuffer_Write>
	  HAL_UART_Receive_IT(&uart1.huart, &rxbyte, 1);
 8003a16:	2201      	movs	r2, #1
 8003a18:	4905      	ldr	r1, [pc, #20]	@ (8003a30 <HAL_UART_RxCpltCallback+0x60>)
 8003a1a:	4806      	ldr	r0, [pc, #24]	@ (8003a34 <HAL_UART_RxCpltCallback+0x64>)
 8003a1c:	f7ff f90d 	bl	8002c3a <HAL_UART_Receive_IT>
  }
}
 8003a20:	bf00      	nop
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40013800 	.word	0x40013800
 8003a2c:	200003d4 	.word	0x200003d4
 8003a30:	200003d5 	.word	0x200003d5
 8003a34:	2000004c 	.word	0x2000004c
 8003a38:	200003d8 	.word	0x200003d8

08003a3c <send_byte>:
void send_byte(UART_HandleTypeDef *huart, uint8_t byte) {
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	70fb      	strb	r3, [r7, #3]
    HAL_UART_Transmit(huart, &byte, 1, HAL_MAX_DELAY);
 8003a48:	1cf9      	adds	r1, r7, #3
 8003a4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a4e:	2201      	movs	r2, #1
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7ff f86f 	bl	8002b34 <HAL_UART_Transmit>
}
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <CircularBuffer_Write>:

#include "circular_bf.h"

CircularBuffer rxBuffer = { {0}, 0, 0 };

int CircularBuffer_Write(CircularBuffer *cb, uint8_t data) {
 8003a5e:	b480      	push	{r7}
 8003a60:	b085      	sub	sp, #20
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
 8003a66:	460b      	mov	r3, r1
 8003a68:	70fb      	strb	r3, [r7, #3]
    uint16_t next = (cb->head + 1) % BUFFER_SIZE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	3301      	adds	r3, #1
 8003a74:	425a      	negs	r2, r3
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	b2d2      	uxtb	r2, r2
 8003a7a:	bf58      	it	pl
 8003a7c:	4253      	negpl	r3, r2
 8003a7e:	81fb      	strh	r3, [r7, #14]
    if (next == cb->tail) {
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	89fa      	ldrh	r2, [r7, #14]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d101      	bne.n	8003a92 <CircularBuffer_Write+0x34>
            return 0;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	e00c      	b.n	8003aac <CircularBuffer_Write+0x4e>
    } else {
            cb->buffer[cb->head] = data;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	78fa      	ldrb	r2, [r7, #3]
 8003aa0:	545a      	strb	r2, [r3, r1]
            cb->head = next;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	89fa      	ldrh	r2, [r7, #14]
 8003aa6:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
            return 1;
 8003aaa:	2301      	movs	r3, #1
    }
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	4770      	bx	lr

08003ab6 <CircularBuffer_Read>:
int CircularBuffer_Read(CircularBuffer *cb, uint8_t *data) {
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
 8003abe:	6039      	str	r1, [r7, #0]
    if (cb->head == cb->tail) {
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d101      	bne.n	8003ad8 <CircularBuffer_Read+0x22>
        return 0; // Buffer empty
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	e017      	b.n	8003b08 <CircularBuffer_Read+0x52>
    }
    *data = cb->buffer[cb->tail];
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	5c9a      	ldrb	r2, [r3, r2]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	701a      	strb	r2, [r3, #0]
    cb->tail = (cb->tail + 1) % BUFFER_SIZE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	3301      	adds	r3, #1
 8003af4:	425a      	negs	r2, r3
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	b2d2      	uxtb	r2, r2
 8003afa:	bf58      	it	pl
 8003afc:	4253      	negpl	r3, r2
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
    return 1; // Success
 8003b06:	2301      	movs	r3, #1
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bc80      	pop	{r7}
 8003b10:	4770      	bx	lr
	...

08003b14 <processCommand>:
#define MAX_COUNT	3
#define MIN_PINLED	0
#define MAX_PINLED	8
int check_arg(char *args);

void processCommand(CommandMapping *ptr, char *cmd){
 8003b14:	b590      	push	{r4, r7, lr}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
    char *token = strtok(cmd, " ");
 8003b1e:	492f      	ldr	r1, [pc, #188]	@ (8003bdc <processCommand+0xc8>)
 8003b20:	6838      	ldr	r0, [r7, #0]
 8003b22:	f000 fa53 	bl	8003fcc <strtok>
 8003b26:	60f8      	str	r0, [r7, #12]
    for (CommandMapping *mapping = ptr; mapping->command != NULL; mapping++) {
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	e04b      	b.n	8003bc6 <processCommand+0xb2>
        if (strcmp(token, mapping->command) == 0) {
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4619      	mov	r1, r3
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f7fc fb09 	bl	800014c <strcmp>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d13f      	bne.n	8003bc0 <processCommand+0xac>
        	char *token = strtok(NULL, " ");
 8003b40:	4926      	ldr	r1, [pc, #152]	@ (8003bdc <processCommand+0xc8>)
 8003b42:	2000      	movs	r0, #0
 8003b44:	f000 fa42 	bl	8003fcc <strtok>
 8003b48:	6138      	str	r0, [r7, #16]
			count = 0;
 8003b4a:	4b25      	ldr	r3, [pc, #148]	@ (8003be0 <processCommand+0xcc>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]
			while (token != NULL) {
 8003b50:	e01f      	b.n	8003b92 <processCommand+0x7e>
				uint8_t pin = atoi(token);
 8003b52:	6938      	ldr	r0, [r7, #16]
 8003b54:	f000 f870 	bl	8003c38 <atoi>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	72fb      	strb	r3, [r7, #11]
				if (pin >= MIN_PINLED && pin <= MAX_PINLED) {
 8003b5c:	7afb      	ldrb	r3, [r7, #11]
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d80e      	bhi.n	8003b80 <processCommand+0x6c>
					if (count < MAX_COUNT) {
 8003b62:	4b1f      	ldr	r3, [pc, #124]	@ (8003be0 <processCommand+0xcc>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	dc04      	bgt.n	8003b74 <processCommand+0x60>
						pins[count] = pin;
 8003b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8003be0 <processCommand+0xcc>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	491d      	ldr	r1, [pc, #116]	@ (8003be4 <processCommand+0xd0>)
 8003b70:	7afa      	ldrb	r2, [r7, #11]
 8003b72:	54ca      	strb	r2, [r1, r3]
					}
					count++;
 8003b74:	4b1a      	ldr	r3, [pc, #104]	@ (8003be0 <processCommand+0xcc>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	4a19      	ldr	r2, [pc, #100]	@ (8003be0 <processCommand+0xcc>)
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	e003      	b.n	8003b88 <processCommand+0x74>
				} else {
					UART_SendString(&uart1.huart, "\r\nError: Invalid pin. Only PA4, PA5, PA6, PA7, and PA8 are allowed.");
 8003b80:	4919      	ldr	r1, [pc, #100]	@ (8003be8 <processCommand+0xd4>)
 8003b82:	481a      	ldr	r0, [pc, #104]	@ (8003bec <processCommand+0xd8>)
 8003b84:	f7ff ff0f 	bl	80039a6 <UART_SendString>
				}
				token = strtok(NULL, " ");
 8003b88:	4914      	ldr	r1, [pc, #80]	@ (8003bdc <processCommand+0xc8>)
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	f000 fa1e 	bl	8003fcc <strtok>
 8003b90:	6138      	str	r0, [r7, #16]
			while (token != NULL) {
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1dc      	bne.n	8003b52 <processCommand+0x3e>
			}
			if (count > MAX_COUNT) {
 8003b98:	4b11      	ldr	r3, [pc, #68]	@ (8003be0 <processCommand+0xcc>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	dd03      	ble.n	8003ba8 <processCommand+0x94>
				UART_SendString(&uart1.huart, "\r\nError: Too many arguments.");
 8003ba0:	4913      	ldr	r1, [pc, #76]	@ (8003bf0 <processCommand+0xdc>)
 8003ba2:	4812      	ldr	r0, [pc, #72]	@ (8003bec <processCommand+0xd8>)
 8003ba4:	f7ff feff 	bl	80039a6 <UART_SendString>
			}
        	mapping->handler(strtok(NULL, ""));	//strtok(NULL, "" chính là phần còn lại sau khi tách lệnh, phần này là phần đối số
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	685c      	ldr	r4, [r3, #4]
 8003bac:	4911      	ldr	r1, [pc, #68]	@ (8003bf4 <processCommand+0xe0>)
 8003bae:	2000      	movs	r0, #0
 8003bb0:	f000 fa0c 	bl	8003fcc <strtok>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	47a0      	blx	r4
        	prompt();
 8003bba:	f000 f831 	bl	8003c20 <prompt>
            return;
 8003bbe:	e009      	b.n	8003bd4 <processCommand+0xc0>
    for (CommandMapping *mapping = ptr; mapping->command != NULL; mapping++) {
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	3308      	adds	r3, #8
 8003bc4:	617b      	str	r3, [r7, #20]
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1af      	bne.n	8003b2e <processCommand+0x1a>
        }
    }
    handleInvalidCommand(NULL);
 8003bce:	2000      	movs	r0, #0
 8003bd0:	f7fc fcac 	bl	800052c <handleInvalidCommand>
}
 8003bd4:	371c      	adds	r7, #28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd90      	pop	{r4, r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	08005220 	.word	0x08005220
 8003be0:	20000224 	.word	0x20000224
 8003be4:	20000228 	.word	0x20000228
 8003be8:	08005224 	.word	0x08005224
 8003bec:	2000004c 	.word	0x2000004c
 8003bf0:	08005268 	.word	0x08005268
 8003bf4:	08005288 	.word	0x08005288

08003bf8 <checkCtrlC>:
void checkCtrlC(uint8_t data){
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	4603      	mov	r3, r0
 8003c00:	71fb      	strb	r3, [r7, #7]
	if (data == 0x03){
 8003c02:	79fb      	ldrb	r3, [r7, #7]
 8003c04:	2b03      	cmp	r3, #3
 8003c06:	d103      	bne.n	8003c10 <checkCtrlC+0x18>
		UART_SendString(&uart1.huart, "^C\n\r"PROMPT);
 8003c08:	4903      	ldr	r1, [pc, #12]	@ (8003c18 <checkCtrlC+0x20>)
 8003c0a:	4804      	ldr	r0, [pc, #16]	@ (8003c1c <checkCtrlC+0x24>)
 8003c0c:	f7ff fecb 	bl	80039a6 <UART_SendString>
	}
}
 8003c10:	bf00      	nop
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	0800528c 	.word	0x0800528c
 8003c1c:	2000004c 	.word	0x2000004c

08003c20 <prompt>:
void prompt(){
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
	UART_SendString(&uart1.huart, "\n\r"PROMPT);
 8003c24:	4902      	ldr	r1, [pc, #8]	@ (8003c30 <prompt+0x10>)
 8003c26:	4803      	ldr	r0, [pc, #12]	@ (8003c34 <prompt+0x14>)
 8003c28:	f7ff febd 	bl	80039a6 <UART_SendString>
}
 8003c2c:	bf00      	nop
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	080052a0 	.word	0x080052a0
 8003c34:	2000004c 	.word	0x2000004c

08003c38 <atoi>:
 8003c38:	220a      	movs	r2, #10
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	f000 b87a 	b.w	8003d34 <strtol>

08003c40 <_strtol_l.constprop.0>:
 8003c40:	2b24      	cmp	r3, #36	@ 0x24
 8003c42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c46:	4686      	mov	lr, r0
 8003c48:	4690      	mov	r8, r2
 8003c4a:	d801      	bhi.n	8003c50 <_strtol_l.constprop.0+0x10>
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d106      	bne.n	8003c5e <_strtol_l.constprop.0+0x1e>
 8003c50:	f000 fa5e 	bl	8004110 <__errno>
 8003c54:	2316      	movs	r3, #22
 8003c56:	6003      	str	r3, [r0, #0]
 8003c58:	2000      	movs	r0, #0
 8003c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c5e:	460d      	mov	r5, r1
 8003c60:	4833      	ldr	r0, [pc, #204]	@ (8003d30 <_strtol_l.constprop.0+0xf0>)
 8003c62:	462a      	mov	r2, r5
 8003c64:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003c68:	5d06      	ldrb	r6, [r0, r4]
 8003c6a:	f016 0608 	ands.w	r6, r6, #8
 8003c6e:	d1f8      	bne.n	8003c62 <_strtol_l.constprop.0+0x22>
 8003c70:	2c2d      	cmp	r4, #45	@ 0x2d
 8003c72:	d12d      	bne.n	8003cd0 <_strtol_l.constprop.0+0x90>
 8003c74:	2601      	movs	r6, #1
 8003c76:	782c      	ldrb	r4, [r5, #0]
 8003c78:	1c95      	adds	r5, r2, #2
 8003c7a:	f033 0210 	bics.w	r2, r3, #16
 8003c7e:	d109      	bne.n	8003c94 <_strtol_l.constprop.0+0x54>
 8003c80:	2c30      	cmp	r4, #48	@ 0x30
 8003c82:	d12a      	bne.n	8003cda <_strtol_l.constprop.0+0x9a>
 8003c84:	782a      	ldrb	r2, [r5, #0]
 8003c86:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003c8a:	2a58      	cmp	r2, #88	@ 0x58
 8003c8c:	d125      	bne.n	8003cda <_strtol_l.constprop.0+0x9a>
 8003c8e:	2310      	movs	r3, #16
 8003c90:	786c      	ldrb	r4, [r5, #1]
 8003c92:	3502      	adds	r5, #2
 8003c94:	2200      	movs	r2, #0
 8003c96:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003c9a:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8003c9e:	fbbc f9f3 	udiv	r9, ip, r3
 8003ca2:	4610      	mov	r0, r2
 8003ca4:	fb03 ca19 	mls	sl, r3, r9, ip
 8003ca8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003cac:	2f09      	cmp	r7, #9
 8003cae:	d81b      	bhi.n	8003ce8 <_strtol_l.constprop.0+0xa8>
 8003cb0:	463c      	mov	r4, r7
 8003cb2:	42a3      	cmp	r3, r4
 8003cb4:	dd27      	ble.n	8003d06 <_strtol_l.constprop.0+0xc6>
 8003cb6:	1c57      	adds	r7, r2, #1
 8003cb8:	d007      	beq.n	8003cca <_strtol_l.constprop.0+0x8a>
 8003cba:	4581      	cmp	r9, r0
 8003cbc:	d320      	bcc.n	8003d00 <_strtol_l.constprop.0+0xc0>
 8003cbe:	d101      	bne.n	8003cc4 <_strtol_l.constprop.0+0x84>
 8003cc0:	45a2      	cmp	sl, r4
 8003cc2:	db1d      	blt.n	8003d00 <_strtol_l.constprop.0+0xc0>
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	fb00 4003 	mla	r0, r0, r3, r4
 8003cca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003cce:	e7eb      	b.n	8003ca8 <_strtol_l.constprop.0+0x68>
 8003cd0:	2c2b      	cmp	r4, #43	@ 0x2b
 8003cd2:	bf04      	itt	eq
 8003cd4:	782c      	ldrbeq	r4, [r5, #0]
 8003cd6:	1c95      	addeq	r5, r2, #2
 8003cd8:	e7cf      	b.n	8003c7a <_strtol_l.constprop.0+0x3a>
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1da      	bne.n	8003c94 <_strtol_l.constprop.0+0x54>
 8003cde:	2c30      	cmp	r4, #48	@ 0x30
 8003ce0:	bf0c      	ite	eq
 8003ce2:	2308      	moveq	r3, #8
 8003ce4:	230a      	movne	r3, #10
 8003ce6:	e7d5      	b.n	8003c94 <_strtol_l.constprop.0+0x54>
 8003ce8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003cec:	2f19      	cmp	r7, #25
 8003cee:	d801      	bhi.n	8003cf4 <_strtol_l.constprop.0+0xb4>
 8003cf0:	3c37      	subs	r4, #55	@ 0x37
 8003cf2:	e7de      	b.n	8003cb2 <_strtol_l.constprop.0+0x72>
 8003cf4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003cf8:	2f19      	cmp	r7, #25
 8003cfa:	d804      	bhi.n	8003d06 <_strtol_l.constprop.0+0xc6>
 8003cfc:	3c57      	subs	r4, #87	@ 0x57
 8003cfe:	e7d8      	b.n	8003cb2 <_strtol_l.constprop.0+0x72>
 8003d00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003d04:	e7e1      	b.n	8003cca <_strtol_l.constprop.0+0x8a>
 8003d06:	1c53      	adds	r3, r2, #1
 8003d08:	d108      	bne.n	8003d1c <_strtol_l.constprop.0+0xdc>
 8003d0a:	2322      	movs	r3, #34	@ 0x22
 8003d0c:	4660      	mov	r0, ip
 8003d0e:	f8ce 3000 	str.w	r3, [lr]
 8003d12:	f1b8 0f00 	cmp.w	r8, #0
 8003d16:	d0a0      	beq.n	8003c5a <_strtol_l.constprop.0+0x1a>
 8003d18:	1e69      	subs	r1, r5, #1
 8003d1a:	e006      	b.n	8003d2a <_strtol_l.constprop.0+0xea>
 8003d1c:	b106      	cbz	r6, 8003d20 <_strtol_l.constprop.0+0xe0>
 8003d1e:	4240      	negs	r0, r0
 8003d20:	f1b8 0f00 	cmp.w	r8, #0
 8003d24:	d099      	beq.n	8003c5a <_strtol_l.constprop.0+0x1a>
 8003d26:	2a00      	cmp	r2, #0
 8003d28:	d1f6      	bne.n	8003d18 <_strtol_l.constprop.0+0xd8>
 8003d2a:	f8c8 1000 	str.w	r1, [r8]
 8003d2e:	e794      	b.n	8003c5a <_strtol_l.constprop.0+0x1a>
 8003d30:	080052ef 	.word	0x080052ef

08003d34 <strtol>:
 8003d34:	4613      	mov	r3, r2
 8003d36:	460a      	mov	r2, r1
 8003d38:	4601      	mov	r1, r0
 8003d3a:	4802      	ldr	r0, [pc, #8]	@ (8003d44 <strtol+0x10>)
 8003d3c:	6800      	ldr	r0, [r0, #0]
 8003d3e:	f7ff bf7f 	b.w	8003c40 <_strtol_l.constprop.0>
 8003d42:	bf00      	nop
 8003d44:	200000b4 	.word	0x200000b4

08003d48 <std>:
 8003d48:	2300      	movs	r3, #0
 8003d4a:	b510      	push	{r4, lr}
 8003d4c:	4604      	mov	r4, r0
 8003d4e:	e9c0 3300 	strd	r3, r3, [r0]
 8003d52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d56:	6083      	str	r3, [r0, #8]
 8003d58:	8181      	strh	r1, [r0, #12]
 8003d5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003d5c:	81c2      	strh	r2, [r0, #14]
 8003d5e:	6183      	str	r3, [r0, #24]
 8003d60:	4619      	mov	r1, r3
 8003d62:	2208      	movs	r2, #8
 8003d64:	305c      	adds	r0, #92	@ 0x5c
 8003d66:	f000 f928 	bl	8003fba <memset>
 8003d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003da0 <std+0x58>)
 8003d6c:	6224      	str	r4, [r4, #32]
 8003d6e:	6263      	str	r3, [r4, #36]	@ 0x24
 8003d70:	4b0c      	ldr	r3, [pc, #48]	@ (8003da4 <std+0x5c>)
 8003d72:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003d74:	4b0c      	ldr	r3, [pc, #48]	@ (8003da8 <std+0x60>)
 8003d76:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003d78:	4b0c      	ldr	r3, [pc, #48]	@ (8003dac <std+0x64>)
 8003d7a:	6323      	str	r3, [r4, #48]	@ 0x30
 8003d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003db0 <std+0x68>)
 8003d7e:	429c      	cmp	r4, r3
 8003d80:	d006      	beq.n	8003d90 <std+0x48>
 8003d82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003d86:	4294      	cmp	r4, r2
 8003d88:	d002      	beq.n	8003d90 <std+0x48>
 8003d8a:	33d0      	adds	r3, #208	@ 0xd0
 8003d8c:	429c      	cmp	r4, r3
 8003d8e:	d105      	bne.n	8003d9c <std+0x54>
 8003d90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d98:	f000 b9e4 	b.w	8004164 <__retarget_lock_init_recursive>
 8003d9c:	bd10      	pop	{r4, pc}
 8003d9e:	bf00      	nop
 8003da0:	08003f35 	.word	0x08003f35
 8003da4:	08003f57 	.word	0x08003f57
 8003da8:	08003f8f 	.word	0x08003f8f
 8003dac:	08003fb3 	.word	0x08003fb3
 8003db0:	200004dc 	.word	0x200004dc

08003db4 <stdio_exit_handler>:
 8003db4:	4a02      	ldr	r2, [pc, #8]	@ (8003dc0 <stdio_exit_handler+0xc>)
 8003db6:	4903      	ldr	r1, [pc, #12]	@ (8003dc4 <stdio_exit_handler+0x10>)
 8003db8:	4803      	ldr	r0, [pc, #12]	@ (8003dc8 <stdio_exit_handler+0x14>)
 8003dba:	f000 b869 	b.w	8003e90 <_fwalk_sglue>
 8003dbe:	bf00      	nop
 8003dc0:	200000a8 	.word	0x200000a8
 8003dc4:	08004a79 	.word	0x08004a79
 8003dc8:	200000b8 	.word	0x200000b8

08003dcc <cleanup_stdio>:
 8003dcc:	6841      	ldr	r1, [r0, #4]
 8003dce:	4b0c      	ldr	r3, [pc, #48]	@ (8003e00 <cleanup_stdio+0x34>)
 8003dd0:	b510      	push	{r4, lr}
 8003dd2:	4299      	cmp	r1, r3
 8003dd4:	4604      	mov	r4, r0
 8003dd6:	d001      	beq.n	8003ddc <cleanup_stdio+0x10>
 8003dd8:	f000 fe4e 	bl	8004a78 <_fflush_r>
 8003ddc:	68a1      	ldr	r1, [r4, #8]
 8003dde:	4b09      	ldr	r3, [pc, #36]	@ (8003e04 <cleanup_stdio+0x38>)
 8003de0:	4299      	cmp	r1, r3
 8003de2:	d002      	beq.n	8003dea <cleanup_stdio+0x1e>
 8003de4:	4620      	mov	r0, r4
 8003de6:	f000 fe47 	bl	8004a78 <_fflush_r>
 8003dea:	68e1      	ldr	r1, [r4, #12]
 8003dec:	4b06      	ldr	r3, [pc, #24]	@ (8003e08 <cleanup_stdio+0x3c>)
 8003dee:	4299      	cmp	r1, r3
 8003df0:	d004      	beq.n	8003dfc <cleanup_stdio+0x30>
 8003df2:	4620      	mov	r0, r4
 8003df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003df8:	f000 be3e 	b.w	8004a78 <_fflush_r>
 8003dfc:	bd10      	pop	{r4, pc}
 8003dfe:	bf00      	nop
 8003e00:	200004dc 	.word	0x200004dc
 8003e04:	20000544 	.word	0x20000544
 8003e08:	200005ac 	.word	0x200005ac

08003e0c <global_stdio_init.part.0>:
 8003e0c:	b510      	push	{r4, lr}
 8003e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e3c <global_stdio_init.part.0+0x30>)
 8003e10:	4c0b      	ldr	r4, [pc, #44]	@ (8003e40 <global_stdio_init.part.0+0x34>)
 8003e12:	4a0c      	ldr	r2, [pc, #48]	@ (8003e44 <global_stdio_init.part.0+0x38>)
 8003e14:	4620      	mov	r0, r4
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	2104      	movs	r1, #4
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f7ff ff94 	bl	8003d48 <std>
 8003e20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003e24:	2201      	movs	r2, #1
 8003e26:	2109      	movs	r1, #9
 8003e28:	f7ff ff8e 	bl	8003d48 <std>
 8003e2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003e30:	2202      	movs	r2, #2
 8003e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e36:	2112      	movs	r1, #18
 8003e38:	f7ff bf86 	b.w	8003d48 <std>
 8003e3c:	20000614 	.word	0x20000614
 8003e40:	200004dc 	.word	0x200004dc
 8003e44:	08003db5 	.word	0x08003db5

08003e48 <__sfp_lock_acquire>:
 8003e48:	4801      	ldr	r0, [pc, #4]	@ (8003e50 <__sfp_lock_acquire+0x8>)
 8003e4a:	f000 b98c 	b.w	8004166 <__retarget_lock_acquire_recursive>
 8003e4e:	bf00      	nop
 8003e50:	2000061d 	.word	0x2000061d

08003e54 <__sfp_lock_release>:
 8003e54:	4801      	ldr	r0, [pc, #4]	@ (8003e5c <__sfp_lock_release+0x8>)
 8003e56:	f000 b987 	b.w	8004168 <__retarget_lock_release_recursive>
 8003e5a:	bf00      	nop
 8003e5c:	2000061d 	.word	0x2000061d

08003e60 <__sinit>:
 8003e60:	b510      	push	{r4, lr}
 8003e62:	4604      	mov	r4, r0
 8003e64:	f7ff fff0 	bl	8003e48 <__sfp_lock_acquire>
 8003e68:	6a23      	ldr	r3, [r4, #32]
 8003e6a:	b11b      	cbz	r3, 8003e74 <__sinit+0x14>
 8003e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e70:	f7ff bff0 	b.w	8003e54 <__sfp_lock_release>
 8003e74:	4b04      	ldr	r3, [pc, #16]	@ (8003e88 <__sinit+0x28>)
 8003e76:	6223      	str	r3, [r4, #32]
 8003e78:	4b04      	ldr	r3, [pc, #16]	@ (8003e8c <__sinit+0x2c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1f5      	bne.n	8003e6c <__sinit+0xc>
 8003e80:	f7ff ffc4 	bl	8003e0c <global_stdio_init.part.0>
 8003e84:	e7f2      	b.n	8003e6c <__sinit+0xc>
 8003e86:	bf00      	nop
 8003e88:	08003dcd 	.word	0x08003dcd
 8003e8c:	20000614 	.word	0x20000614

08003e90 <_fwalk_sglue>:
 8003e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e94:	4607      	mov	r7, r0
 8003e96:	4688      	mov	r8, r1
 8003e98:	4614      	mov	r4, r2
 8003e9a:	2600      	movs	r6, #0
 8003e9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ea0:	f1b9 0901 	subs.w	r9, r9, #1
 8003ea4:	d505      	bpl.n	8003eb2 <_fwalk_sglue+0x22>
 8003ea6:	6824      	ldr	r4, [r4, #0]
 8003ea8:	2c00      	cmp	r4, #0
 8003eaa:	d1f7      	bne.n	8003e9c <_fwalk_sglue+0xc>
 8003eac:	4630      	mov	r0, r6
 8003eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003eb2:	89ab      	ldrh	r3, [r5, #12]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d907      	bls.n	8003ec8 <_fwalk_sglue+0x38>
 8003eb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	d003      	beq.n	8003ec8 <_fwalk_sglue+0x38>
 8003ec0:	4629      	mov	r1, r5
 8003ec2:	4638      	mov	r0, r7
 8003ec4:	47c0      	blx	r8
 8003ec6:	4306      	orrs	r6, r0
 8003ec8:	3568      	adds	r5, #104	@ 0x68
 8003eca:	e7e9      	b.n	8003ea0 <_fwalk_sglue+0x10>

08003ecc <sniprintf>:
 8003ecc:	b40c      	push	{r2, r3}
 8003ece:	b530      	push	{r4, r5, lr}
 8003ed0:	4b17      	ldr	r3, [pc, #92]	@ (8003f30 <sniprintf+0x64>)
 8003ed2:	1e0c      	subs	r4, r1, #0
 8003ed4:	681d      	ldr	r5, [r3, #0]
 8003ed6:	b09d      	sub	sp, #116	@ 0x74
 8003ed8:	da08      	bge.n	8003eec <sniprintf+0x20>
 8003eda:	238b      	movs	r3, #139	@ 0x8b
 8003edc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ee0:	602b      	str	r3, [r5, #0]
 8003ee2:	b01d      	add	sp, #116	@ 0x74
 8003ee4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ee8:	b002      	add	sp, #8
 8003eea:	4770      	bx	lr
 8003eec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003ef0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003ef4:	bf0c      	ite	eq
 8003ef6:	4623      	moveq	r3, r4
 8003ef8:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8003efc:	9304      	str	r3, [sp, #16]
 8003efe:	9307      	str	r3, [sp, #28]
 8003f00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f04:	9002      	str	r0, [sp, #8]
 8003f06:	9006      	str	r0, [sp, #24]
 8003f08:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	ab21      	add	r3, sp, #132	@ 0x84
 8003f10:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003f12:	a902      	add	r1, sp, #8
 8003f14:	9301      	str	r3, [sp, #4]
 8003f16:	f000 faa1 	bl	800445c <_svfiprintf_r>
 8003f1a:	1c43      	adds	r3, r0, #1
 8003f1c:	bfbc      	itt	lt
 8003f1e:	238b      	movlt	r3, #139	@ 0x8b
 8003f20:	602b      	strlt	r3, [r5, #0]
 8003f22:	2c00      	cmp	r4, #0
 8003f24:	d0dd      	beq.n	8003ee2 <sniprintf+0x16>
 8003f26:	2200      	movs	r2, #0
 8003f28:	9b02      	ldr	r3, [sp, #8]
 8003f2a:	701a      	strb	r2, [r3, #0]
 8003f2c:	e7d9      	b.n	8003ee2 <sniprintf+0x16>
 8003f2e:	bf00      	nop
 8003f30:	200000b4 	.word	0x200000b4

08003f34 <__sread>:
 8003f34:	b510      	push	{r4, lr}
 8003f36:	460c      	mov	r4, r1
 8003f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f3c:	f000 f8c4 	bl	80040c8 <_read_r>
 8003f40:	2800      	cmp	r0, #0
 8003f42:	bfab      	itete	ge
 8003f44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003f46:	89a3      	ldrhlt	r3, [r4, #12]
 8003f48:	181b      	addge	r3, r3, r0
 8003f4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003f4e:	bfac      	ite	ge
 8003f50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003f52:	81a3      	strhlt	r3, [r4, #12]
 8003f54:	bd10      	pop	{r4, pc}

08003f56 <__swrite>:
 8003f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f5a:	461f      	mov	r7, r3
 8003f5c:	898b      	ldrh	r3, [r1, #12]
 8003f5e:	4605      	mov	r5, r0
 8003f60:	05db      	lsls	r3, r3, #23
 8003f62:	460c      	mov	r4, r1
 8003f64:	4616      	mov	r6, r2
 8003f66:	d505      	bpl.n	8003f74 <__swrite+0x1e>
 8003f68:	2302      	movs	r3, #2
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f70:	f000 f898 	bl	80040a4 <_lseek_r>
 8003f74:	89a3      	ldrh	r3, [r4, #12]
 8003f76:	4632      	mov	r2, r6
 8003f78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f7c:	81a3      	strh	r3, [r4, #12]
 8003f7e:	4628      	mov	r0, r5
 8003f80:	463b      	mov	r3, r7
 8003f82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f8a:	f000 b8af 	b.w	80040ec <_write_r>

08003f8e <__sseek>:
 8003f8e:	b510      	push	{r4, lr}
 8003f90:	460c      	mov	r4, r1
 8003f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f96:	f000 f885 	bl	80040a4 <_lseek_r>
 8003f9a:	1c43      	adds	r3, r0, #1
 8003f9c:	89a3      	ldrh	r3, [r4, #12]
 8003f9e:	bf15      	itete	ne
 8003fa0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003fa2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003fa6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003faa:	81a3      	strheq	r3, [r4, #12]
 8003fac:	bf18      	it	ne
 8003fae:	81a3      	strhne	r3, [r4, #12]
 8003fb0:	bd10      	pop	{r4, pc}

08003fb2 <__sclose>:
 8003fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fb6:	f000 b865 	b.w	8004084 <_close_r>

08003fba <memset>:
 8003fba:	4603      	mov	r3, r0
 8003fbc:	4402      	add	r2, r0
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d100      	bne.n	8003fc4 <memset+0xa>
 8003fc2:	4770      	bx	lr
 8003fc4:	f803 1b01 	strb.w	r1, [r3], #1
 8003fc8:	e7f9      	b.n	8003fbe <memset+0x4>
	...

08003fcc <strtok>:
 8003fcc:	4b16      	ldr	r3, [pc, #88]	@ (8004028 <strtok+0x5c>)
 8003fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fd2:	681f      	ldr	r7, [r3, #0]
 8003fd4:	4605      	mov	r5, r0
 8003fd6:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8003fd8:	460e      	mov	r6, r1
 8003fda:	b9ec      	cbnz	r4, 8004018 <strtok+0x4c>
 8003fdc:	2050      	movs	r0, #80	@ 0x50
 8003fde:	f000 f92b 	bl	8004238 <malloc>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	6478      	str	r0, [r7, #68]	@ 0x44
 8003fe6:	b920      	cbnz	r0, 8003ff2 <strtok+0x26>
 8003fe8:	215b      	movs	r1, #91	@ 0x5b
 8003fea:	4b10      	ldr	r3, [pc, #64]	@ (800402c <strtok+0x60>)
 8003fec:	4810      	ldr	r0, [pc, #64]	@ (8004030 <strtok+0x64>)
 8003fee:	f000 f8bd 	bl	800416c <__assert_func>
 8003ff2:	e9c0 4400 	strd	r4, r4, [r0]
 8003ff6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003ffa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003ffe:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8004002:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8004006:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800400a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800400e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8004012:	6184      	str	r4, [r0, #24]
 8004014:	7704      	strb	r4, [r0, #28]
 8004016:	6244      	str	r4, [r0, #36]	@ 0x24
 8004018:	4631      	mov	r1, r6
 800401a:	4628      	mov	r0, r5
 800401c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800401e:	2301      	movs	r3, #1
 8004020:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004024:	f000 b806 	b.w	8004034 <__strtok_r>
 8004028:	200000b4 	.word	0x200000b4
 800402c:	080053ef 	.word	0x080053ef
 8004030:	08005406 	.word	0x08005406

08004034 <__strtok_r>:
 8004034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004036:	4604      	mov	r4, r0
 8004038:	b908      	cbnz	r0, 800403e <__strtok_r+0xa>
 800403a:	6814      	ldr	r4, [r2, #0]
 800403c:	b144      	cbz	r4, 8004050 <__strtok_r+0x1c>
 800403e:	460f      	mov	r7, r1
 8004040:	4620      	mov	r0, r4
 8004042:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004046:	f817 6b01 	ldrb.w	r6, [r7], #1
 800404a:	b91e      	cbnz	r6, 8004054 <__strtok_r+0x20>
 800404c:	b965      	cbnz	r5, 8004068 <__strtok_r+0x34>
 800404e:	6015      	str	r5, [r2, #0]
 8004050:	2000      	movs	r0, #0
 8004052:	e005      	b.n	8004060 <__strtok_r+0x2c>
 8004054:	42b5      	cmp	r5, r6
 8004056:	d1f6      	bne.n	8004046 <__strtok_r+0x12>
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1f0      	bne.n	800403e <__strtok_r+0xa>
 800405c:	6014      	str	r4, [r2, #0]
 800405e:	7003      	strb	r3, [r0, #0]
 8004060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004062:	461c      	mov	r4, r3
 8004064:	e00c      	b.n	8004080 <__strtok_r+0x4c>
 8004066:	b915      	cbnz	r5, 800406e <__strtok_r+0x3a>
 8004068:	460e      	mov	r6, r1
 800406a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800406e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004072:	42ab      	cmp	r3, r5
 8004074:	d1f7      	bne.n	8004066 <__strtok_r+0x32>
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0f3      	beq.n	8004062 <__strtok_r+0x2e>
 800407a:	2300      	movs	r3, #0
 800407c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004080:	6014      	str	r4, [r2, #0]
 8004082:	e7ed      	b.n	8004060 <__strtok_r+0x2c>

08004084 <_close_r>:
 8004084:	b538      	push	{r3, r4, r5, lr}
 8004086:	2300      	movs	r3, #0
 8004088:	4d05      	ldr	r5, [pc, #20]	@ (80040a0 <_close_r+0x1c>)
 800408a:	4604      	mov	r4, r0
 800408c:	4608      	mov	r0, r1
 800408e:	602b      	str	r3, [r5, #0]
 8004090:	f7fc fd8b 	bl	8000baa <_close>
 8004094:	1c43      	adds	r3, r0, #1
 8004096:	d102      	bne.n	800409e <_close_r+0x1a>
 8004098:	682b      	ldr	r3, [r5, #0]
 800409a:	b103      	cbz	r3, 800409e <_close_r+0x1a>
 800409c:	6023      	str	r3, [r4, #0]
 800409e:	bd38      	pop	{r3, r4, r5, pc}
 80040a0:	20000618 	.word	0x20000618

080040a4 <_lseek_r>:
 80040a4:	b538      	push	{r3, r4, r5, lr}
 80040a6:	4604      	mov	r4, r0
 80040a8:	4608      	mov	r0, r1
 80040aa:	4611      	mov	r1, r2
 80040ac:	2200      	movs	r2, #0
 80040ae:	4d05      	ldr	r5, [pc, #20]	@ (80040c4 <_lseek_r+0x20>)
 80040b0:	602a      	str	r2, [r5, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	f7fc fd9d 	bl	8000bf2 <_lseek>
 80040b8:	1c43      	adds	r3, r0, #1
 80040ba:	d102      	bne.n	80040c2 <_lseek_r+0x1e>
 80040bc:	682b      	ldr	r3, [r5, #0]
 80040be:	b103      	cbz	r3, 80040c2 <_lseek_r+0x1e>
 80040c0:	6023      	str	r3, [r4, #0]
 80040c2:	bd38      	pop	{r3, r4, r5, pc}
 80040c4:	20000618 	.word	0x20000618

080040c8 <_read_r>:
 80040c8:	b538      	push	{r3, r4, r5, lr}
 80040ca:	4604      	mov	r4, r0
 80040cc:	4608      	mov	r0, r1
 80040ce:	4611      	mov	r1, r2
 80040d0:	2200      	movs	r2, #0
 80040d2:	4d05      	ldr	r5, [pc, #20]	@ (80040e8 <_read_r+0x20>)
 80040d4:	602a      	str	r2, [r5, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	f7fc fd2e 	bl	8000b38 <_read>
 80040dc:	1c43      	adds	r3, r0, #1
 80040de:	d102      	bne.n	80040e6 <_read_r+0x1e>
 80040e0:	682b      	ldr	r3, [r5, #0]
 80040e2:	b103      	cbz	r3, 80040e6 <_read_r+0x1e>
 80040e4:	6023      	str	r3, [r4, #0]
 80040e6:	bd38      	pop	{r3, r4, r5, pc}
 80040e8:	20000618 	.word	0x20000618

080040ec <_write_r>:
 80040ec:	b538      	push	{r3, r4, r5, lr}
 80040ee:	4604      	mov	r4, r0
 80040f0:	4608      	mov	r0, r1
 80040f2:	4611      	mov	r1, r2
 80040f4:	2200      	movs	r2, #0
 80040f6:	4d05      	ldr	r5, [pc, #20]	@ (800410c <_write_r+0x20>)
 80040f8:	602a      	str	r2, [r5, #0]
 80040fa:	461a      	mov	r2, r3
 80040fc:	f7fc fd39 	bl	8000b72 <_write>
 8004100:	1c43      	adds	r3, r0, #1
 8004102:	d102      	bne.n	800410a <_write_r+0x1e>
 8004104:	682b      	ldr	r3, [r5, #0]
 8004106:	b103      	cbz	r3, 800410a <_write_r+0x1e>
 8004108:	6023      	str	r3, [r4, #0]
 800410a:	bd38      	pop	{r3, r4, r5, pc}
 800410c:	20000618 	.word	0x20000618

08004110 <__errno>:
 8004110:	4b01      	ldr	r3, [pc, #4]	@ (8004118 <__errno+0x8>)
 8004112:	6818      	ldr	r0, [r3, #0]
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	200000b4 	.word	0x200000b4

0800411c <__libc_init_array>:
 800411c:	b570      	push	{r4, r5, r6, lr}
 800411e:	2600      	movs	r6, #0
 8004120:	4d0c      	ldr	r5, [pc, #48]	@ (8004154 <__libc_init_array+0x38>)
 8004122:	4c0d      	ldr	r4, [pc, #52]	@ (8004158 <__libc_init_array+0x3c>)
 8004124:	1b64      	subs	r4, r4, r5
 8004126:	10a4      	asrs	r4, r4, #2
 8004128:	42a6      	cmp	r6, r4
 800412a:	d109      	bne.n	8004140 <__libc_init_array+0x24>
 800412c:	f000 fffc 	bl	8005128 <_init>
 8004130:	2600      	movs	r6, #0
 8004132:	4d0a      	ldr	r5, [pc, #40]	@ (800415c <__libc_init_array+0x40>)
 8004134:	4c0a      	ldr	r4, [pc, #40]	@ (8004160 <__libc_init_array+0x44>)
 8004136:	1b64      	subs	r4, r4, r5
 8004138:	10a4      	asrs	r4, r4, #2
 800413a:	42a6      	cmp	r6, r4
 800413c:	d105      	bne.n	800414a <__libc_init_array+0x2e>
 800413e:	bd70      	pop	{r4, r5, r6, pc}
 8004140:	f855 3b04 	ldr.w	r3, [r5], #4
 8004144:	4798      	blx	r3
 8004146:	3601      	adds	r6, #1
 8004148:	e7ee      	b.n	8004128 <__libc_init_array+0xc>
 800414a:	f855 3b04 	ldr.w	r3, [r5], #4
 800414e:	4798      	blx	r3
 8004150:	3601      	adds	r6, #1
 8004152:	e7f2      	b.n	800413a <__libc_init_array+0x1e>
 8004154:	080054d8 	.word	0x080054d8
 8004158:	080054d8 	.word	0x080054d8
 800415c:	080054d8 	.word	0x080054d8
 8004160:	080054dc 	.word	0x080054dc

08004164 <__retarget_lock_init_recursive>:
 8004164:	4770      	bx	lr

08004166 <__retarget_lock_acquire_recursive>:
 8004166:	4770      	bx	lr

08004168 <__retarget_lock_release_recursive>:
 8004168:	4770      	bx	lr
	...

0800416c <__assert_func>:
 800416c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800416e:	4614      	mov	r4, r2
 8004170:	461a      	mov	r2, r3
 8004172:	4b09      	ldr	r3, [pc, #36]	@ (8004198 <__assert_func+0x2c>)
 8004174:	4605      	mov	r5, r0
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68d8      	ldr	r0, [r3, #12]
 800417a:	b954      	cbnz	r4, 8004192 <__assert_func+0x26>
 800417c:	4b07      	ldr	r3, [pc, #28]	@ (800419c <__assert_func+0x30>)
 800417e:	461c      	mov	r4, r3
 8004180:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004184:	9100      	str	r1, [sp, #0]
 8004186:	462b      	mov	r3, r5
 8004188:	4905      	ldr	r1, [pc, #20]	@ (80041a0 <__assert_func+0x34>)
 800418a:	f000 fc9d 	bl	8004ac8 <fiprintf>
 800418e:	f000 fcf3 	bl	8004b78 <abort>
 8004192:	4b04      	ldr	r3, [pc, #16]	@ (80041a4 <__assert_func+0x38>)
 8004194:	e7f4      	b.n	8004180 <__assert_func+0x14>
 8004196:	bf00      	nop
 8004198:	200000b4 	.word	0x200000b4
 800419c:	0800549b 	.word	0x0800549b
 80041a0:	0800546d 	.word	0x0800546d
 80041a4:	08005460 	.word	0x08005460

080041a8 <_free_r>:
 80041a8:	b538      	push	{r3, r4, r5, lr}
 80041aa:	4605      	mov	r5, r0
 80041ac:	2900      	cmp	r1, #0
 80041ae:	d040      	beq.n	8004232 <_free_r+0x8a>
 80041b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041b4:	1f0c      	subs	r4, r1, #4
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	bfb8      	it	lt
 80041ba:	18e4      	addlt	r4, r4, r3
 80041bc:	f000 f8e6 	bl	800438c <__malloc_lock>
 80041c0:	4a1c      	ldr	r2, [pc, #112]	@ (8004234 <_free_r+0x8c>)
 80041c2:	6813      	ldr	r3, [r2, #0]
 80041c4:	b933      	cbnz	r3, 80041d4 <_free_r+0x2c>
 80041c6:	6063      	str	r3, [r4, #4]
 80041c8:	6014      	str	r4, [r2, #0]
 80041ca:	4628      	mov	r0, r5
 80041cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041d0:	f000 b8e2 	b.w	8004398 <__malloc_unlock>
 80041d4:	42a3      	cmp	r3, r4
 80041d6:	d908      	bls.n	80041ea <_free_r+0x42>
 80041d8:	6820      	ldr	r0, [r4, #0]
 80041da:	1821      	adds	r1, r4, r0
 80041dc:	428b      	cmp	r3, r1
 80041de:	bf01      	itttt	eq
 80041e0:	6819      	ldreq	r1, [r3, #0]
 80041e2:	685b      	ldreq	r3, [r3, #4]
 80041e4:	1809      	addeq	r1, r1, r0
 80041e6:	6021      	streq	r1, [r4, #0]
 80041e8:	e7ed      	b.n	80041c6 <_free_r+0x1e>
 80041ea:	461a      	mov	r2, r3
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	b10b      	cbz	r3, 80041f4 <_free_r+0x4c>
 80041f0:	42a3      	cmp	r3, r4
 80041f2:	d9fa      	bls.n	80041ea <_free_r+0x42>
 80041f4:	6811      	ldr	r1, [r2, #0]
 80041f6:	1850      	adds	r0, r2, r1
 80041f8:	42a0      	cmp	r0, r4
 80041fa:	d10b      	bne.n	8004214 <_free_r+0x6c>
 80041fc:	6820      	ldr	r0, [r4, #0]
 80041fe:	4401      	add	r1, r0
 8004200:	1850      	adds	r0, r2, r1
 8004202:	4283      	cmp	r3, r0
 8004204:	6011      	str	r1, [r2, #0]
 8004206:	d1e0      	bne.n	80041ca <_free_r+0x22>
 8004208:	6818      	ldr	r0, [r3, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	4408      	add	r0, r1
 800420e:	6010      	str	r0, [r2, #0]
 8004210:	6053      	str	r3, [r2, #4]
 8004212:	e7da      	b.n	80041ca <_free_r+0x22>
 8004214:	d902      	bls.n	800421c <_free_r+0x74>
 8004216:	230c      	movs	r3, #12
 8004218:	602b      	str	r3, [r5, #0]
 800421a:	e7d6      	b.n	80041ca <_free_r+0x22>
 800421c:	6820      	ldr	r0, [r4, #0]
 800421e:	1821      	adds	r1, r4, r0
 8004220:	428b      	cmp	r3, r1
 8004222:	bf01      	itttt	eq
 8004224:	6819      	ldreq	r1, [r3, #0]
 8004226:	685b      	ldreq	r3, [r3, #4]
 8004228:	1809      	addeq	r1, r1, r0
 800422a:	6021      	streq	r1, [r4, #0]
 800422c:	6063      	str	r3, [r4, #4]
 800422e:	6054      	str	r4, [r2, #4]
 8004230:	e7cb      	b.n	80041ca <_free_r+0x22>
 8004232:	bd38      	pop	{r3, r4, r5, pc}
 8004234:	20000624 	.word	0x20000624

08004238 <malloc>:
 8004238:	4b02      	ldr	r3, [pc, #8]	@ (8004244 <malloc+0xc>)
 800423a:	4601      	mov	r1, r0
 800423c:	6818      	ldr	r0, [r3, #0]
 800423e:	f000 b825 	b.w	800428c <_malloc_r>
 8004242:	bf00      	nop
 8004244:	200000b4 	.word	0x200000b4

08004248 <sbrk_aligned>:
 8004248:	b570      	push	{r4, r5, r6, lr}
 800424a:	4e0f      	ldr	r6, [pc, #60]	@ (8004288 <sbrk_aligned+0x40>)
 800424c:	460c      	mov	r4, r1
 800424e:	6831      	ldr	r1, [r6, #0]
 8004250:	4605      	mov	r5, r0
 8004252:	b911      	cbnz	r1, 800425a <sbrk_aligned+0x12>
 8004254:	f000 fc64 	bl	8004b20 <_sbrk_r>
 8004258:	6030      	str	r0, [r6, #0]
 800425a:	4621      	mov	r1, r4
 800425c:	4628      	mov	r0, r5
 800425e:	f000 fc5f 	bl	8004b20 <_sbrk_r>
 8004262:	1c43      	adds	r3, r0, #1
 8004264:	d103      	bne.n	800426e <sbrk_aligned+0x26>
 8004266:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800426a:	4620      	mov	r0, r4
 800426c:	bd70      	pop	{r4, r5, r6, pc}
 800426e:	1cc4      	adds	r4, r0, #3
 8004270:	f024 0403 	bic.w	r4, r4, #3
 8004274:	42a0      	cmp	r0, r4
 8004276:	d0f8      	beq.n	800426a <sbrk_aligned+0x22>
 8004278:	1a21      	subs	r1, r4, r0
 800427a:	4628      	mov	r0, r5
 800427c:	f000 fc50 	bl	8004b20 <_sbrk_r>
 8004280:	3001      	adds	r0, #1
 8004282:	d1f2      	bne.n	800426a <sbrk_aligned+0x22>
 8004284:	e7ef      	b.n	8004266 <sbrk_aligned+0x1e>
 8004286:	bf00      	nop
 8004288:	20000620 	.word	0x20000620

0800428c <_malloc_r>:
 800428c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004290:	1ccd      	adds	r5, r1, #3
 8004292:	f025 0503 	bic.w	r5, r5, #3
 8004296:	3508      	adds	r5, #8
 8004298:	2d0c      	cmp	r5, #12
 800429a:	bf38      	it	cc
 800429c:	250c      	movcc	r5, #12
 800429e:	2d00      	cmp	r5, #0
 80042a0:	4606      	mov	r6, r0
 80042a2:	db01      	blt.n	80042a8 <_malloc_r+0x1c>
 80042a4:	42a9      	cmp	r1, r5
 80042a6:	d904      	bls.n	80042b2 <_malloc_r+0x26>
 80042a8:	230c      	movs	r3, #12
 80042aa:	6033      	str	r3, [r6, #0]
 80042ac:	2000      	movs	r0, #0
 80042ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004388 <_malloc_r+0xfc>
 80042b6:	f000 f869 	bl	800438c <__malloc_lock>
 80042ba:	f8d8 3000 	ldr.w	r3, [r8]
 80042be:	461c      	mov	r4, r3
 80042c0:	bb44      	cbnz	r4, 8004314 <_malloc_r+0x88>
 80042c2:	4629      	mov	r1, r5
 80042c4:	4630      	mov	r0, r6
 80042c6:	f7ff ffbf 	bl	8004248 <sbrk_aligned>
 80042ca:	1c43      	adds	r3, r0, #1
 80042cc:	4604      	mov	r4, r0
 80042ce:	d158      	bne.n	8004382 <_malloc_r+0xf6>
 80042d0:	f8d8 4000 	ldr.w	r4, [r8]
 80042d4:	4627      	mov	r7, r4
 80042d6:	2f00      	cmp	r7, #0
 80042d8:	d143      	bne.n	8004362 <_malloc_r+0xd6>
 80042da:	2c00      	cmp	r4, #0
 80042dc:	d04b      	beq.n	8004376 <_malloc_r+0xea>
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	4639      	mov	r1, r7
 80042e2:	4630      	mov	r0, r6
 80042e4:	eb04 0903 	add.w	r9, r4, r3
 80042e8:	f000 fc1a 	bl	8004b20 <_sbrk_r>
 80042ec:	4581      	cmp	r9, r0
 80042ee:	d142      	bne.n	8004376 <_malloc_r+0xea>
 80042f0:	6821      	ldr	r1, [r4, #0]
 80042f2:	4630      	mov	r0, r6
 80042f4:	1a6d      	subs	r5, r5, r1
 80042f6:	4629      	mov	r1, r5
 80042f8:	f7ff ffa6 	bl	8004248 <sbrk_aligned>
 80042fc:	3001      	adds	r0, #1
 80042fe:	d03a      	beq.n	8004376 <_malloc_r+0xea>
 8004300:	6823      	ldr	r3, [r4, #0]
 8004302:	442b      	add	r3, r5
 8004304:	6023      	str	r3, [r4, #0]
 8004306:	f8d8 3000 	ldr.w	r3, [r8]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	bb62      	cbnz	r2, 8004368 <_malloc_r+0xdc>
 800430e:	f8c8 7000 	str.w	r7, [r8]
 8004312:	e00f      	b.n	8004334 <_malloc_r+0xa8>
 8004314:	6822      	ldr	r2, [r4, #0]
 8004316:	1b52      	subs	r2, r2, r5
 8004318:	d420      	bmi.n	800435c <_malloc_r+0xd0>
 800431a:	2a0b      	cmp	r2, #11
 800431c:	d917      	bls.n	800434e <_malloc_r+0xc2>
 800431e:	1961      	adds	r1, r4, r5
 8004320:	42a3      	cmp	r3, r4
 8004322:	6025      	str	r5, [r4, #0]
 8004324:	bf18      	it	ne
 8004326:	6059      	strne	r1, [r3, #4]
 8004328:	6863      	ldr	r3, [r4, #4]
 800432a:	bf08      	it	eq
 800432c:	f8c8 1000 	streq.w	r1, [r8]
 8004330:	5162      	str	r2, [r4, r5]
 8004332:	604b      	str	r3, [r1, #4]
 8004334:	4630      	mov	r0, r6
 8004336:	f000 f82f 	bl	8004398 <__malloc_unlock>
 800433a:	f104 000b 	add.w	r0, r4, #11
 800433e:	1d23      	adds	r3, r4, #4
 8004340:	f020 0007 	bic.w	r0, r0, #7
 8004344:	1ac2      	subs	r2, r0, r3
 8004346:	bf1c      	itt	ne
 8004348:	1a1b      	subne	r3, r3, r0
 800434a:	50a3      	strne	r3, [r4, r2]
 800434c:	e7af      	b.n	80042ae <_malloc_r+0x22>
 800434e:	6862      	ldr	r2, [r4, #4]
 8004350:	42a3      	cmp	r3, r4
 8004352:	bf0c      	ite	eq
 8004354:	f8c8 2000 	streq.w	r2, [r8]
 8004358:	605a      	strne	r2, [r3, #4]
 800435a:	e7eb      	b.n	8004334 <_malloc_r+0xa8>
 800435c:	4623      	mov	r3, r4
 800435e:	6864      	ldr	r4, [r4, #4]
 8004360:	e7ae      	b.n	80042c0 <_malloc_r+0x34>
 8004362:	463c      	mov	r4, r7
 8004364:	687f      	ldr	r7, [r7, #4]
 8004366:	e7b6      	b.n	80042d6 <_malloc_r+0x4a>
 8004368:	461a      	mov	r2, r3
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	42a3      	cmp	r3, r4
 800436e:	d1fb      	bne.n	8004368 <_malloc_r+0xdc>
 8004370:	2300      	movs	r3, #0
 8004372:	6053      	str	r3, [r2, #4]
 8004374:	e7de      	b.n	8004334 <_malloc_r+0xa8>
 8004376:	230c      	movs	r3, #12
 8004378:	4630      	mov	r0, r6
 800437a:	6033      	str	r3, [r6, #0]
 800437c:	f000 f80c 	bl	8004398 <__malloc_unlock>
 8004380:	e794      	b.n	80042ac <_malloc_r+0x20>
 8004382:	6005      	str	r5, [r0, #0]
 8004384:	e7d6      	b.n	8004334 <_malloc_r+0xa8>
 8004386:	bf00      	nop
 8004388:	20000624 	.word	0x20000624

0800438c <__malloc_lock>:
 800438c:	4801      	ldr	r0, [pc, #4]	@ (8004394 <__malloc_lock+0x8>)
 800438e:	f7ff beea 	b.w	8004166 <__retarget_lock_acquire_recursive>
 8004392:	bf00      	nop
 8004394:	2000061c 	.word	0x2000061c

08004398 <__malloc_unlock>:
 8004398:	4801      	ldr	r0, [pc, #4]	@ (80043a0 <__malloc_unlock+0x8>)
 800439a:	f7ff bee5 	b.w	8004168 <__retarget_lock_release_recursive>
 800439e:	bf00      	nop
 80043a0:	2000061c 	.word	0x2000061c

080043a4 <__ssputs_r>:
 80043a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043a8:	461f      	mov	r7, r3
 80043aa:	688e      	ldr	r6, [r1, #8]
 80043ac:	4682      	mov	sl, r0
 80043ae:	42be      	cmp	r6, r7
 80043b0:	460c      	mov	r4, r1
 80043b2:	4690      	mov	r8, r2
 80043b4:	680b      	ldr	r3, [r1, #0]
 80043b6:	d82d      	bhi.n	8004414 <__ssputs_r+0x70>
 80043b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80043bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80043c0:	d026      	beq.n	8004410 <__ssputs_r+0x6c>
 80043c2:	6965      	ldr	r5, [r4, #20]
 80043c4:	6909      	ldr	r1, [r1, #16]
 80043c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043ca:	eba3 0901 	sub.w	r9, r3, r1
 80043ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043d2:	1c7b      	adds	r3, r7, #1
 80043d4:	444b      	add	r3, r9
 80043d6:	106d      	asrs	r5, r5, #1
 80043d8:	429d      	cmp	r5, r3
 80043da:	bf38      	it	cc
 80043dc:	461d      	movcc	r5, r3
 80043de:	0553      	lsls	r3, r2, #21
 80043e0:	d527      	bpl.n	8004432 <__ssputs_r+0x8e>
 80043e2:	4629      	mov	r1, r5
 80043e4:	f7ff ff52 	bl	800428c <_malloc_r>
 80043e8:	4606      	mov	r6, r0
 80043ea:	b360      	cbz	r0, 8004446 <__ssputs_r+0xa2>
 80043ec:	464a      	mov	r2, r9
 80043ee:	6921      	ldr	r1, [r4, #16]
 80043f0:	f000 fbb4 	bl	8004b5c <memcpy>
 80043f4:	89a3      	ldrh	r3, [r4, #12]
 80043f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80043fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043fe:	81a3      	strh	r3, [r4, #12]
 8004400:	6126      	str	r6, [r4, #16]
 8004402:	444e      	add	r6, r9
 8004404:	6026      	str	r6, [r4, #0]
 8004406:	463e      	mov	r6, r7
 8004408:	6165      	str	r5, [r4, #20]
 800440a:	eba5 0509 	sub.w	r5, r5, r9
 800440e:	60a5      	str	r5, [r4, #8]
 8004410:	42be      	cmp	r6, r7
 8004412:	d900      	bls.n	8004416 <__ssputs_r+0x72>
 8004414:	463e      	mov	r6, r7
 8004416:	4632      	mov	r2, r6
 8004418:	4641      	mov	r1, r8
 800441a:	6820      	ldr	r0, [r4, #0]
 800441c:	f000 fb66 	bl	8004aec <memmove>
 8004420:	2000      	movs	r0, #0
 8004422:	68a3      	ldr	r3, [r4, #8]
 8004424:	1b9b      	subs	r3, r3, r6
 8004426:	60a3      	str	r3, [r4, #8]
 8004428:	6823      	ldr	r3, [r4, #0]
 800442a:	4433      	add	r3, r6
 800442c:	6023      	str	r3, [r4, #0]
 800442e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004432:	462a      	mov	r2, r5
 8004434:	f000 fba7 	bl	8004b86 <_realloc_r>
 8004438:	4606      	mov	r6, r0
 800443a:	2800      	cmp	r0, #0
 800443c:	d1e0      	bne.n	8004400 <__ssputs_r+0x5c>
 800443e:	4650      	mov	r0, sl
 8004440:	6921      	ldr	r1, [r4, #16]
 8004442:	f7ff feb1 	bl	80041a8 <_free_r>
 8004446:	230c      	movs	r3, #12
 8004448:	f8ca 3000 	str.w	r3, [sl]
 800444c:	89a3      	ldrh	r3, [r4, #12]
 800444e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004452:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004456:	81a3      	strh	r3, [r4, #12]
 8004458:	e7e9      	b.n	800442e <__ssputs_r+0x8a>
	...

0800445c <_svfiprintf_r>:
 800445c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004460:	4698      	mov	r8, r3
 8004462:	898b      	ldrh	r3, [r1, #12]
 8004464:	4607      	mov	r7, r0
 8004466:	061b      	lsls	r3, r3, #24
 8004468:	460d      	mov	r5, r1
 800446a:	4614      	mov	r4, r2
 800446c:	b09d      	sub	sp, #116	@ 0x74
 800446e:	d510      	bpl.n	8004492 <_svfiprintf_r+0x36>
 8004470:	690b      	ldr	r3, [r1, #16]
 8004472:	b973      	cbnz	r3, 8004492 <_svfiprintf_r+0x36>
 8004474:	2140      	movs	r1, #64	@ 0x40
 8004476:	f7ff ff09 	bl	800428c <_malloc_r>
 800447a:	6028      	str	r0, [r5, #0]
 800447c:	6128      	str	r0, [r5, #16]
 800447e:	b930      	cbnz	r0, 800448e <_svfiprintf_r+0x32>
 8004480:	230c      	movs	r3, #12
 8004482:	603b      	str	r3, [r7, #0]
 8004484:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004488:	b01d      	add	sp, #116	@ 0x74
 800448a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800448e:	2340      	movs	r3, #64	@ 0x40
 8004490:	616b      	str	r3, [r5, #20]
 8004492:	2300      	movs	r3, #0
 8004494:	9309      	str	r3, [sp, #36]	@ 0x24
 8004496:	2320      	movs	r3, #32
 8004498:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800449c:	2330      	movs	r3, #48	@ 0x30
 800449e:	f04f 0901 	mov.w	r9, #1
 80044a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80044a6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004640 <_svfiprintf_r+0x1e4>
 80044aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80044ae:	4623      	mov	r3, r4
 80044b0:	469a      	mov	sl, r3
 80044b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044b6:	b10a      	cbz	r2, 80044bc <_svfiprintf_r+0x60>
 80044b8:	2a25      	cmp	r2, #37	@ 0x25
 80044ba:	d1f9      	bne.n	80044b0 <_svfiprintf_r+0x54>
 80044bc:	ebba 0b04 	subs.w	fp, sl, r4
 80044c0:	d00b      	beq.n	80044da <_svfiprintf_r+0x7e>
 80044c2:	465b      	mov	r3, fp
 80044c4:	4622      	mov	r2, r4
 80044c6:	4629      	mov	r1, r5
 80044c8:	4638      	mov	r0, r7
 80044ca:	f7ff ff6b 	bl	80043a4 <__ssputs_r>
 80044ce:	3001      	adds	r0, #1
 80044d0:	f000 80a7 	beq.w	8004622 <_svfiprintf_r+0x1c6>
 80044d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80044d6:	445a      	add	r2, fp
 80044d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80044da:	f89a 3000 	ldrb.w	r3, [sl]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 809f 	beq.w	8004622 <_svfiprintf_r+0x1c6>
 80044e4:	2300      	movs	r3, #0
 80044e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80044ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044ee:	f10a 0a01 	add.w	sl, sl, #1
 80044f2:	9304      	str	r3, [sp, #16]
 80044f4:	9307      	str	r3, [sp, #28]
 80044f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80044fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80044fc:	4654      	mov	r4, sl
 80044fe:	2205      	movs	r2, #5
 8004500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004504:	484e      	ldr	r0, [pc, #312]	@ (8004640 <_svfiprintf_r+0x1e4>)
 8004506:	f000 fb1b 	bl	8004b40 <memchr>
 800450a:	9a04      	ldr	r2, [sp, #16]
 800450c:	b9d8      	cbnz	r0, 8004546 <_svfiprintf_r+0xea>
 800450e:	06d0      	lsls	r0, r2, #27
 8004510:	bf44      	itt	mi
 8004512:	2320      	movmi	r3, #32
 8004514:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004518:	0711      	lsls	r1, r2, #28
 800451a:	bf44      	itt	mi
 800451c:	232b      	movmi	r3, #43	@ 0x2b
 800451e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004522:	f89a 3000 	ldrb.w	r3, [sl]
 8004526:	2b2a      	cmp	r3, #42	@ 0x2a
 8004528:	d015      	beq.n	8004556 <_svfiprintf_r+0xfa>
 800452a:	4654      	mov	r4, sl
 800452c:	2000      	movs	r0, #0
 800452e:	f04f 0c0a 	mov.w	ip, #10
 8004532:	9a07      	ldr	r2, [sp, #28]
 8004534:	4621      	mov	r1, r4
 8004536:	f811 3b01 	ldrb.w	r3, [r1], #1
 800453a:	3b30      	subs	r3, #48	@ 0x30
 800453c:	2b09      	cmp	r3, #9
 800453e:	d94b      	bls.n	80045d8 <_svfiprintf_r+0x17c>
 8004540:	b1b0      	cbz	r0, 8004570 <_svfiprintf_r+0x114>
 8004542:	9207      	str	r2, [sp, #28]
 8004544:	e014      	b.n	8004570 <_svfiprintf_r+0x114>
 8004546:	eba0 0308 	sub.w	r3, r0, r8
 800454a:	fa09 f303 	lsl.w	r3, r9, r3
 800454e:	4313      	orrs	r3, r2
 8004550:	46a2      	mov	sl, r4
 8004552:	9304      	str	r3, [sp, #16]
 8004554:	e7d2      	b.n	80044fc <_svfiprintf_r+0xa0>
 8004556:	9b03      	ldr	r3, [sp, #12]
 8004558:	1d19      	adds	r1, r3, #4
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	9103      	str	r1, [sp, #12]
 800455e:	2b00      	cmp	r3, #0
 8004560:	bfbb      	ittet	lt
 8004562:	425b      	neglt	r3, r3
 8004564:	f042 0202 	orrlt.w	r2, r2, #2
 8004568:	9307      	strge	r3, [sp, #28]
 800456a:	9307      	strlt	r3, [sp, #28]
 800456c:	bfb8      	it	lt
 800456e:	9204      	strlt	r2, [sp, #16]
 8004570:	7823      	ldrb	r3, [r4, #0]
 8004572:	2b2e      	cmp	r3, #46	@ 0x2e
 8004574:	d10a      	bne.n	800458c <_svfiprintf_r+0x130>
 8004576:	7863      	ldrb	r3, [r4, #1]
 8004578:	2b2a      	cmp	r3, #42	@ 0x2a
 800457a:	d132      	bne.n	80045e2 <_svfiprintf_r+0x186>
 800457c:	9b03      	ldr	r3, [sp, #12]
 800457e:	3402      	adds	r4, #2
 8004580:	1d1a      	adds	r2, r3, #4
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	9203      	str	r2, [sp, #12]
 8004586:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800458a:	9305      	str	r3, [sp, #20]
 800458c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004644 <_svfiprintf_r+0x1e8>
 8004590:	2203      	movs	r2, #3
 8004592:	4650      	mov	r0, sl
 8004594:	7821      	ldrb	r1, [r4, #0]
 8004596:	f000 fad3 	bl	8004b40 <memchr>
 800459a:	b138      	cbz	r0, 80045ac <_svfiprintf_r+0x150>
 800459c:	2240      	movs	r2, #64	@ 0x40
 800459e:	9b04      	ldr	r3, [sp, #16]
 80045a0:	eba0 000a 	sub.w	r0, r0, sl
 80045a4:	4082      	lsls	r2, r0
 80045a6:	4313      	orrs	r3, r2
 80045a8:	3401      	adds	r4, #1
 80045aa:	9304      	str	r3, [sp, #16]
 80045ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045b0:	2206      	movs	r2, #6
 80045b2:	4825      	ldr	r0, [pc, #148]	@ (8004648 <_svfiprintf_r+0x1ec>)
 80045b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80045b8:	f000 fac2 	bl	8004b40 <memchr>
 80045bc:	2800      	cmp	r0, #0
 80045be:	d036      	beq.n	800462e <_svfiprintf_r+0x1d2>
 80045c0:	4b22      	ldr	r3, [pc, #136]	@ (800464c <_svfiprintf_r+0x1f0>)
 80045c2:	bb1b      	cbnz	r3, 800460c <_svfiprintf_r+0x1b0>
 80045c4:	9b03      	ldr	r3, [sp, #12]
 80045c6:	3307      	adds	r3, #7
 80045c8:	f023 0307 	bic.w	r3, r3, #7
 80045cc:	3308      	adds	r3, #8
 80045ce:	9303      	str	r3, [sp, #12]
 80045d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045d2:	4433      	add	r3, r6
 80045d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80045d6:	e76a      	b.n	80044ae <_svfiprintf_r+0x52>
 80045d8:	460c      	mov	r4, r1
 80045da:	2001      	movs	r0, #1
 80045dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80045e0:	e7a8      	b.n	8004534 <_svfiprintf_r+0xd8>
 80045e2:	2300      	movs	r3, #0
 80045e4:	f04f 0c0a 	mov.w	ip, #10
 80045e8:	4619      	mov	r1, r3
 80045ea:	3401      	adds	r4, #1
 80045ec:	9305      	str	r3, [sp, #20]
 80045ee:	4620      	mov	r0, r4
 80045f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045f4:	3a30      	subs	r2, #48	@ 0x30
 80045f6:	2a09      	cmp	r2, #9
 80045f8:	d903      	bls.n	8004602 <_svfiprintf_r+0x1a6>
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0c6      	beq.n	800458c <_svfiprintf_r+0x130>
 80045fe:	9105      	str	r1, [sp, #20]
 8004600:	e7c4      	b.n	800458c <_svfiprintf_r+0x130>
 8004602:	4604      	mov	r4, r0
 8004604:	2301      	movs	r3, #1
 8004606:	fb0c 2101 	mla	r1, ip, r1, r2
 800460a:	e7f0      	b.n	80045ee <_svfiprintf_r+0x192>
 800460c:	ab03      	add	r3, sp, #12
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	462a      	mov	r2, r5
 8004612:	4638      	mov	r0, r7
 8004614:	4b0e      	ldr	r3, [pc, #56]	@ (8004650 <_svfiprintf_r+0x1f4>)
 8004616:	a904      	add	r1, sp, #16
 8004618:	f3af 8000 	nop.w
 800461c:	1c42      	adds	r2, r0, #1
 800461e:	4606      	mov	r6, r0
 8004620:	d1d6      	bne.n	80045d0 <_svfiprintf_r+0x174>
 8004622:	89ab      	ldrh	r3, [r5, #12]
 8004624:	065b      	lsls	r3, r3, #25
 8004626:	f53f af2d 	bmi.w	8004484 <_svfiprintf_r+0x28>
 800462a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800462c:	e72c      	b.n	8004488 <_svfiprintf_r+0x2c>
 800462e:	ab03      	add	r3, sp, #12
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	462a      	mov	r2, r5
 8004634:	4638      	mov	r0, r7
 8004636:	4b06      	ldr	r3, [pc, #24]	@ (8004650 <_svfiprintf_r+0x1f4>)
 8004638:	a904      	add	r1, sp, #16
 800463a:	f000 f87d 	bl	8004738 <_printf_i>
 800463e:	e7ed      	b.n	800461c <_svfiprintf_r+0x1c0>
 8004640:	0800549c 	.word	0x0800549c
 8004644:	080054a2 	.word	0x080054a2
 8004648:	080054a6 	.word	0x080054a6
 800464c:	00000000 	.word	0x00000000
 8004650:	080043a5 	.word	0x080043a5

08004654 <_printf_common>:
 8004654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004658:	4616      	mov	r6, r2
 800465a:	4698      	mov	r8, r3
 800465c:	688a      	ldr	r2, [r1, #8]
 800465e:	690b      	ldr	r3, [r1, #16]
 8004660:	4607      	mov	r7, r0
 8004662:	4293      	cmp	r3, r2
 8004664:	bfb8      	it	lt
 8004666:	4613      	movlt	r3, r2
 8004668:	6033      	str	r3, [r6, #0]
 800466a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800466e:	460c      	mov	r4, r1
 8004670:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004674:	b10a      	cbz	r2, 800467a <_printf_common+0x26>
 8004676:	3301      	adds	r3, #1
 8004678:	6033      	str	r3, [r6, #0]
 800467a:	6823      	ldr	r3, [r4, #0]
 800467c:	0699      	lsls	r1, r3, #26
 800467e:	bf42      	ittt	mi
 8004680:	6833      	ldrmi	r3, [r6, #0]
 8004682:	3302      	addmi	r3, #2
 8004684:	6033      	strmi	r3, [r6, #0]
 8004686:	6825      	ldr	r5, [r4, #0]
 8004688:	f015 0506 	ands.w	r5, r5, #6
 800468c:	d106      	bne.n	800469c <_printf_common+0x48>
 800468e:	f104 0a19 	add.w	sl, r4, #25
 8004692:	68e3      	ldr	r3, [r4, #12]
 8004694:	6832      	ldr	r2, [r6, #0]
 8004696:	1a9b      	subs	r3, r3, r2
 8004698:	42ab      	cmp	r3, r5
 800469a:	dc2b      	bgt.n	80046f4 <_printf_common+0xa0>
 800469c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80046a0:	6822      	ldr	r2, [r4, #0]
 80046a2:	3b00      	subs	r3, #0
 80046a4:	bf18      	it	ne
 80046a6:	2301      	movne	r3, #1
 80046a8:	0692      	lsls	r2, r2, #26
 80046aa:	d430      	bmi.n	800470e <_printf_common+0xba>
 80046ac:	4641      	mov	r1, r8
 80046ae:	4638      	mov	r0, r7
 80046b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80046b4:	47c8      	blx	r9
 80046b6:	3001      	adds	r0, #1
 80046b8:	d023      	beq.n	8004702 <_printf_common+0xae>
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	6922      	ldr	r2, [r4, #16]
 80046be:	f003 0306 	and.w	r3, r3, #6
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	bf14      	ite	ne
 80046c6:	2500      	movne	r5, #0
 80046c8:	6833      	ldreq	r3, [r6, #0]
 80046ca:	f04f 0600 	mov.w	r6, #0
 80046ce:	bf08      	it	eq
 80046d0:	68e5      	ldreq	r5, [r4, #12]
 80046d2:	f104 041a 	add.w	r4, r4, #26
 80046d6:	bf08      	it	eq
 80046d8:	1aed      	subeq	r5, r5, r3
 80046da:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80046de:	bf08      	it	eq
 80046e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046e4:	4293      	cmp	r3, r2
 80046e6:	bfc4      	itt	gt
 80046e8:	1a9b      	subgt	r3, r3, r2
 80046ea:	18ed      	addgt	r5, r5, r3
 80046ec:	42b5      	cmp	r5, r6
 80046ee:	d11a      	bne.n	8004726 <_printf_common+0xd2>
 80046f0:	2000      	movs	r0, #0
 80046f2:	e008      	b.n	8004706 <_printf_common+0xb2>
 80046f4:	2301      	movs	r3, #1
 80046f6:	4652      	mov	r2, sl
 80046f8:	4641      	mov	r1, r8
 80046fa:	4638      	mov	r0, r7
 80046fc:	47c8      	blx	r9
 80046fe:	3001      	adds	r0, #1
 8004700:	d103      	bne.n	800470a <_printf_common+0xb6>
 8004702:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800470a:	3501      	adds	r5, #1
 800470c:	e7c1      	b.n	8004692 <_printf_common+0x3e>
 800470e:	2030      	movs	r0, #48	@ 0x30
 8004710:	18e1      	adds	r1, r4, r3
 8004712:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800471c:	4422      	add	r2, r4
 800471e:	3302      	adds	r3, #2
 8004720:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004724:	e7c2      	b.n	80046ac <_printf_common+0x58>
 8004726:	2301      	movs	r3, #1
 8004728:	4622      	mov	r2, r4
 800472a:	4641      	mov	r1, r8
 800472c:	4638      	mov	r0, r7
 800472e:	47c8      	blx	r9
 8004730:	3001      	adds	r0, #1
 8004732:	d0e6      	beq.n	8004702 <_printf_common+0xae>
 8004734:	3601      	adds	r6, #1
 8004736:	e7d9      	b.n	80046ec <_printf_common+0x98>

08004738 <_printf_i>:
 8004738:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800473c:	7e0f      	ldrb	r7, [r1, #24]
 800473e:	4691      	mov	r9, r2
 8004740:	2f78      	cmp	r7, #120	@ 0x78
 8004742:	4680      	mov	r8, r0
 8004744:	460c      	mov	r4, r1
 8004746:	469a      	mov	sl, r3
 8004748:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800474a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800474e:	d807      	bhi.n	8004760 <_printf_i+0x28>
 8004750:	2f62      	cmp	r7, #98	@ 0x62
 8004752:	d80a      	bhi.n	800476a <_printf_i+0x32>
 8004754:	2f00      	cmp	r7, #0
 8004756:	f000 80d3 	beq.w	8004900 <_printf_i+0x1c8>
 800475a:	2f58      	cmp	r7, #88	@ 0x58
 800475c:	f000 80ba 	beq.w	80048d4 <_printf_i+0x19c>
 8004760:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004764:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004768:	e03a      	b.n	80047e0 <_printf_i+0xa8>
 800476a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800476e:	2b15      	cmp	r3, #21
 8004770:	d8f6      	bhi.n	8004760 <_printf_i+0x28>
 8004772:	a101      	add	r1, pc, #4	@ (adr r1, 8004778 <_printf_i+0x40>)
 8004774:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004778:	080047d1 	.word	0x080047d1
 800477c:	080047e5 	.word	0x080047e5
 8004780:	08004761 	.word	0x08004761
 8004784:	08004761 	.word	0x08004761
 8004788:	08004761 	.word	0x08004761
 800478c:	08004761 	.word	0x08004761
 8004790:	080047e5 	.word	0x080047e5
 8004794:	08004761 	.word	0x08004761
 8004798:	08004761 	.word	0x08004761
 800479c:	08004761 	.word	0x08004761
 80047a0:	08004761 	.word	0x08004761
 80047a4:	080048e7 	.word	0x080048e7
 80047a8:	0800480f 	.word	0x0800480f
 80047ac:	080048a1 	.word	0x080048a1
 80047b0:	08004761 	.word	0x08004761
 80047b4:	08004761 	.word	0x08004761
 80047b8:	08004909 	.word	0x08004909
 80047bc:	08004761 	.word	0x08004761
 80047c0:	0800480f 	.word	0x0800480f
 80047c4:	08004761 	.word	0x08004761
 80047c8:	08004761 	.word	0x08004761
 80047cc:	080048a9 	.word	0x080048a9
 80047d0:	6833      	ldr	r3, [r6, #0]
 80047d2:	1d1a      	adds	r2, r3, #4
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6032      	str	r2, [r6, #0]
 80047d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80047e0:	2301      	movs	r3, #1
 80047e2:	e09e      	b.n	8004922 <_printf_i+0x1ea>
 80047e4:	6833      	ldr	r3, [r6, #0]
 80047e6:	6820      	ldr	r0, [r4, #0]
 80047e8:	1d19      	adds	r1, r3, #4
 80047ea:	6031      	str	r1, [r6, #0]
 80047ec:	0606      	lsls	r6, r0, #24
 80047ee:	d501      	bpl.n	80047f4 <_printf_i+0xbc>
 80047f0:	681d      	ldr	r5, [r3, #0]
 80047f2:	e003      	b.n	80047fc <_printf_i+0xc4>
 80047f4:	0645      	lsls	r5, r0, #25
 80047f6:	d5fb      	bpl.n	80047f0 <_printf_i+0xb8>
 80047f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80047fc:	2d00      	cmp	r5, #0
 80047fe:	da03      	bge.n	8004808 <_printf_i+0xd0>
 8004800:	232d      	movs	r3, #45	@ 0x2d
 8004802:	426d      	negs	r5, r5
 8004804:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004808:	230a      	movs	r3, #10
 800480a:	4859      	ldr	r0, [pc, #356]	@ (8004970 <_printf_i+0x238>)
 800480c:	e011      	b.n	8004832 <_printf_i+0xfa>
 800480e:	6821      	ldr	r1, [r4, #0]
 8004810:	6833      	ldr	r3, [r6, #0]
 8004812:	0608      	lsls	r0, r1, #24
 8004814:	f853 5b04 	ldr.w	r5, [r3], #4
 8004818:	d402      	bmi.n	8004820 <_printf_i+0xe8>
 800481a:	0649      	lsls	r1, r1, #25
 800481c:	bf48      	it	mi
 800481e:	b2ad      	uxthmi	r5, r5
 8004820:	2f6f      	cmp	r7, #111	@ 0x6f
 8004822:	6033      	str	r3, [r6, #0]
 8004824:	bf14      	ite	ne
 8004826:	230a      	movne	r3, #10
 8004828:	2308      	moveq	r3, #8
 800482a:	4851      	ldr	r0, [pc, #324]	@ (8004970 <_printf_i+0x238>)
 800482c:	2100      	movs	r1, #0
 800482e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004832:	6866      	ldr	r6, [r4, #4]
 8004834:	2e00      	cmp	r6, #0
 8004836:	bfa8      	it	ge
 8004838:	6821      	ldrge	r1, [r4, #0]
 800483a:	60a6      	str	r6, [r4, #8]
 800483c:	bfa4      	itt	ge
 800483e:	f021 0104 	bicge.w	r1, r1, #4
 8004842:	6021      	strge	r1, [r4, #0]
 8004844:	b90d      	cbnz	r5, 800484a <_printf_i+0x112>
 8004846:	2e00      	cmp	r6, #0
 8004848:	d04b      	beq.n	80048e2 <_printf_i+0x1aa>
 800484a:	4616      	mov	r6, r2
 800484c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004850:	fb03 5711 	mls	r7, r3, r1, r5
 8004854:	5dc7      	ldrb	r7, [r0, r7]
 8004856:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800485a:	462f      	mov	r7, r5
 800485c:	42bb      	cmp	r3, r7
 800485e:	460d      	mov	r5, r1
 8004860:	d9f4      	bls.n	800484c <_printf_i+0x114>
 8004862:	2b08      	cmp	r3, #8
 8004864:	d10b      	bne.n	800487e <_printf_i+0x146>
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	07df      	lsls	r7, r3, #31
 800486a:	d508      	bpl.n	800487e <_printf_i+0x146>
 800486c:	6923      	ldr	r3, [r4, #16]
 800486e:	6861      	ldr	r1, [r4, #4]
 8004870:	4299      	cmp	r1, r3
 8004872:	bfde      	ittt	le
 8004874:	2330      	movle	r3, #48	@ 0x30
 8004876:	f806 3c01 	strble.w	r3, [r6, #-1]
 800487a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800487e:	1b92      	subs	r2, r2, r6
 8004880:	6122      	str	r2, [r4, #16]
 8004882:	464b      	mov	r3, r9
 8004884:	4621      	mov	r1, r4
 8004886:	4640      	mov	r0, r8
 8004888:	f8cd a000 	str.w	sl, [sp]
 800488c:	aa03      	add	r2, sp, #12
 800488e:	f7ff fee1 	bl	8004654 <_printf_common>
 8004892:	3001      	adds	r0, #1
 8004894:	d14a      	bne.n	800492c <_printf_i+0x1f4>
 8004896:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800489a:	b004      	add	sp, #16
 800489c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048a0:	6823      	ldr	r3, [r4, #0]
 80048a2:	f043 0320 	orr.w	r3, r3, #32
 80048a6:	6023      	str	r3, [r4, #0]
 80048a8:	2778      	movs	r7, #120	@ 0x78
 80048aa:	4832      	ldr	r0, [pc, #200]	@ (8004974 <_printf_i+0x23c>)
 80048ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80048b0:	6823      	ldr	r3, [r4, #0]
 80048b2:	6831      	ldr	r1, [r6, #0]
 80048b4:	061f      	lsls	r7, r3, #24
 80048b6:	f851 5b04 	ldr.w	r5, [r1], #4
 80048ba:	d402      	bmi.n	80048c2 <_printf_i+0x18a>
 80048bc:	065f      	lsls	r7, r3, #25
 80048be:	bf48      	it	mi
 80048c0:	b2ad      	uxthmi	r5, r5
 80048c2:	6031      	str	r1, [r6, #0]
 80048c4:	07d9      	lsls	r1, r3, #31
 80048c6:	bf44      	itt	mi
 80048c8:	f043 0320 	orrmi.w	r3, r3, #32
 80048cc:	6023      	strmi	r3, [r4, #0]
 80048ce:	b11d      	cbz	r5, 80048d8 <_printf_i+0x1a0>
 80048d0:	2310      	movs	r3, #16
 80048d2:	e7ab      	b.n	800482c <_printf_i+0xf4>
 80048d4:	4826      	ldr	r0, [pc, #152]	@ (8004970 <_printf_i+0x238>)
 80048d6:	e7e9      	b.n	80048ac <_printf_i+0x174>
 80048d8:	6823      	ldr	r3, [r4, #0]
 80048da:	f023 0320 	bic.w	r3, r3, #32
 80048de:	6023      	str	r3, [r4, #0]
 80048e0:	e7f6      	b.n	80048d0 <_printf_i+0x198>
 80048e2:	4616      	mov	r6, r2
 80048e4:	e7bd      	b.n	8004862 <_printf_i+0x12a>
 80048e6:	6833      	ldr	r3, [r6, #0]
 80048e8:	6825      	ldr	r5, [r4, #0]
 80048ea:	1d18      	adds	r0, r3, #4
 80048ec:	6961      	ldr	r1, [r4, #20]
 80048ee:	6030      	str	r0, [r6, #0]
 80048f0:	062e      	lsls	r6, r5, #24
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	d501      	bpl.n	80048fa <_printf_i+0x1c2>
 80048f6:	6019      	str	r1, [r3, #0]
 80048f8:	e002      	b.n	8004900 <_printf_i+0x1c8>
 80048fa:	0668      	lsls	r0, r5, #25
 80048fc:	d5fb      	bpl.n	80048f6 <_printf_i+0x1be>
 80048fe:	8019      	strh	r1, [r3, #0]
 8004900:	2300      	movs	r3, #0
 8004902:	4616      	mov	r6, r2
 8004904:	6123      	str	r3, [r4, #16]
 8004906:	e7bc      	b.n	8004882 <_printf_i+0x14a>
 8004908:	6833      	ldr	r3, [r6, #0]
 800490a:	2100      	movs	r1, #0
 800490c:	1d1a      	adds	r2, r3, #4
 800490e:	6032      	str	r2, [r6, #0]
 8004910:	681e      	ldr	r6, [r3, #0]
 8004912:	6862      	ldr	r2, [r4, #4]
 8004914:	4630      	mov	r0, r6
 8004916:	f000 f913 	bl	8004b40 <memchr>
 800491a:	b108      	cbz	r0, 8004920 <_printf_i+0x1e8>
 800491c:	1b80      	subs	r0, r0, r6
 800491e:	6060      	str	r0, [r4, #4]
 8004920:	6863      	ldr	r3, [r4, #4]
 8004922:	6123      	str	r3, [r4, #16]
 8004924:	2300      	movs	r3, #0
 8004926:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800492a:	e7aa      	b.n	8004882 <_printf_i+0x14a>
 800492c:	4632      	mov	r2, r6
 800492e:	4649      	mov	r1, r9
 8004930:	4640      	mov	r0, r8
 8004932:	6923      	ldr	r3, [r4, #16]
 8004934:	47d0      	blx	sl
 8004936:	3001      	adds	r0, #1
 8004938:	d0ad      	beq.n	8004896 <_printf_i+0x15e>
 800493a:	6823      	ldr	r3, [r4, #0]
 800493c:	079b      	lsls	r3, r3, #30
 800493e:	d413      	bmi.n	8004968 <_printf_i+0x230>
 8004940:	68e0      	ldr	r0, [r4, #12]
 8004942:	9b03      	ldr	r3, [sp, #12]
 8004944:	4298      	cmp	r0, r3
 8004946:	bfb8      	it	lt
 8004948:	4618      	movlt	r0, r3
 800494a:	e7a6      	b.n	800489a <_printf_i+0x162>
 800494c:	2301      	movs	r3, #1
 800494e:	4632      	mov	r2, r6
 8004950:	4649      	mov	r1, r9
 8004952:	4640      	mov	r0, r8
 8004954:	47d0      	blx	sl
 8004956:	3001      	adds	r0, #1
 8004958:	d09d      	beq.n	8004896 <_printf_i+0x15e>
 800495a:	3501      	adds	r5, #1
 800495c:	68e3      	ldr	r3, [r4, #12]
 800495e:	9903      	ldr	r1, [sp, #12]
 8004960:	1a5b      	subs	r3, r3, r1
 8004962:	42ab      	cmp	r3, r5
 8004964:	dcf2      	bgt.n	800494c <_printf_i+0x214>
 8004966:	e7eb      	b.n	8004940 <_printf_i+0x208>
 8004968:	2500      	movs	r5, #0
 800496a:	f104 0619 	add.w	r6, r4, #25
 800496e:	e7f5      	b.n	800495c <_printf_i+0x224>
 8004970:	080054ad 	.word	0x080054ad
 8004974:	080054be 	.word	0x080054be

08004978 <__sflush_r>:
 8004978:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800497c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800497e:	0716      	lsls	r6, r2, #28
 8004980:	4605      	mov	r5, r0
 8004982:	460c      	mov	r4, r1
 8004984:	d454      	bmi.n	8004a30 <__sflush_r+0xb8>
 8004986:	684b      	ldr	r3, [r1, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	dc02      	bgt.n	8004992 <__sflush_r+0x1a>
 800498c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800498e:	2b00      	cmp	r3, #0
 8004990:	dd48      	ble.n	8004a24 <__sflush_r+0xac>
 8004992:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004994:	2e00      	cmp	r6, #0
 8004996:	d045      	beq.n	8004a24 <__sflush_r+0xac>
 8004998:	2300      	movs	r3, #0
 800499a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800499e:	682f      	ldr	r7, [r5, #0]
 80049a0:	6a21      	ldr	r1, [r4, #32]
 80049a2:	602b      	str	r3, [r5, #0]
 80049a4:	d030      	beq.n	8004a08 <__sflush_r+0x90>
 80049a6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80049a8:	89a3      	ldrh	r3, [r4, #12]
 80049aa:	0759      	lsls	r1, r3, #29
 80049ac:	d505      	bpl.n	80049ba <__sflush_r+0x42>
 80049ae:	6863      	ldr	r3, [r4, #4]
 80049b0:	1ad2      	subs	r2, r2, r3
 80049b2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80049b4:	b10b      	cbz	r3, 80049ba <__sflush_r+0x42>
 80049b6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80049b8:	1ad2      	subs	r2, r2, r3
 80049ba:	2300      	movs	r3, #0
 80049bc:	4628      	mov	r0, r5
 80049be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80049c0:	6a21      	ldr	r1, [r4, #32]
 80049c2:	47b0      	blx	r6
 80049c4:	1c43      	adds	r3, r0, #1
 80049c6:	89a3      	ldrh	r3, [r4, #12]
 80049c8:	d106      	bne.n	80049d8 <__sflush_r+0x60>
 80049ca:	6829      	ldr	r1, [r5, #0]
 80049cc:	291d      	cmp	r1, #29
 80049ce:	d82b      	bhi.n	8004a28 <__sflush_r+0xb0>
 80049d0:	4a28      	ldr	r2, [pc, #160]	@ (8004a74 <__sflush_r+0xfc>)
 80049d2:	410a      	asrs	r2, r1
 80049d4:	07d6      	lsls	r6, r2, #31
 80049d6:	d427      	bmi.n	8004a28 <__sflush_r+0xb0>
 80049d8:	2200      	movs	r2, #0
 80049da:	6062      	str	r2, [r4, #4]
 80049dc:	6922      	ldr	r2, [r4, #16]
 80049de:	04d9      	lsls	r1, r3, #19
 80049e0:	6022      	str	r2, [r4, #0]
 80049e2:	d504      	bpl.n	80049ee <__sflush_r+0x76>
 80049e4:	1c42      	adds	r2, r0, #1
 80049e6:	d101      	bne.n	80049ec <__sflush_r+0x74>
 80049e8:	682b      	ldr	r3, [r5, #0]
 80049ea:	b903      	cbnz	r3, 80049ee <__sflush_r+0x76>
 80049ec:	6560      	str	r0, [r4, #84]	@ 0x54
 80049ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049f0:	602f      	str	r7, [r5, #0]
 80049f2:	b1b9      	cbz	r1, 8004a24 <__sflush_r+0xac>
 80049f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80049f8:	4299      	cmp	r1, r3
 80049fa:	d002      	beq.n	8004a02 <__sflush_r+0x8a>
 80049fc:	4628      	mov	r0, r5
 80049fe:	f7ff fbd3 	bl	80041a8 <_free_r>
 8004a02:	2300      	movs	r3, #0
 8004a04:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a06:	e00d      	b.n	8004a24 <__sflush_r+0xac>
 8004a08:	2301      	movs	r3, #1
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	47b0      	blx	r6
 8004a0e:	4602      	mov	r2, r0
 8004a10:	1c50      	adds	r0, r2, #1
 8004a12:	d1c9      	bne.n	80049a8 <__sflush_r+0x30>
 8004a14:	682b      	ldr	r3, [r5, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d0c6      	beq.n	80049a8 <__sflush_r+0x30>
 8004a1a:	2b1d      	cmp	r3, #29
 8004a1c:	d001      	beq.n	8004a22 <__sflush_r+0xaa>
 8004a1e:	2b16      	cmp	r3, #22
 8004a20:	d11d      	bne.n	8004a5e <__sflush_r+0xe6>
 8004a22:	602f      	str	r7, [r5, #0]
 8004a24:	2000      	movs	r0, #0
 8004a26:	e021      	b.n	8004a6c <__sflush_r+0xf4>
 8004a28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a2c:	b21b      	sxth	r3, r3
 8004a2e:	e01a      	b.n	8004a66 <__sflush_r+0xee>
 8004a30:	690f      	ldr	r7, [r1, #16]
 8004a32:	2f00      	cmp	r7, #0
 8004a34:	d0f6      	beq.n	8004a24 <__sflush_r+0xac>
 8004a36:	0793      	lsls	r3, r2, #30
 8004a38:	bf18      	it	ne
 8004a3a:	2300      	movne	r3, #0
 8004a3c:	680e      	ldr	r6, [r1, #0]
 8004a3e:	bf08      	it	eq
 8004a40:	694b      	ldreq	r3, [r1, #20]
 8004a42:	1bf6      	subs	r6, r6, r7
 8004a44:	600f      	str	r7, [r1, #0]
 8004a46:	608b      	str	r3, [r1, #8]
 8004a48:	2e00      	cmp	r6, #0
 8004a4a:	ddeb      	ble.n	8004a24 <__sflush_r+0xac>
 8004a4c:	4633      	mov	r3, r6
 8004a4e:	463a      	mov	r2, r7
 8004a50:	4628      	mov	r0, r5
 8004a52:	6a21      	ldr	r1, [r4, #32]
 8004a54:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004a58:	47e0      	blx	ip
 8004a5a:	2800      	cmp	r0, #0
 8004a5c:	dc07      	bgt.n	8004a6e <__sflush_r+0xf6>
 8004a5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a6a:	81a3      	strh	r3, [r4, #12]
 8004a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a6e:	4407      	add	r7, r0
 8004a70:	1a36      	subs	r6, r6, r0
 8004a72:	e7e9      	b.n	8004a48 <__sflush_r+0xd0>
 8004a74:	dfbffffe 	.word	0xdfbffffe

08004a78 <_fflush_r>:
 8004a78:	b538      	push	{r3, r4, r5, lr}
 8004a7a:	690b      	ldr	r3, [r1, #16]
 8004a7c:	4605      	mov	r5, r0
 8004a7e:	460c      	mov	r4, r1
 8004a80:	b913      	cbnz	r3, 8004a88 <_fflush_r+0x10>
 8004a82:	2500      	movs	r5, #0
 8004a84:	4628      	mov	r0, r5
 8004a86:	bd38      	pop	{r3, r4, r5, pc}
 8004a88:	b118      	cbz	r0, 8004a92 <_fflush_r+0x1a>
 8004a8a:	6a03      	ldr	r3, [r0, #32]
 8004a8c:	b90b      	cbnz	r3, 8004a92 <_fflush_r+0x1a>
 8004a8e:	f7ff f9e7 	bl	8003e60 <__sinit>
 8004a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0f3      	beq.n	8004a82 <_fflush_r+0xa>
 8004a9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a9c:	07d0      	lsls	r0, r2, #31
 8004a9e:	d404      	bmi.n	8004aaa <_fflush_r+0x32>
 8004aa0:	0599      	lsls	r1, r3, #22
 8004aa2:	d402      	bmi.n	8004aaa <_fflush_r+0x32>
 8004aa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004aa6:	f7ff fb5e 	bl	8004166 <__retarget_lock_acquire_recursive>
 8004aaa:	4628      	mov	r0, r5
 8004aac:	4621      	mov	r1, r4
 8004aae:	f7ff ff63 	bl	8004978 <__sflush_r>
 8004ab2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ab4:	4605      	mov	r5, r0
 8004ab6:	07da      	lsls	r2, r3, #31
 8004ab8:	d4e4      	bmi.n	8004a84 <_fflush_r+0xc>
 8004aba:	89a3      	ldrh	r3, [r4, #12]
 8004abc:	059b      	lsls	r3, r3, #22
 8004abe:	d4e1      	bmi.n	8004a84 <_fflush_r+0xc>
 8004ac0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ac2:	f7ff fb51 	bl	8004168 <__retarget_lock_release_recursive>
 8004ac6:	e7dd      	b.n	8004a84 <_fflush_r+0xc>

08004ac8 <fiprintf>:
 8004ac8:	b40e      	push	{r1, r2, r3}
 8004aca:	b503      	push	{r0, r1, lr}
 8004acc:	4601      	mov	r1, r0
 8004ace:	ab03      	add	r3, sp, #12
 8004ad0:	4805      	ldr	r0, [pc, #20]	@ (8004ae8 <fiprintf+0x20>)
 8004ad2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ad6:	6800      	ldr	r0, [r0, #0]
 8004ad8:	9301      	str	r3, [sp, #4]
 8004ada:	f000 f8a9 	bl	8004c30 <_vfiprintf_r>
 8004ade:	b002      	add	sp, #8
 8004ae0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ae4:	b003      	add	sp, #12
 8004ae6:	4770      	bx	lr
 8004ae8:	200000b4 	.word	0x200000b4

08004aec <memmove>:
 8004aec:	4288      	cmp	r0, r1
 8004aee:	b510      	push	{r4, lr}
 8004af0:	eb01 0402 	add.w	r4, r1, r2
 8004af4:	d902      	bls.n	8004afc <memmove+0x10>
 8004af6:	4284      	cmp	r4, r0
 8004af8:	4623      	mov	r3, r4
 8004afa:	d807      	bhi.n	8004b0c <memmove+0x20>
 8004afc:	1e43      	subs	r3, r0, #1
 8004afe:	42a1      	cmp	r1, r4
 8004b00:	d008      	beq.n	8004b14 <memmove+0x28>
 8004b02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b0a:	e7f8      	b.n	8004afe <memmove+0x12>
 8004b0c:	4601      	mov	r1, r0
 8004b0e:	4402      	add	r2, r0
 8004b10:	428a      	cmp	r2, r1
 8004b12:	d100      	bne.n	8004b16 <memmove+0x2a>
 8004b14:	bd10      	pop	{r4, pc}
 8004b16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b1e:	e7f7      	b.n	8004b10 <memmove+0x24>

08004b20 <_sbrk_r>:
 8004b20:	b538      	push	{r3, r4, r5, lr}
 8004b22:	2300      	movs	r3, #0
 8004b24:	4d05      	ldr	r5, [pc, #20]	@ (8004b3c <_sbrk_r+0x1c>)
 8004b26:	4604      	mov	r4, r0
 8004b28:	4608      	mov	r0, r1
 8004b2a:	602b      	str	r3, [r5, #0]
 8004b2c:	f7fc f86e 	bl	8000c0c <_sbrk>
 8004b30:	1c43      	adds	r3, r0, #1
 8004b32:	d102      	bne.n	8004b3a <_sbrk_r+0x1a>
 8004b34:	682b      	ldr	r3, [r5, #0]
 8004b36:	b103      	cbz	r3, 8004b3a <_sbrk_r+0x1a>
 8004b38:	6023      	str	r3, [r4, #0]
 8004b3a:	bd38      	pop	{r3, r4, r5, pc}
 8004b3c:	20000618 	.word	0x20000618

08004b40 <memchr>:
 8004b40:	4603      	mov	r3, r0
 8004b42:	b510      	push	{r4, lr}
 8004b44:	b2c9      	uxtb	r1, r1
 8004b46:	4402      	add	r2, r0
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	d101      	bne.n	8004b52 <memchr+0x12>
 8004b4e:	2000      	movs	r0, #0
 8004b50:	e003      	b.n	8004b5a <memchr+0x1a>
 8004b52:	7804      	ldrb	r4, [r0, #0]
 8004b54:	3301      	adds	r3, #1
 8004b56:	428c      	cmp	r4, r1
 8004b58:	d1f6      	bne.n	8004b48 <memchr+0x8>
 8004b5a:	bd10      	pop	{r4, pc}

08004b5c <memcpy>:
 8004b5c:	440a      	add	r2, r1
 8004b5e:	4291      	cmp	r1, r2
 8004b60:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004b64:	d100      	bne.n	8004b68 <memcpy+0xc>
 8004b66:	4770      	bx	lr
 8004b68:	b510      	push	{r4, lr}
 8004b6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b6e:	4291      	cmp	r1, r2
 8004b70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b74:	d1f9      	bne.n	8004b6a <memcpy+0xe>
 8004b76:	bd10      	pop	{r4, pc}

08004b78 <abort>:
 8004b78:	2006      	movs	r0, #6
 8004b7a:	b508      	push	{r3, lr}
 8004b7c:	f000 fa2c 	bl	8004fd8 <raise>
 8004b80:	2001      	movs	r0, #1
 8004b82:	f7fb ffce 	bl	8000b22 <_exit>

08004b86 <_realloc_r>:
 8004b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b8a:	4680      	mov	r8, r0
 8004b8c:	4615      	mov	r5, r2
 8004b8e:	460c      	mov	r4, r1
 8004b90:	b921      	cbnz	r1, 8004b9c <_realloc_r+0x16>
 8004b92:	4611      	mov	r1, r2
 8004b94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b98:	f7ff bb78 	b.w	800428c <_malloc_r>
 8004b9c:	b92a      	cbnz	r2, 8004baa <_realloc_r+0x24>
 8004b9e:	f7ff fb03 	bl	80041a8 <_free_r>
 8004ba2:	2400      	movs	r4, #0
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004baa:	f000 fa31 	bl	8005010 <_malloc_usable_size_r>
 8004bae:	4285      	cmp	r5, r0
 8004bb0:	4606      	mov	r6, r0
 8004bb2:	d802      	bhi.n	8004bba <_realloc_r+0x34>
 8004bb4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004bb8:	d8f4      	bhi.n	8004ba4 <_realloc_r+0x1e>
 8004bba:	4629      	mov	r1, r5
 8004bbc:	4640      	mov	r0, r8
 8004bbe:	f7ff fb65 	bl	800428c <_malloc_r>
 8004bc2:	4607      	mov	r7, r0
 8004bc4:	2800      	cmp	r0, #0
 8004bc6:	d0ec      	beq.n	8004ba2 <_realloc_r+0x1c>
 8004bc8:	42b5      	cmp	r5, r6
 8004bca:	462a      	mov	r2, r5
 8004bcc:	4621      	mov	r1, r4
 8004bce:	bf28      	it	cs
 8004bd0:	4632      	movcs	r2, r6
 8004bd2:	f7ff ffc3 	bl	8004b5c <memcpy>
 8004bd6:	4621      	mov	r1, r4
 8004bd8:	4640      	mov	r0, r8
 8004bda:	f7ff fae5 	bl	80041a8 <_free_r>
 8004bde:	463c      	mov	r4, r7
 8004be0:	e7e0      	b.n	8004ba4 <_realloc_r+0x1e>

08004be2 <__sfputc_r>:
 8004be2:	6893      	ldr	r3, [r2, #8]
 8004be4:	b410      	push	{r4}
 8004be6:	3b01      	subs	r3, #1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	6093      	str	r3, [r2, #8]
 8004bec:	da07      	bge.n	8004bfe <__sfputc_r+0x1c>
 8004bee:	6994      	ldr	r4, [r2, #24]
 8004bf0:	42a3      	cmp	r3, r4
 8004bf2:	db01      	blt.n	8004bf8 <__sfputc_r+0x16>
 8004bf4:	290a      	cmp	r1, #10
 8004bf6:	d102      	bne.n	8004bfe <__sfputc_r+0x1c>
 8004bf8:	bc10      	pop	{r4}
 8004bfa:	f000 b931 	b.w	8004e60 <__swbuf_r>
 8004bfe:	6813      	ldr	r3, [r2, #0]
 8004c00:	1c58      	adds	r0, r3, #1
 8004c02:	6010      	str	r0, [r2, #0]
 8004c04:	7019      	strb	r1, [r3, #0]
 8004c06:	4608      	mov	r0, r1
 8004c08:	bc10      	pop	{r4}
 8004c0a:	4770      	bx	lr

08004c0c <__sfputs_r>:
 8004c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c0e:	4606      	mov	r6, r0
 8004c10:	460f      	mov	r7, r1
 8004c12:	4614      	mov	r4, r2
 8004c14:	18d5      	adds	r5, r2, r3
 8004c16:	42ac      	cmp	r4, r5
 8004c18:	d101      	bne.n	8004c1e <__sfputs_r+0x12>
 8004c1a:	2000      	movs	r0, #0
 8004c1c:	e007      	b.n	8004c2e <__sfputs_r+0x22>
 8004c1e:	463a      	mov	r2, r7
 8004c20:	4630      	mov	r0, r6
 8004c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c26:	f7ff ffdc 	bl	8004be2 <__sfputc_r>
 8004c2a:	1c43      	adds	r3, r0, #1
 8004c2c:	d1f3      	bne.n	8004c16 <__sfputs_r+0xa>
 8004c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004c30 <_vfiprintf_r>:
 8004c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c34:	460d      	mov	r5, r1
 8004c36:	4614      	mov	r4, r2
 8004c38:	4698      	mov	r8, r3
 8004c3a:	4606      	mov	r6, r0
 8004c3c:	b09d      	sub	sp, #116	@ 0x74
 8004c3e:	b118      	cbz	r0, 8004c48 <_vfiprintf_r+0x18>
 8004c40:	6a03      	ldr	r3, [r0, #32]
 8004c42:	b90b      	cbnz	r3, 8004c48 <_vfiprintf_r+0x18>
 8004c44:	f7ff f90c 	bl	8003e60 <__sinit>
 8004c48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c4a:	07d9      	lsls	r1, r3, #31
 8004c4c:	d405      	bmi.n	8004c5a <_vfiprintf_r+0x2a>
 8004c4e:	89ab      	ldrh	r3, [r5, #12]
 8004c50:	059a      	lsls	r2, r3, #22
 8004c52:	d402      	bmi.n	8004c5a <_vfiprintf_r+0x2a>
 8004c54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c56:	f7ff fa86 	bl	8004166 <__retarget_lock_acquire_recursive>
 8004c5a:	89ab      	ldrh	r3, [r5, #12]
 8004c5c:	071b      	lsls	r3, r3, #28
 8004c5e:	d501      	bpl.n	8004c64 <_vfiprintf_r+0x34>
 8004c60:	692b      	ldr	r3, [r5, #16]
 8004c62:	b99b      	cbnz	r3, 8004c8c <_vfiprintf_r+0x5c>
 8004c64:	4629      	mov	r1, r5
 8004c66:	4630      	mov	r0, r6
 8004c68:	f000 f938 	bl	8004edc <__swsetup_r>
 8004c6c:	b170      	cbz	r0, 8004c8c <_vfiprintf_r+0x5c>
 8004c6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c70:	07dc      	lsls	r4, r3, #31
 8004c72:	d504      	bpl.n	8004c7e <_vfiprintf_r+0x4e>
 8004c74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c78:	b01d      	add	sp, #116	@ 0x74
 8004c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c7e:	89ab      	ldrh	r3, [r5, #12]
 8004c80:	0598      	lsls	r0, r3, #22
 8004c82:	d4f7      	bmi.n	8004c74 <_vfiprintf_r+0x44>
 8004c84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c86:	f7ff fa6f 	bl	8004168 <__retarget_lock_release_recursive>
 8004c8a:	e7f3      	b.n	8004c74 <_vfiprintf_r+0x44>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c90:	2320      	movs	r3, #32
 8004c92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c96:	2330      	movs	r3, #48	@ 0x30
 8004c98:	f04f 0901 	mov.w	r9, #1
 8004c9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ca0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004e4c <_vfiprintf_r+0x21c>
 8004ca4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004ca8:	4623      	mov	r3, r4
 8004caa:	469a      	mov	sl, r3
 8004cac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cb0:	b10a      	cbz	r2, 8004cb6 <_vfiprintf_r+0x86>
 8004cb2:	2a25      	cmp	r2, #37	@ 0x25
 8004cb4:	d1f9      	bne.n	8004caa <_vfiprintf_r+0x7a>
 8004cb6:	ebba 0b04 	subs.w	fp, sl, r4
 8004cba:	d00b      	beq.n	8004cd4 <_vfiprintf_r+0xa4>
 8004cbc:	465b      	mov	r3, fp
 8004cbe:	4622      	mov	r2, r4
 8004cc0:	4629      	mov	r1, r5
 8004cc2:	4630      	mov	r0, r6
 8004cc4:	f7ff ffa2 	bl	8004c0c <__sfputs_r>
 8004cc8:	3001      	adds	r0, #1
 8004cca:	f000 80a7 	beq.w	8004e1c <_vfiprintf_r+0x1ec>
 8004cce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004cd0:	445a      	add	r2, fp
 8004cd2:	9209      	str	r2, [sp, #36]	@ 0x24
 8004cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 809f 	beq.w	8004e1c <_vfiprintf_r+0x1ec>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004ce4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ce8:	f10a 0a01 	add.w	sl, sl, #1
 8004cec:	9304      	str	r3, [sp, #16]
 8004cee:	9307      	str	r3, [sp, #28]
 8004cf0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004cf4:	931a      	str	r3, [sp, #104]	@ 0x68
 8004cf6:	4654      	mov	r4, sl
 8004cf8:	2205      	movs	r2, #5
 8004cfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cfe:	4853      	ldr	r0, [pc, #332]	@ (8004e4c <_vfiprintf_r+0x21c>)
 8004d00:	f7ff ff1e 	bl	8004b40 <memchr>
 8004d04:	9a04      	ldr	r2, [sp, #16]
 8004d06:	b9d8      	cbnz	r0, 8004d40 <_vfiprintf_r+0x110>
 8004d08:	06d1      	lsls	r1, r2, #27
 8004d0a:	bf44      	itt	mi
 8004d0c:	2320      	movmi	r3, #32
 8004d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d12:	0713      	lsls	r3, r2, #28
 8004d14:	bf44      	itt	mi
 8004d16:	232b      	movmi	r3, #43	@ 0x2b
 8004d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d1c:	f89a 3000 	ldrb.w	r3, [sl]
 8004d20:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d22:	d015      	beq.n	8004d50 <_vfiprintf_r+0x120>
 8004d24:	4654      	mov	r4, sl
 8004d26:	2000      	movs	r0, #0
 8004d28:	f04f 0c0a 	mov.w	ip, #10
 8004d2c:	9a07      	ldr	r2, [sp, #28]
 8004d2e:	4621      	mov	r1, r4
 8004d30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d34:	3b30      	subs	r3, #48	@ 0x30
 8004d36:	2b09      	cmp	r3, #9
 8004d38:	d94b      	bls.n	8004dd2 <_vfiprintf_r+0x1a2>
 8004d3a:	b1b0      	cbz	r0, 8004d6a <_vfiprintf_r+0x13a>
 8004d3c:	9207      	str	r2, [sp, #28]
 8004d3e:	e014      	b.n	8004d6a <_vfiprintf_r+0x13a>
 8004d40:	eba0 0308 	sub.w	r3, r0, r8
 8004d44:	fa09 f303 	lsl.w	r3, r9, r3
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	46a2      	mov	sl, r4
 8004d4c:	9304      	str	r3, [sp, #16]
 8004d4e:	e7d2      	b.n	8004cf6 <_vfiprintf_r+0xc6>
 8004d50:	9b03      	ldr	r3, [sp, #12]
 8004d52:	1d19      	adds	r1, r3, #4
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	9103      	str	r1, [sp, #12]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	bfbb      	ittet	lt
 8004d5c:	425b      	neglt	r3, r3
 8004d5e:	f042 0202 	orrlt.w	r2, r2, #2
 8004d62:	9307      	strge	r3, [sp, #28]
 8004d64:	9307      	strlt	r3, [sp, #28]
 8004d66:	bfb8      	it	lt
 8004d68:	9204      	strlt	r2, [sp, #16]
 8004d6a:	7823      	ldrb	r3, [r4, #0]
 8004d6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d6e:	d10a      	bne.n	8004d86 <_vfiprintf_r+0x156>
 8004d70:	7863      	ldrb	r3, [r4, #1]
 8004d72:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d74:	d132      	bne.n	8004ddc <_vfiprintf_r+0x1ac>
 8004d76:	9b03      	ldr	r3, [sp, #12]
 8004d78:	3402      	adds	r4, #2
 8004d7a:	1d1a      	adds	r2, r3, #4
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	9203      	str	r2, [sp, #12]
 8004d80:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d84:	9305      	str	r3, [sp, #20]
 8004d86:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004e50 <_vfiprintf_r+0x220>
 8004d8a:	2203      	movs	r2, #3
 8004d8c:	4650      	mov	r0, sl
 8004d8e:	7821      	ldrb	r1, [r4, #0]
 8004d90:	f7ff fed6 	bl	8004b40 <memchr>
 8004d94:	b138      	cbz	r0, 8004da6 <_vfiprintf_r+0x176>
 8004d96:	2240      	movs	r2, #64	@ 0x40
 8004d98:	9b04      	ldr	r3, [sp, #16]
 8004d9a:	eba0 000a 	sub.w	r0, r0, sl
 8004d9e:	4082      	lsls	r2, r0
 8004da0:	4313      	orrs	r3, r2
 8004da2:	3401      	adds	r4, #1
 8004da4:	9304      	str	r3, [sp, #16]
 8004da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004daa:	2206      	movs	r2, #6
 8004dac:	4829      	ldr	r0, [pc, #164]	@ (8004e54 <_vfiprintf_r+0x224>)
 8004dae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004db2:	f7ff fec5 	bl	8004b40 <memchr>
 8004db6:	2800      	cmp	r0, #0
 8004db8:	d03f      	beq.n	8004e3a <_vfiprintf_r+0x20a>
 8004dba:	4b27      	ldr	r3, [pc, #156]	@ (8004e58 <_vfiprintf_r+0x228>)
 8004dbc:	bb1b      	cbnz	r3, 8004e06 <_vfiprintf_r+0x1d6>
 8004dbe:	9b03      	ldr	r3, [sp, #12]
 8004dc0:	3307      	adds	r3, #7
 8004dc2:	f023 0307 	bic.w	r3, r3, #7
 8004dc6:	3308      	adds	r3, #8
 8004dc8:	9303      	str	r3, [sp, #12]
 8004dca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dcc:	443b      	add	r3, r7
 8004dce:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dd0:	e76a      	b.n	8004ca8 <_vfiprintf_r+0x78>
 8004dd2:	460c      	mov	r4, r1
 8004dd4:	2001      	movs	r0, #1
 8004dd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004dda:	e7a8      	b.n	8004d2e <_vfiprintf_r+0xfe>
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f04f 0c0a 	mov.w	ip, #10
 8004de2:	4619      	mov	r1, r3
 8004de4:	3401      	adds	r4, #1
 8004de6:	9305      	str	r3, [sp, #20]
 8004de8:	4620      	mov	r0, r4
 8004dea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004dee:	3a30      	subs	r2, #48	@ 0x30
 8004df0:	2a09      	cmp	r2, #9
 8004df2:	d903      	bls.n	8004dfc <_vfiprintf_r+0x1cc>
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d0c6      	beq.n	8004d86 <_vfiprintf_r+0x156>
 8004df8:	9105      	str	r1, [sp, #20]
 8004dfa:	e7c4      	b.n	8004d86 <_vfiprintf_r+0x156>
 8004dfc:	4604      	mov	r4, r0
 8004dfe:	2301      	movs	r3, #1
 8004e00:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e04:	e7f0      	b.n	8004de8 <_vfiprintf_r+0x1b8>
 8004e06:	ab03      	add	r3, sp, #12
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	462a      	mov	r2, r5
 8004e0c:	4630      	mov	r0, r6
 8004e0e:	4b13      	ldr	r3, [pc, #76]	@ (8004e5c <_vfiprintf_r+0x22c>)
 8004e10:	a904      	add	r1, sp, #16
 8004e12:	f3af 8000 	nop.w
 8004e16:	4607      	mov	r7, r0
 8004e18:	1c78      	adds	r0, r7, #1
 8004e1a:	d1d6      	bne.n	8004dca <_vfiprintf_r+0x19a>
 8004e1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e1e:	07d9      	lsls	r1, r3, #31
 8004e20:	d405      	bmi.n	8004e2e <_vfiprintf_r+0x1fe>
 8004e22:	89ab      	ldrh	r3, [r5, #12]
 8004e24:	059a      	lsls	r2, r3, #22
 8004e26:	d402      	bmi.n	8004e2e <_vfiprintf_r+0x1fe>
 8004e28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e2a:	f7ff f99d 	bl	8004168 <__retarget_lock_release_recursive>
 8004e2e:	89ab      	ldrh	r3, [r5, #12]
 8004e30:	065b      	lsls	r3, r3, #25
 8004e32:	f53f af1f 	bmi.w	8004c74 <_vfiprintf_r+0x44>
 8004e36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e38:	e71e      	b.n	8004c78 <_vfiprintf_r+0x48>
 8004e3a:	ab03      	add	r3, sp, #12
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	462a      	mov	r2, r5
 8004e40:	4630      	mov	r0, r6
 8004e42:	4b06      	ldr	r3, [pc, #24]	@ (8004e5c <_vfiprintf_r+0x22c>)
 8004e44:	a904      	add	r1, sp, #16
 8004e46:	f7ff fc77 	bl	8004738 <_printf_i>
 8004e4a:	e7e4      	b.n	8004e16 <_vfiprintf_r+0x1e6>
 8004e4c:	0800549c 	.word	0x0800549c
 8004e50:	080054a2 	.word	0x080054a2
 8004e54:	080054a6 	.word	0x080054a6
 8004e58:	00000000 	.word	0x00000000
 8004e5c:	08004c0d 	.word	0x08004c0d

08004e60 <__swbuf_r>:
 8004e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e62:	460e      	mov	r6, r1
 8004e64:	4614      	mov	r4, r2
 8004e66:	4605      	mov	r5, r0
 8004e68:	b118      	cbz	r0, 8004e72 <__swbuf_r+0x12>
 8004e6a:	6a03      	ldr	r3, [r0, #32]
 8004e6c:	b90b      	cbnz	r3, 8004e72 <__swbuf_r+0x12>
 8004e6e:	f7fe fff7 	bl	8003e60 <__sinit>
 8004e72:	69a3      	ldr	r3, [r4, #24]
 8004e74:	60a3      	str	r3, [r4, #8]
 8004e76:	89a3      	ldrh	r3, [r4, #12]
 8004e78:	071a      	lsls	r2, r3, #28
 8004e7a:	d501      	bpl.n	8004e80 <__swbuf_r+0x20>
 8004e7c:	6923      	ldr	r3, [r4, #16]
 8004e7e:	b943      	cbnz	r3, 8004e92 <__swbuf_r+0x32>
 8004e80:	4621      	mov	r1, r4
 8004e82:	4628      	mov	r0, r5
 8004e84:	f000 f82a 	bl	8004edc <__swsetup_r>
 8004e88:	b118      	cbz	r0, 8004e92 <__swbuf_r+0x32>
 8004e8a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004e8e:	4638      	mov	r0, r7
 8004e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e92:	6823      	ldr	r3, [r4, #0]
 8004e94:	6922      	ldr	r2, [r4, #16]
 8004e96:	b2f6      	uxtb	r6, r6
 8004e98:	1a98      	subs	r0, r3, r2
 8004e9a:	6963      	ldr	r3, [r4, #20]
 8004e9c:	4637      	mov	r7, r6
 8004e9e:	4283      	cmp	r3, r0
 8004ea0:	dc05      	bgt.n	8004eae <__swbuf_r+0x4e>
 8004ea2:	4621      	mov	r1, r4
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	f7ff fde7 	bl	8004a78 <_fflush_r>
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	d1ed      	bne.n	8004e8a <__swbuf_r+0x2a>
 8004eae:	68a3      	ldr	r3, [r4, #8]
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	60a3      	str	r3, [r4, #8]
 8004eb4:	6823      	ldr	r3, [r4, #0]
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	6022      	str	r2, [r4, #0]
 8004eba:	701e      	strb	r6, [r3, #0]
 8004ebc:	6962      	ldr	r2, [r4, #20]
 8004ebe:	1c43      	adds	r3, r0, #1
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d004      	beq.n	8004ece <__swbuf_r+0x6e>
 8004ec4:	89a3      	ldrh	r3, [r4, #12]
 8004ec6:	07db      	lsls	r3, r3, #31
 8004ec8:	d5e1      	bpl.n	8004e8e <__swbuf_r+0x2e>
 8004eca:	2e0a      	cmp	r6, #10
 8004ecc:	d1df      	bne.n	8004e8e <__swbuf_r+0x2e>
 8004ece:	4621      	mov	r1, r4
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	f7ff fdd1 	bl	8004a78 <_fflush_r>
 8004ed6:	2800      	cmp	r0, #0
 8004ed8:	d0d9      	beq.n	8004e8e <__swbuf_r+0x2e>
 8004eda:	e7d6      	b.n	8004e8a <__swbuf_r+0x2a>

08004edc <__swsetup_r>:
 8004edc:	b538      	push	{r3, r4, r5, lr}
 8004ede:	4b29      	ldr	r3, [pc, #164]	@ (8004f84 <__swsetup_r+0xa8>)
 8004ee0:	4605      	mov	r5, r0
 8004ee2:	6818      	ldr	r0, [r3, #0]
 8004ee4:	460c      	mov	r4, r1
 8004ee6:	b118      	cbz	r0, 8004ef0 <__swsetup_r+0x14>
 8004ee8:	6a03      	ldr	r3, [r0, #32]
 8004eea:	b90b      	cbnz	r3, 8004ef0 <__swsetup_r+0x14>
 8004eec:	f7fe ffb8 	bl	8003e60 <__sinit>
 8004ef0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ef4:	0719      	lsls	r1, r3, #28
 8004ef6:	d422      	bmi.n	8004f3e <__swsetup_r+0x62>
 8004ef8:	06da      	lsls	r2, r3, #27
 8004efa:	d407      	bmi.n	8004f0c <__swsetup_r+0x30>
 8004efc:	2209      	movs	r2, #9
 8004efe:	602a      	str	r2, [r5, #0]
 8004f00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f08:	81a3      	strh	r3, [r4, #12]
 8004f0a:	e033      	b.n	8004f74 <__swsetup_r+0x98>
 8004f0c:	0758      	lsls	r0, r3, #29
 8004f0e:	d512      	bpl.n	8004f36 <__swsetup_r+0x5a>
 8004f10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f12:	b141      	cbz	r1, 8004f26 <__swsetup_r+0x4a>
 8004f14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f18:	4299      	cmp	r1, r3
 8004f1a:	d002      	beq.n	8004f22 <__swsetup_r+0x46>
 8004f1c:	4628      	mov	r0, r5
 8004f1e:	f7ff f943 	bl	80041a8 <_free_r>
 8004f22:	2300      	movs	r3, #0
 8004f24:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f26:	89a3      	ldrh	r3, [r4, #12]
 8004f28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004f2c:	81a3      	strh	r3, [r4, #12]
 8004f2e:	2300      	movs	r3, #0
 8004f30:	6063      	str	r3, [r4, #4]
 8004f32:	6923      	ldr	r3, [r4, #16]
 8004f34:	6023      	str	r3, [r4, #0]
 8004f36:	89a3      	ldrh	r3, [r4, #12]
 8004f38:	f043 0308 	orr.w	r3, r3, #8
 8004f3c:	81a3      	strh	r3, [r4, #12]
 8004f3e:	6923      	ldr	r3, [r4, #16]
 8004f40:	b94b      	cbnz	r3, 8004f56 <__swsetup_r+0x7a>
 8004f42:	89a3      	ldrh	r3, [r4, #12]
 8004f44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004f48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f4c:	d003      	beq.n	8004f56 <__swsetup_r+0x7a>
 8004f4e:	4621      	mov	r1, r4
 8004f50:	4628      	mov	r0, r5
 8004f52:	f000 f88a 	bl	800506a <__smakebuf_r>
 8004f56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f5a:	f013 0201 	ands.w	r2, r3, #1
 8004f5e:	d00a      	beq.n	8004f76 <__swsetup_r+0x9a>
 8004f60:	2200      	movs	r2, #0
 8004f62:	60a2      	str	r2, [r4, #8]
 8004f64:	6962      	ldr	r2, [r4, #20]
 8004f66:	4252      	negs	r2, r2
 8004f68:	61a2      	str	r2, [r4, #24]
 8004f6a:	6922      	ldr	r2, [r4, #16]
 8004f6c:	b942      	cbnz	r2, 8004f80 <__swsetup_r+0xa4>
 8004f6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004f72:	d1c5      	bne.n	8004f00 <__swsetup_r+0x24>
 8004f74:	bd38      	pop	{r3, r4, r5, pc}
 8004f76:	0799      	lsls	r1, r3, #30
 8004f78:	bf58      	it	pl
 8004f7a:	6962      	ldrpl	r2, [r4, #20]
 8004f7c:	60a2      	str	r2, [r4, #8]
 8004f7e:	e7f4      	b.n	8004f6a <__swsetup_r+0x8e>
 8004f80:	2000      	movs	r0, #0
 8004f82:	e7f7      	b.n	8004f74 <__swsetup_r+0x98>
 8004f84:	200000b4 	.word	0x200000b4

08004f88 <_raise_r>:
 8004f88:	291f      	cmp	r1, #31
 8004f8a:	b538      	push	{r3, r4, r5, lr}
 8004f8c:	4605      	mov	r5, r0
 8004f8e:	460c      	mov	r4, r1
 8004f90:	d904      	bls.n	8004f9c <_raise_r+0x14>
 8004f92:	2316      	movs	r3, #22
 8004f94:	6003      	str	r3, [r0, #0]
 8004f96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f9a:	bd38      	pop	{r3, r4, r5, pc}
 8004f9c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004f9e:	b112      	cbz	r2, 8004fa6 <_raise_r+0x1e>
 8004fa0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004fa4:	b94b      	cbnz	r3, 8004fba <_raise_r+0x32>
 8004fa6:	4628      	mov	r0, r5
 8004fa8:	f000 f830 	bl	800500c <_getpid_r>
 8004fac:	4622      	mov	r2, r4
 8004fae:	4601      	mov	r1, r0
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fb6:	f000 b817 	b.w	8004fe8 <_kill_r>
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d00a      	beq.n	8004fd4 <_raise_r+0x4c>
 8004fbe:	1c59      	adds	r1, r3, #1
 8004fc0:	d103      	bne.n	8004fca <_raise_r+0x42>
 8004fc2:	2316      	movs	r3, #22
 8004fc4:	6003      	str	r3, [r0, #0]
 8004fc6:	2001      	movs	r0, #1
 8004fc8:	e7e7      	b.n	8004f9a <_raise_r+0x12>
 8004fca:	2100      	movs	r1, #0
 8004fcc:	4620      	mov	r0, r4
 8004fce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004fd2:	4798      	blx	r3
 8004fd4:	2000      	movs	r0, #0
 8004fd6:	e7e0      	b.n	8004f9a <_raise_r+0x12>

08004fd8 <raise>:
 8004fd8:	4b02      	ldr	r3, [pc, #8]	@ (8004fe4 <raise+0xc>)
 8004fda:	4601      	mov	r1, r0
 8004fdc:	6818      	ldr	r0, [r3, #0]
 8004fde:	f7ff bfd3 	b.w	8004f88 <_raise_r>
 8004fe2:	bf00      	nop
 8004fe4:	200000b4 	.word	0x200000b4

08004fe8 <_kill_r>:
 8004fe8:	b538      	push	{r3, r4, r5, lr}
 8004fea:	2300      	movs	r3, #0
 8004fec:	4d06      	ldr	r5, [pc, #24]	@ (8005008 <_kill_r+0x20>)
 8004fee:	4604      	mov	r4, r0
 8004ff0:	4608      	mov	r0, r1
 8004ff2:	4611      	mov	r1, r2
 8004ff4:	602b      	str	r3, [r5, #0]
 8004ff6:	f7fb fd84 	bl	8000b02 <_kill>
 8004ffa:	1c43      	adds	r3, r0, #1
 8004ffc:	d102      	bne.n	8005004 <_kill_r+0x1c>
 8004ffe:	682b      	ldr	r3, [r5, #0]
 8005000:	b103      	cbz	r3, 8005004 <_kill_r+0x1c>
 8005002:	6023      	str	r3, [r4, #0]
 8005004:	bd38      	pop	{r3, r4, r5, pc}
 8005006:	bf00      	nop
 8005008:	20000618 	.word	0x20000618

0800500c <_getpid_r>:
 800500c:	f7fb bd72 	b.w	8000af4 <_getpid>

08005010 <_malloc_usable_size_r>:
 8005010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005014:	1f18      	subs	r0, r3, #4
 8005016:	2b00      	cmp	r3, #0
 8005018:	bfbc      	itt	lt
 800501a:	580b      	ldrlt	r3, [r1, r0]
 800501c:	18c0      	addlt	r0, r0, r3
 800501e:	4770      	bx	lr

08005020 <__swhatbuf_r>:
 8005020:	b570      	push	{r4, r5, r6, lr}
 8005022:	460c      	mov	r4, r1
 8005024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005028:	4615      	mov	r5, r2
 800502a:	2900      	cmp	r1, #0
 800502c:	461e      	mov	r6, r3
 800502e:	b096      	sub	sp, #88	@ 0x58
 8005030:	da0c      	bge.n	800504c <__swhatbuf_r+0x2c>
 8005032:	89a3      	ldrh	r3, [r4, #12]
 8005034:	2100      	movs	r1, #0
 8005036:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800503a:	bf14      	ite	ne
 800503c:	2340      	movne	r3, #64	@ 0x40
 800503e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005042:	2000      	movs	r0, #0
 8005044:	6031      	str	r1, [r6, #0]
 8005046:	602b      	str	r3, [r5, #0]
 8005048:	b016      	add	sp, #88	@ 0x58
 800504a:	bd70      	pop	{r4, r5, r6, pc}
 800504c:	466a      	mov	r2, sp
 800504e:	f000 f849 	bl	80050e4 <_fstat_r>
 8005052:	2800      	cmp	r0, #0
 8005054:	dbed      	blt.n	8005032 <__swhatbuf_r+0x12>
 8005056:	9901      	ldr	r1, [sp, #4]
 8005058:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800505c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005060:	4259      	negs	r1, r3
 8005062:	4159      	adcs	r1, r3
 8005064:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005068:	e7eb      	b.n	8005042 <__swhatbuf_r+0x22>

0800506a <__smakebuf_r>:
 800506a:	898b      	ldrh	r3, [r1, #12]
 800506c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800506e:	079d      	lsls	r5, r3, #30
 8005070:	4606      	mov	r6, r0
 8005072:	460c      	mov	r4, r1
 8005074:	d507      	bpl.n	8005086 <__smakebuf_r+0x1c>
 8005076:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800507a:	6023      	str	r3, [r4, #0]
 800507c:	6123      	str	r3, [r4, #16]
 800507e:	2301      	movs	r3, #1
 8005080:	6163      	str	r3, [r4, #20]
 8005082:	b003      	add	sp, #12
 8005084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005086:	466a      	mov	r2, sp
 8005088:	ab01      	add	r3, sp, #4
 800508a:	f7ff ffc9 	bl	8005020 <__swhatbuf_r>
 800508e:	9f00      	ldr	r7, [sp, #0]
 8005090:	4605      	mov	r5, r0
 8005092:	4639      	mov	r1, r7
 8005094:	4630      	mov	r0, r6
 8005096:	f7ff f8f9 	bl	800428c <_malloc_r>
 800509a:	b948      	cbnz	r0, 80050b0 <__smakebuf_r+0x46>
 800509c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050a0:	059a      	lsls	r2, r3, #22
 80050a2:	d4ee      	bmi.n	8005082 <__smakebuf_r+0x18>
 80050a4:	f023 0303 	bic.w	r3, r3, #3
 80050a8:	f043 0302 	orr.w	r3, r3, #2
 80050ac:	81a3      	strh	r3, [r4, #12]
 80050ae:	e7e2      	b.n	8005076 <__smakebuf_r+0xc>
 80050b0:	89a3      	ldrh	r3, [r4, #12]
 80050b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80050b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050ba:	81a3      	strh	r3, [r4, #12]
 80050bc:	9b01      	ldr	r3, [sp, #4]
 80050be:	6020      	str	r0, [r4, #0]
 80050c0:	b15b      	cbz	r3, 80050da <__smakebuf_r+0x70>
 80050c2:	4630      	mov	r0, r6
 80050c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050c8:	f000 f81e 	bl	8005108 <_isatty_r>
 80050cc:	b128      	cbz	r0, 80050da <__smakebuf_r+0x70>
 80050ce:	89a3      	ldrh	r3, [r4, #12]
 80050d0:	f023 0303 	bic.w	r3, r3, #3
 80050d4:	f043 0301 	orr.w	r3, r3, #1
 80050d8:	81a3      	strh	r3, [r4, #12]
 80050da:	89a3      	ldrh	r3, [r4, #12]
 80050dc:	431d      	orrs	r5, r3
 80050de:	81a5      	strh	r5, [r4, #12]
 80050e0:	e7cf      	b.n	8005082 <__smakebuf_r+0x18>
	...

080050e4 <_fstat_r>:
 80050e4:	b538      	push	{r3, r4, r5, lr}
 80050e6:	2300      	movs	r3, #0
 80050e8:	4d06      	ldr	r5, [pc, #24]	@ (8005104 <_fstat_r+0x20>)
 80050ea:	4604      	mov	r4, r0
 80050ec:	4608      	mov	r0, r1
 80050ee:	4611      	mov	r1, r2
 80050f0:	602b      	str	r3, [r5, #0]
 80050f2:	f7fb fd65 	bl	8000bc0 <_fstat>
 80050f6:	1c43      	adds	r3, r0, #1
 80050f8:	d102      	bne.n	8005100 <_fstat_r+0x1c>
 80050fa:	682b      	ldr	r3, [r5, #0]
 80050fc:	b103      	cbz	r3, 8005100 <_fstat_r+0x1c>
 80050fe:	6023      	str	r3, [r4, #0]
 8005100:	bd38      	pop	{r3, r4, r5, pc}
 8005102:	bf00      	nop
 8005104:	20000618 	.word	0x20000618

08005108 <_isatty_r>:
 8005108:	b538      	push	{r3, r4, r5, lr}
 800510a:	2300      	movs	r3, #0
 800510c:	4d05      	ldr	r5, [pc, #20]	@ (8005124 <_isatty_r+0x1c>)
 800510e:	4604      	mov	r4, r0
 8005110:	4608      	mov	r0, r1
 8005112:	602b      	str	r3, [r5, #0]
 8005114:	f7fb fd63 	bl	8000bde <_isatty>
 8005118:	1c43      	adds	r3, r0, #1
 800511a:	d102      	bne.n	8005122 <_isatty_r+0x1a>
 800511c:	682b      	ldr	r3, [r5, #0]
 800511e:	b103      	cbz	r3, 8005122 <_isatty_r+0x1a>
 8005120:	6023      	str	r3, [r4, #0]
 8005122:	bd38      	pop	{r3, r4, r5, pc}
 8005124:	20000618 	.word	0x20000618

08005128 <_init>:
 8005128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512a:	bf00      	nop
 800512c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800512e:	bc08      	pop	{r3}
 8005130:	469e      	mov	lr, r3
 8005132:	4770      	bx	lr

08005134 <_fini>:
 8005134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005136:	bf00      	nop
 8005138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800513a:	bc08      	pop	{r3}
 800513c:	469e      	mov	lr, r3
 800513e:	4770      	bx	lr
